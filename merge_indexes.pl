#!/usr/bin/perl -w

#
# 13/10/95 jkb
#
# Loops around the table of contents html files generated by texi2html
# to find the index files. When found, we merge these to generate a single
# master index. Simultaneously we output full and brief contents pages, and
# update those pages we're accessing to point back to our master pages.
#

$os=shift;
%index = ();
$silent = 1;
$doit = 0;
$curr_file = "";
$TODAY = &pretty_date;			# like "20 September 1993"
$http_prefix = "..";
$http_prefix2 = "$http_prefix/manual";
$package_version = "version 1.5 (2004)";

open(TOCL, "> master_${os}_contents.html")
	|| die "Couldn't create master_${os}_contents.html";
open(TOCS, "> master_${os}_brief.html")
	|| die "Couldn't create master_${os}_brief.html";

# Create full and brief contents page headers
print TOCL <<EOH;
<HTML>
<HEAD>
<TITLE>Master Table of Contents</TITLE>
</HEAD>
<BODY bgcolor="#ffffff">
<a href="$http_prefix/staden_home.html"><img src="i/nav_home.gif" alt="home"></a>
<a href="$http_prefix/documentation.html"><img src="i/nav_up.gif" alt="up"></a>
<a href="master_${os}_brief.html"><img src="i/nav_brief.gif" alt="brief"></a>
<hr size=4>
<H1>Master Table of Contents</H1>
<H3>For $package_version</H3>
For the most recent version of this documentation see the package
<a href="http://staden.sourceforge.net/documentation.html">home page</a>.
EOH

print TOCS <<EOH;
<HTML>
<HEAD>
<TITLE>Master Table of Contents (Brief)</TITLE>
</HEAD>
<BODY bgcolor="#ffffff">
<a href="$http_prefix/staden_home.html"><img src="i/nav_home.gif" alt="home"></a>
<a href="$http_prefix/documentation.html"><img src="i/nav_up.gif" alt="up"></a>
<a href="master_${os}_contents.html"><img src="i/nav_full.gif" alt="full"></a>
<hr size=4>
<H1>Master Table of Contents (Brief)</H1>
<H3>For $package_version</H3>
For the most recent version of this documentation see the package
<a href="http://staden.sourceforge.net/documentation.html">home page</a>.
<HR>
<P>
EOH

# Scan through contents pages adding to master contents and collating the
# index information.
while (<ARGV>) {
    if ($ARGV ne $curr_file) {
	if ($curr_file) {
	    close(NEW_TOC);
	    rename("_$curr_file", $curr_file);
	}
	$curr_file = $ARGV;
	open(NEW_TOC, "> _$ARGV") || die "Couldn't create _$ARGV";
    }

    if (/^<BODY.*>$/) { # Header is next line
	$silent = 0;
	print NEW_TOC $_;
	print NEW_TOC <<EOH;
<a href="$http_prefix/staden_home.html"><img src="i/nav_home.gif" alt="home"></a>
<a href="$http_prefix/documentation.html"><img src="i/nav_up.gif" alt="up"></a>
<a href="master_${os}_brief.html"><img src="i/nav_brief.gif" alt="brief"></a>
<a href="master_${os}_contents.html"><img src="i/nav_full.gif" alt="full"></a>
<hr size=4>
EOH
	next;
    }
    if (/^<HR>$/) { #Footer of _toc file (hack: assume on a line by itself)
        print NEW_TOC <<EOH;
<hr size=4>
<a href="$http_prefix/staden_home.html"><img src="i/nav_home.gif" alt="home"></a>
<a href="$http_prefix/documentation.html"><img src="i/nav_up.gif" alt="up"></a>
<a href="master_${os}_brief.html"><img src="i/nav_brief.gif" alt="brief"></a>
<a href="master_${os}_contents.html"><img src="i/nav_full.gif" alt="full"></a>
<hr>
EOH
	$silent = 1;
	$doit = 0;
	next;
    }
    print NEW_TOC $_;
    next if ($silent);

    if (/^<H1>(.*)<\/H1>$/) {
	print TOCL "<HR>\n<H2><A HREF=\"$ARGV\">$1</A></H2>\n";
	print TOCS "<H2><A HREF=\"$ARGV\">$1</A></H2>\n";
	next;
    }
    $doit = 1 if (/^<UL>$/);
    print TOCL $_ if ($doit);
    if (/<LI><A NAME="SEC.*HREF="([^#]*)[^"]*">(.*[Ii]ndex.*)<\/A>$/) {
	print "Found '$2' in $1: ";
	
	&generate_index($1, $2);
    }
}
if ($curr_file) {
    close(NEW_TOC);
    rename("_$curr_file", $curr_file);
}

# Create full and brief contents page footers.
print TOCL <<EOF;
<HR>
<H2><A HREF="master_${os}_index.html">Master Index</A></H2>
<hr size=4>
<a href="$http_prefix/staden_home.html"><img src="i/nav_home.gif" alt="home"></a>
<a href="$http_prefix/documentation.html"><img src="i/nav_up.gif" alt="up"></a>
<a href="master_${os}_brief.html"><img src="i/nav_brief.gif" alt="brief"></a>
<HR>
This document was generated using the <CITE>merge_indexes.pl</CITE> program.
<p>
<i>This page is maintained by
<a href="mailto:staden-package\@mrc-lmb.cam.ac.uk">staden-package</a>.
Last generated on $TODAY.
</i>
<font size="-1"><br>
URL: $http_prefix2/master_${os}_contents.html
</BODY>
</HTML>
EOF
close(TOCL);

print TOCS <<EOF;
<H2><A HREF="master_${os}_index.html">Master Index</A></H2>
<hr size=4>
<a href="$http_prefix/staden_home.html"><img src="i/nav_home.gif" alt="home"></a>
<a href="$http_prefix/documentation.html"><img src="i/nav_up.gif" alt="up"></a>
<a href="master_${os}_contents.html"><img src="i/nav_full.gif" alt="full"></a>
<HR>
This document was generated using the <CITE>merge_indexes.pl</CITE> program.
<p>
<i>This page is maintained by
<a href="mailto:staden-package\@mrc-lmb.cam.ac.uk">staden-package</a>.
Last generated on $TODAY.
</i>
<font size="-1"><br>
URL: $http_prefix2/master_${os}_brief.html
</BODY>
</HTML>
EOF
close(TOCS);

# Generate our master index (also with links to the master contents pages).
&print_index();


#------------------------------------------------------------------------------

sub generate_index {
    local($file,$key) = @_;
    $level = 0;
    $letter = "";

    open(FILE, "< $file") || die "Couldn't read $file";

    while (<FILE>) {
	# Look for $key as an HREF in the file. This will be the index start
	if (/^<H([1-6])><A NAME=.*>$key<\/A><\/H[1-6]>$/) {
	    $level = $1+1;
	    next;
	}
    
	# Indexes always end in </P>	    
	if ($level && /^<\/P>$/) {
	    print "\n";
	    close(FILE);
	    return;
	}
    
	# Detect new index letter sections
#	if ($level && /^<H$level>(.)</) {
	if ($level && /^<H2>(.)</) {
	    print $letter;
	    $letter = $1;
	    next;
	}
    
	if ($letter && /^<LI>/) {
            if (!$index{$letter}) {
	        $index{$letter} = "";
	    }
	    $index{$letter} .= $_;
	}
   }
    
   print "\n";
   close(FILE);
}

sub print_index {
    open(MASTER, "> master_${os}_index.html") 
	|| die "Couldn't open master_${os}_index.html";

    print MASTER <<EOH;
<HTML>
<HEAD>
<TITLE>Master Index</TITLE>
</HEAD>
<BODY bgcolor="#ffffff">
<a href="$http_prefix/staden_home.html"><img src="i/nav_home.gif" alt="home"></a>
<a href="$http_prefix/documentation.html"><img src="i/nav_up.gif" alt="up"></a>
<a href="master_${os}_brief.html"><img src="i/nav_brief.gif" alt="brief"></a>
<a href="master_${os}_contents.html"><img src="i/nav_full.gif" alt="full"></a>
<hr size=4>
<H1>Master Index</H1>
<H3>For $package_version</H3>
<P>
EOH

    foreach $letter (sort keys(%index)) {
	$uletter = $letter;
	$letter =~ tr/a-z/A-Z/;
	print MASTER "<A HREF=\"master_${os}_index.html#LET$uletter\">$letter</A>\n";
    }
    print MASTER "<P>\n";

    foreach $letter (sort keys(%index)) {
	print MASTER "<A NAME=\"LET$letter\"></A>";
	print MASTER "<H2>$letter</H2>\n<DIR>\n";
	print MASTER sort sort_sub split('\n', $index{$letter});
#	print MASTER $index{$letter};
	print MASTER "</DIR>\n";
    }

    print MASTER <<EOF;
<hr size=4>
<a href="$http_prefix/staden_home.html"><img src="i/nav_home.gif" alt="home"></a>
<a href="$http_prefix/documentation.html"><img src="i/nav_up.gif" alt="up"></a>
<a href="master_${os}_brief.html"><img src="i/nav_brief.gif" alt="brief"></a>
<a href="master_${os}_contents.html"><img src="i/nav_full.gif" alt="full"></a>
<HR>
This document was generated using the <CITE>merge_indexes.pl</CITE> program.
<p>
<i>This page is maintained by
<a href="mailto:staden-package\@mrc-lmb.cam.ac.uk">staden-package</a>.
Last generated on $TODAY.
</i>
<font size="-1"><br>
URL: $http_prefix2/master_${os}_index.html
</BODY>
</HTML>
EOF

    close(MASTER);
}

sub sort_sub {
    $_=$a; s/<LI>[^>]*>//; $A=$_;
    $_=$b; s/<LI>[^>]*>//; $B=$_;
    
    return "\L$A\E" cmp "\L$B\E";
}

# Taken from Lionel Cons' texi2html convertor
sub pretty_date {
    local(@MoY, $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst);

    @MoY = ('January', 'Febuary', 'March', 'April', 'May', 'June',
	    'July', 'August', 'September', 'October', 'November', 'December');
    ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime(time);
    $year += ($year < 70) ? 2000 : 1900;
    return("$mday $MoY[$mon] $year");
}
