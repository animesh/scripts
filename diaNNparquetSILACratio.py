# -*- coding: utf-8 -*-
"""DIA-NN parquet parser and SILAC ratio calculator

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p1QTt57smloEYBbycP0CP8oAsqLjOiPB
"""

import requests
url = "https://server-server-drive.promec.sigma2.no/Data/report.parquet?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=promecshare%2F20250821%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20250821T110621Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&X-Amz-Signature=a074a77823d970dbf635193a6adfb692e23b8edb89f22a4b38b01d4114ce9cb2"
output_filename = "reports.parquet"
response = requests.get(url, stream=True)
response.raise_for_status()  # Raise an exception for bad status codes
with open(output_filename, 'wb') as f:
    for chunk in response.iter_content(chunk_size=8192):
        f.write(chunk)
print(f"Downloaded {output_filename}")

import pandas as pd
import pyarrow as pa
import pyarrow.parquet as pq
import numpy as np

mz_parquet = pq.read_table('reports.parquet')
mz_parquet = mz_parquet.to_pandas()
mz_parquet.to_csv('reports.csv')
print(mz_parquet)

peptides_prots_proteotypic = mz_parquet[mz_parquet['Proteotypic'] == 1]
print(peptides_prots_proteotypic)

peptides_prots_proteotypic_log2int = peptides_prots_proteotypic.copy()
peptides_prots_proteotypic_log2int['Precursor.Normalised.log2'] = np.log2(peptides_prots_proteotypic_log2int['Precursor.Normalised'])
print(peptides_prots_proteotypic_log2int)

pivoted_peptides = peptides_prots_proteotypic_log2int.pivot_table(index=['Precursor.Id', 'Genes'], columns='Channel', values='Precursor.Normalised.log2')
print(pivoted_peptides)

peptides_in_both_channels = pivoted_peptides.dropna(subset=['H', 'L'])
print(peptides_in_both_channels)

pivoted_peptides['Difference'] = pivoted_peptides['H'].fillna(0) - pivoted_peptides['L'].fillna(0)
pivoted_peptides = pivoted_peptides.reset_index()
print(pivoted_peptides)

combined_peptides = pivoted_peptides.groupby('Genes').agg({
    'Precursor.Id': lambda x: ', '.join(x),
    'Difference': 'median'
}).reset_index()
print(combined_peptides)

pivoted_peptides['Difference'] = pivoted_peptides['H'].fillna(0) - pivoted_peptides['L'].fillna(0)
pivoted_peptides = pivoted_peptides.reset_index()
print(pivoted_peptides)

peptides_in_both_channels = pivoted_peptides.dropna(subset=['H', 'L'])
print(peptides_in_both_channels)

aggregation_functions = {col: (lambda x: ';'.join(map(str, x))) for col in pivoted_peptides.columns if col != 'Difference' and col != 'Genes'}
aggregation_functions['Difference'] = 'median'
combined_peptides = pivoted_peptides.groupby('Genes').agg(aggregation_functions).reset_index()
print(combined_peptides)

combined_peptides.to_csv('reports_silac.csv')
combined_peptides['Difference'].hist().get_figure().savefig('reports_silac_histogram.png')