if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(bioc_deps)
install.packages(cran_deps)
install.packages(cran_deps)
install.packages("dplyr")
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager") BiocManager::install(bioc_deps) install.packages(cran_deps)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(bioc_deps)
install.packages(cran_deps)
install.packages(cran_deps)
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("processx")
library(devtools)
install.packages("dplyr")
library(devtools)
install.packages("fs")
library(devtools)
install_github("symbioticMe/proBatch", build_vignettes = TRUE)
BiocManager::install("proBatch")
BiocManager::install("proBatch")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(bioc_deps)
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("devtools")
library(devtools)
install_github("symbioticMe/proBatch", build_vignettes = TRUE)
inpD <-"F:\\promec\\Animesh\\HUNT\\txt106dpMBR\\"
data <- read.delim(paste0(inpD,"proteinGroups.txt"),row.names=1,sep="\t",header = T)
summary(data)
decoyPrefix="REV"
contaminantPrefix="CON"
dataC="LFQ.intensity."
dataNorm=log2(data[,grep(dataC, names(data))])
#set.seed(1)
#dataNorm[dataNorm==0]<-NaN#rnorm(1,mean=mean(dataNorm),sd=sd(dataNorm))
dataNorm[dataNorm==-Inf]=NA
summary(dataNorm)
write.table(dataNorm,file=paste0(inpD,"log2data.txt"), sep = "\t")
factors=as.factor(sapply(strsplit(names(data)[grep(dataC, names(data))],"[0-9]+"),'[[', 2))
factors=as.integer(factors)
install.packages('mice')
#install.packages('mice')
library(mice)
install.packages('randomForest')
dataNormImp=mice(dataNorm, method="rf")
dataNormImpCom <- complete(dataNormImp,1)
row.names(dataNormImpCom)<-row.names(dataNorm)
summary(dataNormImpCom)
#write.csv(dataNormImpCom,file=paste0(inpD,"dataNormImpCom.csv"))
#write.csv(factors,file=paste0(inpD,"dataNormImpComFactor.csv"))
dataNormImpCom <- read.csv(paste0(inpD,"log2dataImp.csv"),row.names=1,header = T)
write.csv(dataNormImpCom,file=paste0(inpD,"log2dataImp.csv"))
#write.csv(dataNormImpCom,file=paste0(inpD,"log2dataImp.csv"))
#write.csv(factors,file=paste0(inpD,"dataNormImpComFactor.csv"))
dataNormImpCom <- read.csv(paste0(inpD,"log2dataImp.csv"),row.names=1,header = T)
dataNormImpCom
plot(princomp(dataNormImpCom))
biplot(prcomp(dataNormImpCom,scale = F))
biplot(princomp(dataNormImpCom))
biplot(princomp(dataNormImpCom,scale = T))
help(proBatch)
library(proBatch)
help(proBatch)
factors=as.factor(sapply(strsplit(names(data)[grep(dataC, names(data))],"[0-9]+"),'[[', 2))
factors=as.integer(factors)
factors
factors
biplot(princomp(t(dataNormImpCom),scale = T))
t(dataNormImpCom)
biplot(princomp(as.matrix(t(dataNormImpCom)),scale = T))
#install.packages('devtools')
#devtools::install_github("syspremed/exploBATCH",verbose=TRUE)
install.packages("DEqMS")
#install.packages('devtools')
#devtools::install_github("syspremed/exploBATCH",verbose=TRUE)
BiocManager::install("DEqMS")
#install.packages('devtools')
#devtools::install_github("syspremed/exploBATCH",verbose=TRUE)
BiocManager::install("DEqMS")
library(DEqMS)
boxplot(dataNormImpCom)
factors
design = model.matrix(~0+as.factor(factors))
design
colnames(design)
colnames(design)
colnames(design) = gsub("as.factor(factors)","",colnames(design))
colnames(design)
colnames(design)
colnames(design) = gsub("as\.factor\(factors\)","",colnames(design))
colnames(design) = gsub("as.factor\(factors\)","",colnames(design))
colnames(design) = gsub("as.factor(factors)","",colnames(design))
colnames(design)
colnames(design) = gsub("as\\.factor\\(factors\\)","",colnames(design))
colnames(design)
colnames(dataNormImpCom)
contrast =  makeContrasts(contrasts=colnames(dataNormImpCom),levels=design)
design
contrast =  makeContrasts(contrasts=colnames(design),levels=design)
url <- "ftp://ftp.pride.ebi.ac.uk/pride/data/archive/2016/06/PXD004163/Yan_miR_Protein_table.flatprottable.txt"
download.file(url, destfile = "./miR_Proteintable.txt",method = "auto")
df.prot = read.table("F:\\promec\\Animesh\\Yan_miR_Protein_table.flatprottable.txt",stringsAsFactors = FALSE,header = TRUE, quote = "", comment.char = "",sep = "\t")
# filter at 1% protein FDR and extract TMT quantifications
TMT_columns = seq(15,33,2)
dat = df.prot[df.prot$miR.FASP_q.value<0.01,TMT_columns]
rownames(dat) = df.prot[df.prot$miR.FASP_q.value<0.01,]$Protein.accession
# The protein dataframe is a typical protein expression matrix structure
# Samples are in columns, proteins are in rows
# use unique protein IDs for rownames
# to view the whole data frame, use the command View(dat)
dat.log = log2(dat)
#remove rows with NAs
dat.log = na.omit(dat.log)
boxplot(dat.log,las=2,main="TMT10plex data PXD004163")
dat.log
dat
df.prot
df.prot = read.table("F:\\promec\\Animesh\\Yan_miR_Protein_table.flatprottable.txt",stringsAsFactors = FALSE,header = TRUE, quote = "", comment.char = "",sep = "\t")
df.prot
#url <- "ftp://ftp.pride.ebi.ac.uk/pride/data/archive/2016/06/PXD004163/Yan_miR_Protein_table.flatprottable.txt"
#download.file(url, destfile = "./miR_Proteintable.txt",method = "auto")
df.prot = read.table("F:\\promec\\Animesh\\Yan_miR_Protein_table.flatprottable.txt",stringsAsFactors = FALSE,header = TRUE, quote = "", comment.char = "",sep = "\t")
df.prot
View(df.prot)
View(dat.log)
library(ggplot2)
fileP<-"L:/promec/Animesh/api5000/"
fileS<-list.files(path=fileP, pattern="*.txt", full.names=TRUE, recursive=FALSE)
for(i in fileS){
print(i)
data <- read.table(i,sep="\t", header=F)
print(summary(data))
plot(data,type = "l")  #print(ggplot(data)+aes(data$V1,data$V2))
ggsave(file=paste0(i,".svg"), plot=plot(data,type = "l"), width=6, height=6)
}
install.packages("svglite")
install.packages(c("quantable", "rpart.plot"))
pathD<-"F:/promec/Animesh/Lymphoma/"
inpF<-file.path(pathD,"proteinGroups.txt")
data<-read.table(inpF,header=T,sep="\t",row.names = 1)
summary(data)
y<-log2(as.matrix(data[205:239]))
summary(y)
row.names(y)<-row.names.data.frame(data)
colnames(y)=sub("Ratio.H.L.normalized.161205_","",colnames(y))
colnames(y)=sub("_[0-9]+_","",colnames(y))
summary(y)
inpL<-inpF<-file.path(pathD,"code.txt")
label<-read.table(inpL,header=T,sep="\t")
colnames(label)
summary(label)
replicate<-as.factor(label$Code2)
class<-as.factor(label$Code2)
replicate<-as.factor(label$Code)
class<-as.factor(label$Code2)
dataNorm<-t(y)
set.seed(42)
dataNormLabel<-merge(dataNorm,label,by=0, all=TRUE)
dim(dataNormLabel)
row.names(dataNorm)
row.names(label)<-label$Name
row.names(label)
row.names(dataNorm)
dataNormLabel<-merge(dataNorm,label,by=0, all=TRUE)
dim(dataNormLabel)
#install.packages("randomForest")
library("randomForest")
dataNormLabelExpr=dataNormLabel[,c(2:5209,5215)]
dataNormLabelExpr=dataNormLabel#[,c(2:5209,5215)]
summary(dataNormLabelExpr)
str(dataNormLabelExpr)
oob.values <- vector(length=10)
for(i in 1:10) {
temp.model <- randomForest(Code2 ~ ., data=dataNormLabelExpr, mtry=i, ntree=1000)
oob.values[i] <- temp.model$err.rate[nrow(temp.model$err.rate),1]
}
oob.values
sum(dataNormLabelExpr[1,])
dataNormLabelExpr.imputed <- rfImpute(Code2 ~ ., data = dataNormLabelExpr, iter=6)
label
row.names(dataNorm)
row.names(label)
dataNormLabel<-merge(dataNorm,label,by=0, all.y = TRUE)
dim(dataNormLabel)
dataNormLabelExpr=dataNormLabel#[,c(2:5209,5215)]
View(dataNormLabelExpr)
dataNormLabelExpr$Code2=as.factor(dataNormLabelExpr$Code2)
oob.values <- vector(length=10)
for(i in 1:10) {
temp.model <- randomForest(Code2 ~ ., data=dataNormLabelExpr, mtry=i, ntree=1000)
oob.values[i] <- temp.model$err.rate[nrow(temp.model$err.rate),1]
}
oob.values
str(dataNormLabelExpr)
dataNormLabelExpr$Code2
set.seed(1)
dataNormLabelExpr.imputed <- rfImpute(Code2 ~ ., data = dataNormLabelExpr, iter=6)
dataNormLabelExpr$Code<-NULL
dataNormLabelExpr$Name<-NULL
dataNormLabelExpr.imputed <- rfImpute(Code2 ~ ., data = dataNormLabelExpr, iter=6)
dataNormLabelExpr$Row.names<-NULL
dataNormLabelExpr.imputed <- rfImpute(Code2 ~ ., data = dataNormLabelExpr, iter=6)
dataNormLabelExpr[is.nan(dataNormLabelExpr)]
dataNormLabelExpr[is.nan(dataNormLabelExpr$`A0A024QZX5;A0A087X1N8;P35237`)]
sapply(dataNormLabelExpr, function(x) ifelse(is.nan(x), NA, x)))
sapply(dataNormLabelExpr, function(x) ifelse(is.nan(x), NA, x))
dataNormLabelExprNa<-sapply(dataNormLabelExpr, function(x) ifelse(is.nan(x), NA, x))
dataNormLabelExpr.imputed <- rfImpute(Code2 ~ ., data = dataNormLabelExpr, iter=6)
dataNormLabelExpr.imputed <- rfImpute(Code2 ~ ., data = dataNormLabelExprNa, iter=6)
View(dataNormLabelExprNa)
summary(dataNormLabelExprNa)
summary(t(dataNormLabelExprNa))
dataNormLabelExpr.imputed <- rfImpute(Code2 ~ ., data = dataNormLabelExprNa, iter=6)
dataNormLabelExprNa$Code2
dataNormLabelExpr$Code2
dataNormLabelExpr.imputed <- rfImpute(dataNormLabelExpr$Code2 ~ ., data = dataNormLabelExprNa, iter=6)
dataNormLabelExpr$Code2
dataNormLabelExpr.imputed <- rfImpute(Code2 ~ ., data = dataNormLabelExprNa, iter=6)
dataNormLabelExprNa$Code2
dataNormLabelExpr.imputed <- rfImpute(as.factor(dataNormLabelExprNa[,5209)]) ~ ., data = dataNormLabelExprNa, iter=6)
as.factor(dataNormLabelExprNa[,5209)])
as.factor(dataNormLabelExprNa[,5209])
dataNormLabelExpr.imputed <- rfImpute(as.factor(dataNormLabelExprNa[,5209]) ~ ., data = dataNormLabelExprNa, iter=6)
summary(t(dataNormLabelExprNa))
inpF<-file.path(pathD,"marker45.txt")
label<-read.table(inpL,header=T,sep="\t")
marker<-read.table(inpL,header=T,sep="\t")
colnames(marker)
summary(marker)
inpF<-file.path(pathD,"marker45.txt")
marker<-read.table(inpL,header=T,sep="\t")
colnames(marker)
summary(marker)
marker<-read.table(inpL,header=T,sep="\t")
marker
inpF<-file.path(pathD,"marker45.txt")
marker<-read.table(inpL,header=T,sep="\t")
inpF
marker<-read.table(inpL,header=T,sep="\t")
colnames(marker)
summary(marker)
inpF<-file.path(pathD,"marker45.txt")
marker<-read.table(inpL,header=T,sep="\t")
colnames(marker)
summary(marker)
inpF<-file.path(pathD,"marker45.txt")
marker<-read.table(inpL,header=T,sep="\t")
marker<-read.table(paste0(inpL,"/marker45.txt"),header=T,sep="\t")
marker<-read.table(paste0(pathD,"/marker45.txt"),header=T,sep="\t")
colnames(marker)
summary(marker)
dataNormLabelExprNaM<-dataNormLabelExprNa[,marker]
fileP<-"L:/promec/Animesh/HeLa/ayu/new/"
data<-read.table(paste0(fileP,"krakencountcomb.txt"),sep = "\t",header = T,row.names = 1)
row.names(data)<-paste(data[,1],row.names(data))
data<-data[,-1]
summary(data)
hist(as.matrix((data)))
typeof(data)
y=as.matrix(log2(data*100+1))
apply(y,1,function(x) !all(x==0))
data[apply(data,1,function(x) !all(x==0))==T,]
y<-y[apply(y, 1, function(x) !all(x==0)),]
y<-y[,apply(y, 2, function(x) !all(x==0))]
summary(y)
hist(as.matrix(y[-1]))
plot(y)
library(pheatmap)
y[is.infinite(y)]<-0
pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)
library(quantable)
y=robustscale(log2(data*100))
y=robustscale((y))
data[,-(which(colSums(data) == 0))]
data[-(which(colSums(data) == 0)),]
summary(y$data)
y$data[is.na(y$data)]<-0
names(y$data)=sub("X","",names(y$data))
hist(as.matrix((y$data)))
pheatmap(y$data,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)
grepl("phag",row.names( data ) )
phageD<-data[grepl( "phage" , row.names( data ) ),  ]
phageDn0<-phageD[,-(which(colSums(phageD) == 0))]
#phageDn0<-phageDn0[-(which(rowSums(phageDn0) == 0)),]
write.table(phageDn0,paste0(fileP,"phageDn0.txt"),sep="\t",quote=FALSE,col.names=TRUE,row.names=TRUE)
pheatmap(phageDn0,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)
colnames(phageDn0)=sub("X.","",colnames(phageDn0))
colnames(phageDn0)=sub(".QUALITY_PASSED..0","",colnames(phageDn0))
label<-read.table("L:/promec/Animesh/HeLa/ayu/new/class.txt",header=T,row.names=1,sep="\t")
colnames(label)
summary(label)
library(ggplot2)
ggsave(file=paste0(fileP,"phageD.svg"), plot=pheatmap(phageDn0,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,annotation_col = label), width=6, height=6)
dev.off()
svgPHC<-pheatmap(phageDn0,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,annotation_col = label)
ggsave(file=paste0(fileP,"phageD.svg"), plot=svgPHC, width=6, height=6)
dataNormLabelExprNaM<-dataNormLabelExprNa[,grepl( marker , colnames( dataNormLabelExprNa ))]
View(dataNormLabelExprNaM)
summary(t(dataNormLabelExprNaM))
grepl( marker , colnames( dataNormLabelExprNa ))
row.names( dataNormLabelExprNa ))
row.names(dataNormLabelExprNa ))
row.names(dataNormLabelExprNa )
row.names(dataNormLabelExpr )
colnames(dataNormLabelExpr )
dataNormLabelExprNaM<-dataNormLabelExpr[,grepl( marker , colnames(dataNormLabelExpr ))]
summary(t(dataNormLabelExprNaM))
summary((dataNormLabelExprNaM))
View(marker)
View(dataNormLabelExprNaM)
marker
dataNormLabelExprNaM<-dataNormLabelExpr[,grepl( marker$Uniprot , colnames(dataNormLabelExpr ))]
summary((dataNormLabelExprNaM))
((dataNormLabelExprNaM))
dataNormLabelExprNaM<-dataNormLabelExpr[marker$Uniprot]
summary(dataNormLabelExprNaM)
View(dataNormLabelExprNaM)
marker36data<-read.table(paste0(pathD,"/marker36data.txt"),header=T,sep="\t")
colnames(marker)
summary(marker)
summary(marker36data)
colnames(marker36data)
View(marker36data)
marker36data$Code<-NULL
marker36data$Name<-NULL
marker36data
marker36data$T..Name<-NULL
marker36data$C..Code2
marker36data$C..Code2<-as.factor(marker36data$C..Code2)
marker36data.imputed <- rfImpute(as.factor(dataNormLabelExprNa[,5209]) ~ ., data = dataNormLabelExprNa, iter=6)
summary(marker36data)
marker36data$C..Code<-NULL
marker36data$T..Name<-NULL
marker36data$C..Code2<-as.factor(marker36data$C..Code2)
summary(marker36data)
marker36data.imputed <- rfImpute(C..Code2 ~ ., data = marker36data)#, iter=6)
marker36data.imputed <- rfImpute(C..Code2 ~ ., data = marker36data, iter=100)
marker36data.imputed
summary(marker36data)
summary(marker36data.imputed)
set.seed(1)
model <- randomForest(C..Code2 ~ ., data=marker36data.imputed,  proximity=TRUE)
set.seed(1)
model
model <- randomForest(C..Code2 ~ ., data=marker36data.imputed,  proximity=TRUE,ntree=1000)
set.seed(1)
model <- randomForest(C..Code2 ~ ., data=marker36data.imputed,  proximity=TRUE,ntree=1000)
#install_github('araastat/reprtree')
library(reprtree)
install_github('araastat/reprtree')
library(devtools)
install_github('araastat/reprtree')
#install_github('araastat/reprtree')
library(reprtree)
library(randomForest)
set.seed(42)
yyt=as.data.frame(marker36data.imputed)
View(yyt)
random_forest=randomForest(data=yyt,C..Code2~.,impurity='gini',ntree=250,replace=TRUE)
print(random_forest)
legend("top",cex=0.8,legend=colnames(random_forest$err.rate),lty=c(1,2,3),col=c(1,2,3),horiz=T)
plot(random_forest)
legend("top",cex=0.8,legend=colnames(random_forest$err.rate),lty=c(1,2,3),col=c(1,2,3),horiz=T)
random_forest=randomForest(data=yyt,C..Code2~.,impurity='gini',ntree=1000,replace=TRUE)
print(random_forest)
plot(random_forest)
legend("top",cex=0.8,legend=colnames(random_forest$err.rate),lty=c(1,2,3),col=c(1,2,3),horiz=T)
predictions=predict(random_forest,newdata=yyt.training,type="class")
predictions=predict(random_forest,newdata=yyt,type="class")
predictions
actuals=yyt$C..Code2
table(actuals,predictions)
accuracy=sum(diag(confusion.matrix))/sum(confusion.matrix)
print(accuracy)
accuracy=sum(diag(confusion.matrix))/sum(confusion.matrix)
sort(importance(random_forest))
varImpPlot(random_forest)
yyt
gsub("@.*","",names(yyt))
gsub(";.*","",names(yyt))
gsub("\\..*","",names(yyt))
names(yyt)=gsub("\\..*","",names(yyt))
random_forest=randomForest(data=yyt,C~.,impurity='gini',ntree=1000,replace=TRUE)
set.seed(42)
random_forest=randomForest(data=yyt,C~.,impurity='gini',ntree=1000,replace=TRUE)
print(random_forest)
plot(random_forest)
legend("top",cex=0.8,legend=colnames(random_forest$err.rate),lty=c(1,2,3),col=c(1,2,3),horiz=T)
predictions=predict(random_forest,newdata=yyt,type="class")
actuals=yyt$C
table(actuals,predictions)
sort(importance(random_forest))
varImpPlot(random_forest)
?varImpPlot
varImpPlot(random_forest,cex=.05)
varImpPlot(random_forest,cex=.5)
varImpPlot(random_forest,cex=.6)
sort(importance(random_forest))
impVal=sort(importance(random_forest))
impVal
impVal=(importance(random_forest))
impVal
varImpPlot(random_forest,cex=.5)
write.csv(impVal,paste0(pathD,"/marker36dataImp.txt"),header=F,sep="\t")
write.csv(impVal,paste0(pathD,"/marker36dataImp.txt"),header=F)
write.csv(impVal,paste0(pathD,"/marker36dataImp.txt"))
inpF<-"F:/promec/Animesh/MK/proteinGroups.txt"
data<-read.table(inpF,header=T,sep="\t",row.names = 1)
summary(data)
inpL<-"L:/promec/Animesh/MK/Class.txt"
label<-read.table(inpL,header=T,row.names=1,sep="\t", colClasses=c(rep("factor",3)))
#colnames(label)=sub("\\-[0-9]+","",colnames(label))
#colnames(label)
summary(label)
inpL<-"F:/promec/Animesh/MK/Class.txt"
label<-read.table(inpL,header=T,row.names=1,sep="\t", colClasses=c(rep("factor",3)))
#colnames(label)=sub("\\-[0-9]+","",colnames(label))
#colnames(label)
summary(label)
yyt=as.matrix(data[,201:230])
yyt[is.na(yyt)]<-0
yyt<-log2(yyt)
yyt[is.infinite(yyt)]<-0
#yyt<-yyt[,-(which(colSums(yyt) == 0))]
yyt<-yyt[-(which(rowSums(yyt) == 0)),]
summary(yyt)
colnames(yyt)<-sub("LFQ.intensity.","",colnames(yyt))
colnames(yyt)
yyt<-yyt[,rownames(label)]
colnames(yyt)
#yyt[,9]=as.factor(yyt[,9])
#install.packages('pheatmap')
library(pheatmap)
#?pheatmap
y<-as.matrix(yyt)
summary(y)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,annotation_col = label,show_rownames=F)
#ggsave(file=paste0(inpF,"corrcoefED.svg"), plot=svgPHC, width=6, height=6)
pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,annotation_col = label,show_rownames=F)
#install.packages('quantable')
library(quantable)
y=robustscale(y)
y$data[is.na(y$data)]<-0
#names(y$data)=sub("X","",names(y$data))
pheatmap(y$data,scale="row",clustering_distance_rows = "manhattan",clustering_distance_cols = "manhattan",fontsize_row=6,annotation_col = label,show_rownames=F)
#install.packages('quantable')
library(quantable)
y=robustscale(y)
y$data[is.na(y$data)]<-0
#names(y$data)=sub("X","",names(y$data))
pheatmap(y$data,scale="row",clustering_distance_rows = "manhattan",clustering_distance_cols = "manhattan",fontsize_row=6,annotation_col = label,show_rownames=F)
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
#BiocManager::install("ROTS")
dataNormImpCom<-yyt
#dataNormImpCom[dataNormImpCom==0]=5
summary(dataNormImpCom)
library(ROTS)
input = dataNormImpCom
#colnames(dataNormImpCom)<-sub("X","",colnames(dataNormImpCom))
colnames(dataNormImpCom)
groups = label#$Code
groups
results = ROTS(data = dataNormImpCom, groups = as.numeric(groups$Location) , B = 250 , K = 1000 , seed = 42)
names(results)
fdrThr<-0.01
uniP<-summary(results, fdr = fdrThr)
#?plot
#plot(results, fdr = fdrThr, type = "volcano")
plot(results, fdr = fdrThr, type = "heatmap")
#install.packages('pheatmap')
library(pheatmap)
#?pheatmap
y<-as.matrix(yyt)
summary(y)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,annotation_col = label,show_rownames=F)
#ggsave(file=paste0(inpF,"corrcoefED.svg"), plot=svgPHC, width=6, height=6)
autoplot(yyt.pca,data=t(yyt),colour=as.numeric(label$Location))
library(ggfortify)
#log.yyt=log(yyt[,1:8]+1)
#yyt.pca=prcomp(log.yyt,center=TRUE,scale.=TRUE)
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
autoplot(yyt.pca,data=t(yyt),colour=as.numeric(label$Location))
autoplot(yyt.pca,data=t(yyt),colour=as.numeric(label$Treatment))
#biplot(yyt.pca)
#install.packages('quantable')
library(quantable)
y=robustscale(y)
y$data[is.na(y$data)]<-0
#names(y$data)=sub("X","",names(y$data))
pheatmap(y$data,scale="row",clustering_distance_rows = "manhattan",clustering_distance_cols = "manhattan",fontsize_row=6,annotation_col = label,show_rownames=F)
#names(y$data)=sub("X","",names(y$data))
pheatmap(y$data,scale="row",clustering_distance_rows = "manhattan",clustering_distance_cols = "manhattan",fontsize_row=6,annotation_col = label,show_rownames=F)
install_github('coltocaro/compMS')
library(devtools)
install_github('coltocaro/compMS')
library(devtools)
install_github('coltocaro/compMS')
library(devtools)
install_github('coltocaro/compMS')
library(devtools)
install.packages('rlang')
install_github('coltocaro/compMS')
library(devtools)
install_github('coltocaro/compMS')
