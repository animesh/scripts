dataNorm = data[, grep(colName, names(data))]
#dataNorm = log2(dataNorm+1)
dataNorm = log2(dataNorm)
names(dataNorm) = gsub(pattern = colName, replacement = "", x = names(dataNorm))
summary(dataNorm)
#source("https://bioconductor.org/biocLite.R")
#biocLite("limma")
library("limma")
#boxplot(dataNorm[dataNorm!=0,])
dataNorm[dataNorm == -Inf] <- NaN
boxplot(dataNorm)
plotDensities(dataNorm)
colSums(dataNorm, na.rm = TRUE)
plotMDS(dataNorm)
norm_dN <- mean(colSums(dataNorm,na.rm = TRUE)) / colSums(dataNorm,na.rm = TRUE)
dataN_sl <- sweep(dataNorm, 2, norm_dN, FUN = "*")
plotDensities(dataN_sl)
boxplot(dataN_sl)
#source("https://bioconductor.org/biocLite.R")
#biocLite("edgeR")
library("edgeR")
summary(is.na(dataNorm))
dataN_s2 <- dataNorm
dataN_s2[is.na(dataN_s2)] <- 0
dataN_s2 <- sweep(dataN_s2, 2, calcNormFactors(dataN_s2), FUN = "/")
summary(is.na(dataN_s2))
boxplot(dataN_s2)
#factorC=c(rep(c("Baf","Ctr"),each=4))
factorC <- c(rep(c("Baf","Ctr"),4))
#?TukeyHSD(aov((as.numeric(dataID[160,])~factorC)),"factorC", ordered = TRUE)
#tc=apply(dataID,1,function(x){
#tc=apply(dataNorm, 1, function(x)   tryCatch(TukeyHSD(aov(x~factorC,"factorC", ordered = TRUE)),error=function(x){return(rep(1,20))})}) tryCatch(TukeyHSD(aov(x~factorC,"factorC")),error=function(x){return(rep(1,20))})})
tc = t.test(dataNorm[3,])$p.value
outF = paste0(inpF,"test.csv")
class(tc)
names(tc)
write.csv(tc, file = outF)
#https://rmarkdown.rstudio.com/authoring_shiny.html
#install.packages('shiny')
library(shiny)
dN_shiny <- dataNorm
dN_shiny[is.na(dN_shiny)] <- 0
summary(is.na(dN_shiny))
#ctrl-shift-K
#rmarkdown::run
#shiny::renderUI
inputPanel(
sliderInput("bins", "#bins:", min = 1, max = 100, value = 30),
textInput("dens", "Density:", "auto",value = 0.6),
selectInput("expression", label = "Sample:",choices = names(dN_shiny), selected = names(dN_shiny)[1]))
renderText({paste("Inputs:", input$bins,input$dens,input$expression)})
renderPlot({
hist(dN_shiny[,as.numeric(which(names(dN_shiny) == input$expression))],breaks = as.numeric(input$bins),probability = TRUE,col="orange")
lines(density(dN_shiny[,as.numeric(which(names(dN_shiny) == input$expression))], adjust = as.numeric(input$dens)),col="blue")
})
colSums(dataN_s2)
plotMDS(dataN_s2)
pairs(dataN_s2)
pairwise.t.test(dataNorm,factorC)
pairwise.t.test(dataN_s2,factorC)
pairwise.t.test(dataNorm[3,],factorC)
?pairwise.t.test
dataNorm[3,]
factorC
pairwise.t.test(dataNorm[3,],factorC)
dataNorm[3,],factorC
pairwise.t.test(dataNorm[3,],factor(factorC))
factor(factorC)
pairwise.t.test(dataNorm[3,],(factorC))
factor
pairwise.t.test(dataNorm[3,],factor(factorC))
pairwise.t.test(dataNorm[3,],factor(factorC))
pairwise.t.test(dataNorm[3,],(factorC))
dDGE <- DGEList(counts = dataN_s2, group = factorC)
dDGE <- calcNormFactors(dDGE)
dDGE <- calcNormFactors(dDGE)
factorC <- c(rep(c("Baf","Ctr"),4))
dDGE <- DGEList(counts = dataN_s2, group = factorC)
dDGE <- calcNormFactors(dDGE)
dDGE <- estimateDisp(dDGE)
dDGE$samples
plotBCV(dDGE)
factorC <- c(rep(c("Baf","Ctr"),4))
dDGE <- DGEList(counts = dataN_s1, group = factorC)
dDGE <- DGEList(counts = dataNorm, group = factorC)
dDGE <- DGEList(counts = dataN_s2, group = factorC)
dDGE <- calcNormFactors(dDGE)
dDGE <- estimateDisp(dDGE)
dDGE$samples
dTest <- exactTest(dataN_s2, pair = c("Baf","Ctr"))
dTest <- exactTest(dDGE, pair = c("Baf","Ctr"))
summary(decideTestsDGE(dTest)) # this counts up, down, and unchanged genes (here it is proteins)
dTest <- exactTest(dDGE)#, pair = c("Baf","Ctr"))
summary(decideTestsDGE(dTest)) # this counts up, down, and unchanged genes (here it is proteins)
pairwise.t.test(dataNorm[3,],(factorC))
dTestFDR <- topTags(dTest, n = 10000, sort.by = "none")
summary(dTestFDR) # this counts up, down, and unchanged genes (here it is proteins)
dTest <- exactTest(dDGE)#, pair = c("Baf","Ctr"))
summary(decideTestsDGE(dTest)) # this counts up, down, and unchanged genes (here it is proteins)
plotBCV(dDGE)
names(dataNorm)
#factorC=c(rep(c("Baf","Ctr"),each=4))
factorC <- c("Baf","Ctr","Baf","Ctr","Baf","Baf","Ctr","Ctr")
names(dataNorm)
dDGE <- DGEList(counts = dataN_s2, group = factorC)
dDGE <- calcNormFactors(dDGE)
dDGE <- estimateDisp(dDGE)
dDGE$samples
names(dataNorm)
#factorC=c(rep(c("Baf","Ctr"),each=4))
factorC <- c("Baf","Ctr","Baf","Ctr","Ctr","Baf","Baf","Ctr")
t(names(dataNorm))
dDGE <- DGEList(counts = dataN_s2, group = factorC)
dDGE <- calcNormFactors(dDGE)
dDGE <- estimateDisp(dDGE)
dDGE$samples
plotBCV(dDGE)
plotBCV(dDGE)
dTest <- exactTest(dDGE)#, pair = c("Baf","Ctr"))
summary(decideTestsDGE(dTest))
dTestFDR <- topTags(dTest, n = 10000, sort.by = "none")
summary(dTestFDR)
dTestFDR <- topTags(dTest, n = 1000, sort.by = "none")
summary(dTestFDR)
dTest
summary(decideTestsDGE(dTest))
dTest$table
plot(data$e.value)
# Chunk 1: matR
install.packages('matR')
library(matR)
# Chunk 2: data
??auth
auth.MGRAST('MgRastWebKeyGoesHereKEJ88')
biom_phylum <- biomRequest(metadata("mgp80869")$mgp80869, request="organism", hit_type="all", source="RDP", group_level="phylum", evalue=15,  wait=TRUE)
phylum_matrix <- as.matrix(biom_phylum)
# Chunk 3: data
inpF<-"Z:\\USERS\\ayurveda\\mgm4804295.3.csv"
data<-read.table(inpF,comment="D",header=T,sep="\t")
plot(data$e.value)
#biomRequest(file="Z:\\USERS\\ayurveda\\mgm4804295.3.csv",group_level="level2",evalue=1,)
# Chunk 4: data
zz0 <- transform (zz, t_Log)
columns (zz0, "host_common_name|samp_store_temp|material")
princomp (zz0, map=c(col="host_common_name", pch="samp_store_temp"), labels="$$pubmed_id", cex=2)
distx (zz0, groups="$$host_common_name")
pp <- (rowstats (zz0, groups="$$material") $ p.value < 0.05)
pp[is.na(pp)] <- FALSE
pp
####  that information can be used to make an informative heatmap.
image (zz0 [pp,], margins=c(5,10), cexRow=0.3)
####  for comparison, here is the same heatmap, but including all annotations.
image (zz0, margins=c(5,10), cexRow=0.3)
# Chunk 5: data
http://api.metagenomics.anl.gov/m5nr/taxonomy?filter=Bacteroidetes&filter_level=phylum&min_level=genus
#install.packages('jsonlite')
library(jsonlite)
S5 <- fromJSON("http://api.metagenomics.anl.gov/1/annotation/sequence/mgm4804308.3?evalue=10&type=organism&source=SwissProt&auth=kbm2R6jxx9LSnLVNmtawtFBVtVNbk")
head(S5)
#S5-mgm4804308.3
#http://api.metagenomics.anl.gov/1/annotation/sequence/mgm4804308.3?evalue=10&type=organism&source=SwissProt&auth=kbm2R6jxx9LSnLVNmtawtFBVtVNbk
#s13_R2- https://api-ui.mg-rast.org/metagenome/72d6f57b296d676d343638363631342e33?verbosity=stats&detail=ontology&auth=kbm2R6jxx9LSnLVNmtawtFBVtVNbk
#http://api.mg-rast.org/api.html#metagenome
#http://api.metagenomics.anl.gov/1/annotation/sequence/mmgm4804308.3?evalue=10&type=organism&source=SwissProt&auth=kbm2R6jxx9LSnLVNmtawtFBVtVNbk
library(rjson)
S5 <- rjson::fromJSON(file="http://api.metagenomics.anl.gov/1/annotation/sequence/mgm4804308.3?evalue=10&type=organism&source=SwissProt&auth=kbm2R6jxx9LSnLVNmtawtFBVtVNbk")
head(S5)
dAyu<-read.table('http://api.metagenomics.anl.gov/1/annotation/sequence/mgm4804308.3?evalue=10&type=organism&source=SwissProt&auth=kbm2R6jxx9LSnLVNmtawtFBVtVNbk',sep='')
http://api.metagenomics.anl.gov/metadata/export/mgp17042?auth=kbm2R6jxx9LSnLVNmtawtFBVtVNbk
http://api.metagenomics.anl.gov/project/mgp17042?auth=kbm2R6jxx9LSnLVNmtawtFBVtVNbk
http://api.metagenomics.anl.gov/inbox?auth=kbm2R6jxx9LSnLVNmtawtFBVtVNbk
http://api.metagenomics.anl.gov/sample/mgm4804308.3?auth=kbm2R6jxx9LSnLVNmtawtFBVtVNbk
https://www.mg-rast.org/mgmain.html?mgpage=project&project=760ca003346d67703137303432
mgp17042
https://www.mg-rast.org/mgmain.html?mgpage=pipeline
Name    class   fwd     rev
s13     Vatta   TGGAACAA        TGGAACAA
S20-2   Pita    TGGCTTCA        TGGCTTCA
S23     Pita    TGGTGGTA        TGGTGGTA
S27     Kapha   TTCACGCA        TTCACGCA
S28     Vatta   AACTCACC        AACTCACC
S2      Kapha   TCCGTCTA        TCCGTCTA
S30     Kapha   AAGAGATC        AAGAGATC
S31     Kapha   AAGGACAC        AAGGACAC
S33     Kapha   AATCCGTC        AATCCGTC
S35     Vatta   AATGTTGC        AATGTTGC
S36     Vatta   ACACGACC        ACACGACC
S37     Pita    ACAGATTC        ACAGATTC
S3      Vatta   TCTTCACA        TCTTCACA
S40     Kapha   AGATGTAC        AGATGTAC
S44     Vatta   AGCACCTC        AGCACCTC
S46     Kapha   AGCCATGC        AGCCATGC
S47     Vatta   AGGCTAAC        AGGCTAAC
S48     Vatta   ATAGCGAC        ATAGCGAC
S5      Pita    TGAAGAGA        TGAAGAGA
system("mkdir ~/R/")
system("mkdir ~/R/libs/")
system("echo 'R_LIBS_USER=\"~/R/library\"' >  $HOME/.Renviron")
install.packages('devtools',lib.loc="/home/notebook/R/library")
install.packages('devtools')
plot(data$e.value)
plot(data$percentage.identity)
plot(log(data$percentage.identity))
plot(log(data$percentage.identity),log(data$e.value))
plot(log(data$percentage.identity),log(data$e.value),colors=log(data$number.of.mismatches))
plot(log(data$percentage.identity),log(data$e.value),col=factor(data$number.of.mismatches))
library("DALEX")
install.packages("DALEX")
installed.packages("randomForest")
library("DALEX")
library("randomForest")
install.packages("randomForest")
library("randomForest")
model <- randomForest(status ~ . , data = HR)
inpF<-"Z:\\USERS\\ayurveda\\GenusCountZscaledMedianTrp.txt"
data<-read.table(inpF,comment="D",header=T,sep="\t")
inpF<-"Z:\\USERS\\ayurveda\\GenusCountZscaledMedianTrp.txt"
data<-read.table(inpF,header=T,sep="\t")
model <- randomForest(C..class ~ . , data = data)
model <- randomForest(data$C..class ~ . , data = data)
is.na(data)
data(is.na(data))
data[is.na(data)]
data[is.na(data)]=0
model <- randomForest(data$C..class ~ . , data = data)
data$C..class
explainer_rf_sample<- explain(model,data = data,  y = data$C..class == "Pita",predict_function = function(m,x) predict(m,x, type = "prob")[,1])
explainer_rf_sample
library("breakDown")
bd_rf <- break_down(explainer_rf_fired,new_observation,keep_distributions = TRUE)
library("breakDown")
install.packages("breakDown")
install.packages("breakDown")
library("breakDown")
install.packages("breakDown")
install.packages("breakDown")
explainer_rf_sample<- explain(model,data = data,  y = data$C..class == "Pita",predict_function = function(m,x) predict(m,x, type = "prob")[,1])
new_observation <- data[1,]
bd_rf <- break_down(explainer_rf_fired,new_observation,keep_distributions = TRUE)
new_observation
test <- data[1,]
bd_rf <- break_down(explainer_rf_sample,test_sample,keep_distributions = TRUE)
bd_rf <- DALEX::break_down(explainer_rf_sample,test_sample,keep_distributions = TRUE)
summary(data)
summary(data[1,])
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()  # to register the kernel in the current R installation
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
Sys.setenv(USE_CXX14 = 1)
library("rstan") # observe startup messages
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(file = '8schools.stan', data = schools_dat,
iter = 1000, chains = 4)
fit <- stan(file = '8schools.stan', data = schools_dat,
iter = 1000, chains = 4)
cat('Sys.setenv(BINPREF = "C:/RBuildTools/3.5/mingw_64/bin")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
fit <- stan(file = '8schools.stan', data = schools_dat,
iter = 1000, chains = 4)
library(eulerr)
plot(euler(s4, shape = "ellipse"), quantities = TRUE)
s4 <- list(a = c(1, 2, 3),
b = c(1, 2),
c = c(1, 4),
e = c(5))
plot(venn(s4))
plot(venn(s4))
library(eulerr)
s4 <- list(a = c(1, 2, 3),
b = c(1, 2),
c = c(1, 4),
e = c(5))
plot(venn(s4))
plot(euler(s4, shape = "ellipse"), quantities = TRUE)
install.packages('eulerr')
library(eulerr)
s4 <- list(a = c(1, 2, 3),
b = c(1, 2),
c = c(1, 4),
e = c(5))
plot(venn(s4))
plot(euler(s4, shape = "ellipse"), quantities = TRUE)
plot(euler(s4, shape = "ellipse"), quantities = TRUE)
plot(euler(s4, shape = "ellipse"), quantities = TRUE)
plot(euler(s4, shape = "ellipse"), quantities = TRUE)
dev.off()
plot(euler(s4, shape = "ellipse"), quantities = TRUE)
pathD<-"F:/promec/USERS/MarianneNymark/181009/PDv2p3/181009_newprep_Charlotte_Alb3b-14_II"
inpF<-file.path(pathD,"181009_newprep_Charlotte_Alb3b-14_II-(1)_Proteins.txt")
data<-read.table(inpF,header=T,sep="\t",row.names = 3)
#summary(data)
inpL<-"F:/promec/USERS/MarianneNymark/181009/PDv2p3/181009_newprep_Charlotte_Alb3b-14_II/Groups.txt"
label<-read.table(inpL,header=T,sep="\t")
#colnames(label)
#summary(label)
y<-log2(as.matrix(data[32:46]))
#summary(y)
#hist(y)
row.names(y)<-row.names.data.frame(data)
y[is.na(y)]<-0
colnames(y)=sub("Abundances.Normalized.F","",colnames(y))
colnames(y)=sub(".Sample","",colnames(y))
#summary(y)
replicate<-as.factor(label$Replicate)
class<-as.factor(label$Group)
dataNorm<-y
set.seed(1)
dataNorm[dataNorm==0]<-rnorm(1,mean=mean(y),sd=sd(y))
#summary(dataNorm)
#TukeyHSD(aov(dataNorm["B7G7S4",]~class),"class", ordered = TRUE)[["class"]][10:12]
#chkANOVA<-apply(dataNorm,1,function(x){TukeyHSD(aov(x~class),"class")})
#chkANOVAnames<-t(sapply(row.names(dataNorm),function(x){chkANOVA[[x]]$`class`[10:12]}))
#chkANOVAnames<-apply(chkANOVAnames,2,function(x){p.adjust(x,"BH")})
#colnames(chkANOVAnames)<-c("Alb3b-16-Alb3b-14","Alb3b-14-WT", "Alb3b-16-WT")
#Uniprot<-sapply(strsplit(row.names(chkANOVAnames),";"), `[`, 1)
#write.csv(cbind(chkANOVAnames,Uniprot),file.path(pathD,"chkANOVAnames.csv"))
plot(euler(dataNorm[,1:3], shape = "ellipse"), quantities = TRUE)
plot(euler(floor(dataNorm[,1:3]), shape = "ellipse"), quantities = TRUE)
plot(euler(dataNorm[dataNorm[,1:3]>20], shape = "ellipse"), quantities = TRUE)
dataNorm[dataNorm[,1:3]>20]
plot(euler(dataNorm[,1:3]>20, shape = "ellipse"), quantities = TRUE)
plot(euler(dataNorm[,1:3]>30, shape = "ellipse"), quantities = TRUE)
plot(euler(dataNorm[,1:3]>25, shape = "ellipse"), quantities = TRUE)
plot(euler(dataNorm[,1:3]>22, shape = "ellipse"), quantities = TRUE)
plot(euler(dataNorm[,1:3]>22), quantities = TRUE)
pathD<-"F:\promec\Animesh\Camilla\Wilcoxon_forAnimesh.xlsx WSRTun.xls"
pathD
pathD<-"F:\promec\Animesh\Camilla"
pathD<-"F:/promec/Animesh/Camilla"
inpF<-file.path(pathD,"Wilcoxon_forAnimesh.xlsx WSRTun.xls")
data<-read.table(inpF,header=T,sep="\t",row.names = 3)
install.packages('xlsx')
data <- read.xlsx2(inpF, 1)
install.packages('xlsx')
library('xlsx')
install.packages('openxlsx')
library('openxlsx')
data <- read.xlsx(inpF, 1)
data <- read.xls(inpF, 1)
install.packages('xlsReadWrite')
library('gdata')
library('readxl')
install.packages('readxl')
library('readxl')
data <- read_excel(inpF)
data
dataNorma <- data[,2:4]
plot(euler(dataNorm<0.25), quantities = TRUE)
dataNorma <- data[,2:4]
#install.packages('eulerr')
library(eulerr)
plot(euler(dataNorm<0.25), quantities = TRUE)
#install.packages('eulerr')
library(eulerr)
plot(euler(dataNorm<0.25), quantities = TRUE)
#install.packages('eulerr')
library(eulerr)
plot(euler(dataNorm<0.25), quantities = TRUE)
dataNorm<0.25
data <- read_excel(inpF)
dataNorma <- data[,2:4]
dataNorm <- data[,2:4]
plot(euler(dataNorm<0.25), quantities = TRUE)
#install.packages('eulerr')
library(eulerr)
plot(euler(dataNorm<0.25), quantities = TRUE)
```{r euler}
plot(euler(dataNorm<0.25), quantities = TRUE)
plot(euler(dataNorm<0.25), quantities = TRUE)
plto(1)
plot(1)
plot(euler(dataNorm<0.25), quantities = TRUE)
plot(euler(dataNorm<0.5), quantities = TRUE)
View(dataNorm)
View(data)
dataNorm <- data[,3:5]
plot(euler(dataNorm<0.5), quantities = TRUE)
plot(euler(dataNorm<.75), quantities = TRUE)
plot(dN_shiny$`input$expression`)
dataNorm$`NB4 Biol Rep 22 WSRT`
hist(dataNorm$`NB4 Biol Rep 22 WSRT`)
summary(dataNorm$`NB4 Biol Rep 22 WSRT`)
euler(dataNorm<.5), quantities = TRUE)
euler(dataNorm<.5)
che=euler(dataNorm<.5)
che$original.values
euler(dataNorm<.5)$original.values
euler(dataNorm<.5)$original.values[1]
che$ellipses
che$original.values
che$original.values["NB4 Biol Rep 22 WSRT"]
Uniprot<-sapply(strsplit(row.names(data$`T: Majority protein IDs`),";"), `[`, 1)
Uniprot<-sapply(strsplit(data$`T: Majority protein IDs`,";"), `[`, 1)
Uniprot
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade") ## you may need this
data$`NB4 Biol Rep 22 WSRT`<0.5
## biocLite("BiocUpgrade") ## you may need this
biocLite("clusterProfiler")
library("clusterProfiler")
install.packages("F:/promec/Animesh/Camilla/colorspace_1.2-5.zip")
install.packages("F:/promec/Animesh/Camilla/colorspace_1.4-0.zip")
install.packages("F:/promec/Animesh/Camilla/colorspace_1.4-0.zip")
library("clusterProfiler")
enrichGO
install.packages("F:/promec/Animesh/Camilla/colorspace_1.4-0.zip")
library("clusterProfiler")
devtools::install_github('cran/colorspace')
install.packages("F:/promec/Animesh/Camilla/colorspace_1.4-0.zip")
data[data$`NB4 Biol Rep 22 WSRT`<0.5,1]
Uniprot=data[data$`NB4 Biol Rep 22 WSRT`<0.5,1]
Uniprot<-sapply(strsplit(Uniprot,";"), `[`, 1)
Uniprot=data[data$`NB4 Biol Rep 22 WSRT`<0.5,1]
enrichGO(gene         = gene.df$ENSEMBL,
OrgDb         = org.Hs.eg.db,
keyType       = 'UNIPROT',
ont           = "CC",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05)
Uniprot<-sapply(strsplit(Uniprot,";"), `[`, 1)
Uniprot=data[data$`NB4 Biol Rep 22 WSRT`<0.5,1]
Uniprot<-sapply(strsplit(Uniprot,";"))
Uniprot
Uniprot<-sapply(strsplit(data$`T: Majority protein IDs`,";"), `[`, 1)
Uniprot
library("clusterProfiler")
install.packages("F:/promec/Animesh/Camilla/colorspace_1.4-0.zip")
library("clusterProfiler")
install.packages("colorspace")
library("clusterProfiler")
#Uniprot=data[data$`NB4 Biol Rep 22 WSRT`<0.5,1]
Uniprot<-sapply(strsplit(data$`T: Majority protein IDs`,";"), `[`, 1)
#install.packages('readxl')
library('readxl')
pathD<-"F:/promec/Animesh/Camilla"
inpF<-file.path(pathD,"Wilcoxon_forAnimesh.xlsx WSRTun.xls")
data <- read_excel(inpF)
dataNorm <- data[,3:5]
#Uniprot=data[data$`NB4 Biol Rep 22 WSRT`<0.5,1]
Uniprot<-sapply(strsplit(data$`T: Majority protein IDs`,";"), `[`, 1)
Uniprot
Uniprot
enrichGO(gene=Uniprot,OrgDb=org.Hs.eg.db,keyType= 'UNIPROT',ont= "CC",pAdjustMethod = "BH",pvalueCutoff  = 0.01,qvalueCutoff  = 0.05)
library("clusterProfiler")
install.packages("org.Hs.eg.db")
biocLite("org.Hs.eg.db")
source("https://bioconductor.org/biocLite.R")
biocLite("org.Hs.eg.db")
enrichGO(gene=Uniprot,OrgDb=org.Hs.eg.db,keyType= 'UNIPROT',ont= "CC",pAdjustMethod = "BH",pvalueCutoff  = 0.01,qvalueCutoff  = 0.05)
library("org.Hs.eg.db")
enrichGO(gene=Uniprot,OrgDb=org.Hs.eg.db,keyType= 'UNIPROT',ont= "CC",pAdjustMethod = "BH",pvalueCutoff  = 0.01,qvalueCutoff  = 0.05)
devtools::install_github("jlmelville/uwot")
install.packages("stringi")
install.packages("ggdark")
Scratch for R
========================================================
**check**
frac $\frac{1}{n}$
rm(list=ls())
Scratch for R
========================================================
**check**
frac $\frac{1}{n}$
memory . limit ()
rm(list=ls())
Scratch for R
========================================================
**check**
frac $\frac{1}{n}$
memory.limit ()
rm(list=ls())
?memory.limit
Scratch for R
========================================================
**check**
frac $\frac{1}{n}$
memory.size(TRUE)
memory.limit(TRUE)
rm(list=ls())
Scratch for R
========================================================
**check**
frac $\frac{1}{n}$
memory.size(TRUE)
memory.limit()
rm(list=ls())
Scratch for R
========================================================
**check**
frac $\frac{1}{n}$
memory.size(TRUE)
memory.limit()
rm(list=ls())
Scratch for R
========================================================
**check**
frac $\frac{1}{n}$
memory.size(TRUE)
memory.limit()
rm(list=ls())
frac $\frac{1}{n}$
memory.size(TRUE)
memory.limit()
install.packages('shiny')
install.packages("stringi")
