library('rstan')
stan(paste0(scriptD,'school8.stan'))
stan(paste0(scriptD,'school8.stan'))
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
scriptD <- 'C:\\Users\\animeshs\\Desktop\\scripts\\'
stan(paste0(scriptD,'school8.stan'))
scriptD <- 'C:\\Users\\animeshs\\Desktop\\scripts\\'
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
scriptD <- 'C:\\Users\\animeshs\\Desktop\\scripts\\'
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
scriptD <- 'C:\\Users\\animeshs\\Desktop\\scripts\\'
inpD <-'L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\'
data <- read.delim(paste0(inpD,"proteinGroups.txt"),row.names=1,sep="\t",header = T)
summary(data)
decoyPrefix="REV"
contaminantPrefix="CON"
dataC="LFQ.intensity."
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
dataNormImpCom[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
library(ROTS)
data(upsSpikeIn)
input = upsSpikeIn
groups = c(rep(0,3), rep(1,3))
groups
results = ROTS(data = input, groups = groups , B = 100 , K = 500 , seed = 1234)
names(results)
summary(results, fdr = 0.05)
plot(results, fdr = 0.2, type = "volcano")
#plot(results, fdr = 0.05, type = "heatmap")
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library(mlbench) #provides the data set
install.packages(mlbench) #provides the data set
install.packages('mlbench') #provides the data set
library(mlbench) #provides the data set
data("BreastCancer")
model_set <- sapply(BreastCancer[complete.cases(BreastCancer),-1], as.numeric)
#format target variable as 0, 1 instead of 1,2
model_set[,10]<-model_set[,10]-1
#Split into test and train sets
indices <- sample(1:nrow(model_set), size = 0.7 * nrow(model_set))
#Target variables
target<-unlist(model_set[indices,10])
test_target<-unlist(model_set[-indices,10])
#create unscaled data set for boosted tree models
unscale_train<-as.matrix(model_set[indices,-10])
unscale_test<-as.matrix(model_set[-indices,-10 ])
#create normalized data set for neural network
mean <- apply(model_set[indices,-10], 2, mean)
std <- apply(model_set[indices,-10], 2, sd)
train <- scale(model_set[indices,-10], center = mean, scale = std)
test <- scale(model_set[-indices,-10], center = mean, scale = std)
boost_model<-xgboost(data = unscale_train,label=target,booster="gbtree", nfold = 2,nrounds = 25, verbose = FALSE, objective = "binary:logistic", eval_metric = "auc", nthread = 4)
#convert to numeric for models and remove na values for this example
library(xgboost)
#convert to numeric for models and remove na values for this example
ininstall.packages(xgboost)
#convert to numeric for models and remove na values for this example
install.packages(xgboost)
#convert to numeric for models and remove na values for this example
install.packages('xgboost')
boost_model<-xgboost(data = unscale_train,label=target,booster="gbtree", nfold = 2,nrounds = 25, verbose = FALSE, objective = "binary:logistic", eval_metric = "auc", nthread = 4)
library(xgboost)
boost_model<-xgboost(data = unscale_train,label=target,booster="gbtree", nfold = 2,nrounds = 25, verbose = FALSE, objective = "binary:logistic", eval_metric = "auc", nthread = 4)
boost_model
library(keras)
y_target<-to_categorical(target,2)
tf_nn <- keras_model_sequential() %>%
layer_dense(units = 12,
activation = 'relu',
input_shape = dim(train)[[2]]) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 12,
activation = 'relu')%>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2,
activation = 'softmax')
tf_nn %>% compile(
optimizer = optimizer_rmsprop(),
loss = "categorical_crossentropy",
metrics = c("accuracy")
)
history<-tf_nn %>% fit(
x=train,
y=y_target,
epochs = 7,
batch_size = 12
)
iinstall.packages(keras)
iinstall.packages('keras')
install.packages('keras')
library(keras)
y_target<-to_categorical(target,2)
y_target
tf_nn <- keras_model_sequential() %>%
layer_dense(units = 12,
activation = 'relu',
input_shape = dim(train)[[2]]) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 12,
activation = 'relu')%>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2,
activation = 'softmax')
tf_nn %>% compile(
optimizer = optimizer_rmsprop(),
loss = "categorical_crossentropy",
metrics = c("accuracy")
)
history<-tf_nn %>% fit(
x=train,
y=y_target,
epochs = 7,
batch_size = 12
)
tf_nn <- keras_model_sequential() %>%
layer_dense(units = 12,
activation = 'relu',
input_shape = dim(train)[[2]]) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 12,
activation = 'relu')%>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2,
activation = 'softmax')
install.packages('dplyr')
install.packages("dplyr")
library(xgboost)
library(dplyr)
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages('dplyr')
library(dplyr)
library(keras)
library(mlbench) #provides the data set
data("BreastCancer")
y_target<-to_categorical(target,2)
boost_model<-xgboost(data = unscale_train,label=target,booster="gbtree", nfold = 2,nrounds = 25, verbose = FALSE, objective = "binary:logistic", eval_metric = "auc", nthread = 4)
library(xgboost)
boost_model<-xgboost(data = unscale_train,label=target,booster="gbtree", nfold = 2,nrounds = 25, verbose = FALSE, objective = "binary:logistic", eval_metric = "auc", nthread = 4)
model_set <- sapply(BreastCancer[complete.cases(BreastCancer),-1], as.numeric)
#format target variable as 0, 1 instead of 1,2
model_set[,10]<-model_set[,10]-1
#Split into test and train sets
indices <- sample(1:nrow(model_set), size = 0.7 * nrow(model_set))
#Target variables
target<-unlist(model_set[indices,10])
test_target<-unlist(model_set[-indices,10])
#create unscaled data set for boosted tree models
unscale_train<-as.matrix(model_set[indices,-10])
unscale_test<-as.matrix(model_set[-indices,-10 ])
#create normalized data set for neural network
mean <- apply(model_set[indices,-10], 2, mean)
std <- apply(model_set[indices,-10], 2, sd)
train <- scale(model_set[indices,-10], center = mean, scale = std)
test <- scale(model_set[-indices,-10], center = mean, scale = std)
boost_model<-xgboost(data = unscale_train,label=target,booster="gbtree", nfold = 2,nrounds = 25, verbose = FALSE, objective = "binary:logistic", eval_metric = "auc", nthread = 4)
y_target<-to_categorical(target,2)
tf_nn <- keras_model_sequential() %>%
layer_dense(units = 12,
activation = 'relu',
input_shape = dim(train)[[2]]) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 12,
activation = 'relu')%>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2,
activation = 'softmax')
tf_nn %>% compile(
optimizer = optimizer_rmsprop(),
loss = "categorical_crossentropy",
metrics = c("accuracy")
)
history<-tf_nn %>% fit(
x=train,
y=y_target,
epochs = 7,
batch_size = 12
)
library(keras)
tf_nn <- keras_model_sequential() %>%
layer_dense(units = 12,
activation = 'relu',
input_shape = dim(train)[[2]]) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 12,
activation = 'relu')%>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2,
activation = 'softmax')
history<-tf_nn %>% fit(
x=train,
y=y_target,
epochs = 7,
batch_size = 12
)
#write.csv(dataNormImpCom,file=paste0(inpD,"dataNormImpCom.csv"))
#write.csv(factors,file=paste0(inpD,"dataNormImpComFactor.csv"))
dataNormImpCom <- read.csv(paste0(inpD,"dataNormImpCom.csv"),row.names=1,header = T)
#factors<-read.csv(paste0(inpD,"dataNormImpComFactor.csv"))
#dump(dataNorm,file=paste0(inpD,"dataNorm.R"))
scriptD <- 'C:\\Users\\animeshs\\Desktop\\scripts\\'
inpD <-"L:\\promec\\Animesh\\HUNT\\txt106dpMBR\\"
data <- read.delim(paste0(inpD,"proteinGroups.txt"),row.names=1,sep="\t",header = T)
summary(data)
decoyPrefix="REV"
contaminantPrefix="CON"
dataC="LFQ.intensity."
#write.csv(dataNormImpCom,file=paste0(inpD,"dataNormImpCom.csv"))
#write.csv(factors,file=paste0(inpD,"dataNormImpComFactor.csv"))
dataNormImpCom <- read.csv(paste0(inpD,"dataNormImpCom.csv"),row.names=1,header = T)
#factors<-read.csv(paste0(inpD,"dataNormImpComFactor.csv"))
#dump(dataNorm,file=paste0(inpD,"dataNorm.R"))
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
dataNormImpCom<-read.delim("L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.txt",row.names=1,sep="\t",header = T)
dataNormImpCom[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
factors<-c(rep(0,5), rep(1,5))
library(ROTS)
results = ROTS(data = dataNormImpCom, groups = factors , B = 1000 , K = 500 , seed = 1234)
write.csv(summary(results, fdr = 1),file=paste0(inpD,"L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.rots.csv"), sep = "\t")
names(results)
summary(results, fdr = 1)
plot(results, fdr = 0.5, type = "volcano")
#P61203-2;P61203
#plot(results, fdr = 0.5, type = "heatmap")
library(ROTS)
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
dataNormImpCom<-read.delim("L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.txt",row.names=1,sep="\t",header = T)
dataNormImpCom[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
factors<-c(rep(0,5), rep(1,5))
library(ROTS)
results = ROTS(data = dataNormImpCom, groups = factors , B = 1000 , K = 500 , seed = 1234)
write.csv(summary(results, fdr = 1),file=paste0(inpD,"L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.rots.csv"), sep = "\t")
names(results)
summary(results, fdr = 1)
plot(results, fdr = 0.5, type = "volcano")
#P61203-2;P61203
#plot(results, fdr = 0.5, type = "heatmap")
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
dataNormImpCom<-read.delim("L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.txt",row.names=1,sep="\t",header = T)
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
dataNormImpCom<-read.delim("L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.txt",row.names=1,sep="\t",header = T)
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
dataNormImpCom<-read.delim("L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.txt",row.names=1,sep="\t",header = T)
dataNormImpCom[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
factors<-c(rep(0,5), rep(1,5))
library(ROTS)
results = ROTS(data = dataNormImpCom, groups = factors , B = 1000 , K = 500 , seed = 1234)
write.csv(summary(results, fdr = 1),file=paste0(inpD,"L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.rots.csv"), sep = "\t")
names(results)
summary(results, fdr = 1)
plot(results, fdr = 0.5, type = "volcano")
#P61203-2;P61203
#plot(results, fdr = 0.5, type = "heatmap")
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
dataNormImpCom<-read.delim("L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.txt",row.names=1,sep="\t",header = T)
dataNormImpCom[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
factors<-c(rep(0,5), rep(1,5))
library(ROTS)
results = ROTS(data = dataNormImpCom, groups = factors , B = 1000 , K = 500 , seed = 1234)
write.csv(summary(results, fdr = 1),file=paste0(inpD,"L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.rots.csv"), sep = "\t")
names(results)
summary(results, fdr = 1)
plot(results, fdr = 0.5, type = "volcano")
#P61203-2;P61203
#plot(results, fdr = 0.5, type = "heatmap")
#install.packages('readxl')
library('readxl')
pathD<-"L:/promec/Animesh/giz004_supplemental_files/"
inpF1<-file.path(pathD,"File-1.xlsx")
data1 <- read_excel(inpF1)
#plot(log(data$percentage.identity),log(data$e.value),col=factor(data$number.of.mismatches))
summary(data1)
plot(data1)
inpF2<-file.path(pathD,"File-2.xlsx")
data2 <- read_excel(inpF2)
summary(data2)
plot(data2)
#install.packages('readxl')
library('readxl')
inpF4<-file.path(pathD,"File-4.xlsx")
data4 <- read_excel(inpF4)
summary(data4)
plot(data4)
View(data1)
View(data2)
View(data4)
plot(data4)
summary(data4)
plot(log2(data4))
data4
read_excel
?read_excel
rownames(data4)<-data4$ID
plot(log2(data4))
inpF4<-file.path(pathD,"File-4.xlsx",row.names = 1)
data4 <- ?read_excel(inpF4,row.names = 1)
inpF4<-file.path(pathD,"File-4.xlsx")
data4 <- read_excel(inpF4,row.names = 1)
data4 <- read_excel(inpF4)
summary(data4)
data4<-data4[,2:]
data4[,2]
data4[,-1]
data4
data4rn<-data4[,-1]
row.names<-.data.frame(data4[,1])
row.names(data4rn)<-data4[,1]
plot(log2(data4rn))
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
`BiocManager::install("VennDetail")
BiocManager::install("VennDetail")
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install("VennDetail")
BiocManager::install("VennDetail")
)
)
)
''
'
))))
))))))))))))))))
w
1
2+2
BiocManager::install("VennDetail")
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("VennDetail")
install.packages("BiocManager")
install.packages("BiocManager")
rstan:::rstudio_stanc("school8.stan")
install.packages("BiocManager")
BiocManager::install("VennDetail")
boxplot(data1[11,2:])
data1[11,2:]
#install.packages('readxl')
library('readxl')
pathD<-"L:/promec/Animesh/giz004_supplemental_files/"
inpF1<-file.path(pathD,"File-1.xlsx")
data1 <- read_excel(inpF1)
#plot(log(data$percentage.identity),log(data$e.value),col=factor(data$number.of.mismatches))
summary(data1)
boxplot(data1[11,2:])
boxplot(data1[11,2:])
boxplot(data1[11,:])
boxplot(data1[11,])
#plot(log(data$percentage.identity),log(data$e.value),col=factor(data$number.of.mismatches))
summary(data1)
boxplot(as.numeric(data1[11,]))
boxplot(as.numeric(data1[11,]), color="orange")
boxplot(as.numeric(data1[11,]), color="orange")
boxplot(as.numeric(data1[11,]), col="orange")
summary(data2)
inpF2<-file.path(pathD,"File-2.xlsx")
data2 <- read_excel(inpF2)
summary(data2)
data2rn<-data2[,-1]
data2rn
data2rn<-data2[,-10]
summary(data2rn)
row.names(data2rn)<-data2rn[,1]
summary(data2rn)
View(data2rn)
data2rn<-data2rn[,-1]
data2rn<-data2[,-10]
data2rn<-data2rn[,-1]
data2rn<-data2[,-10]
data2rn<-as.numeric(data2rn[,-1])
data2rn<-as.matrix(data2rn[,-1])
summary(data2rn)
data2[,1]
row.names(data2rn)<-data2[,1]
summary(data2rn)
biplot(data2)
biplot(data2rn)
summary(data2rn)
row.names(data2rn)<-data2[,1]
View(data2rn)
data2rn<-data2rn[-1,]
data2rn<-data2[,-10]
data2rn<-data2rn[-1,]
data2rn<-as.matrix(data2rn[,-1])
summary(data2rn)
data2rn<-data2rn[,-1]
data2rn<-data2[,-10]
data2rn<-data2rn[-1,]
data2rn<-data2rn[,-1]
summary(data2rn)
data2rn<-as.matrix(data2rn)
summary(data2rn)
data2rn<-data2[,-10]
data2rn<-data2rn[-1,]
data2rn<-data2rn[,-1]
data2rn<-data2[,-10]
data2rn<-data2rn[-1,]
data2rn<-data2rn[,-1]+0
data2rn<-data2[,-10]
data2rn<-data2rn[-1,]
data2rn<-data2rn[,-1]+0
data2rn<-data2rn[,-1]
summary(data2rn)
mapply(data2rn, FUN=as.numeric)
data2rn<-data2[,-10]
data2rn<-data2rn[-1,]
data2rn<-data2rn[,-1]
data2rn<-sapply(data2rn, as.numeric)
summary(data2rn)
row.names(data2rn)<-data2[,1]
biplot(data2rn)
summary(data2rn)
biplot(log2(data2rn+1))
log2(data2rn+1)
biplot(log2(data2rn+1))
princomp(log2(data2rn+1))
princomp(log2(data2rn+1))
summary(log2(data2rn+1))
data2rn(is.na(data2rn))
is.na(data2rn)
data2rn[is.na(data2rn)]=0
summary(data2rn)
summary(log2(data2rn+1))
prcomp(data2rn)
biplot(data2rn)
biplot(prcomp(data2rn))
plot(log2(data4rn))
#install.packages('readxl')
library('readxl')
inpF4<-file.path(pathD,"File-4.xlsx")
data4 <- read_excel(inpF4)
summary(data4)
data4rn<-data4[,-1]
row.names(data4rn)<-data4[,1]
plot(log2(data4rn))
princcomp(data2rn)
princomp(data2rn)
biplot(prcomp(data2rn))
#install.packages('readxl')
library('readxl')
pathD<-"L:/promec/Animesh/giz004_supplemental_files/"
inpF1<-file.path(pathD,"File-1.xlsx")
data1 <- read_excel(inpF1)
#plot(log(data$percentage.identity),log(data$e.value),col=factor(data$number.of.mismatches))
summary(data1)
boxplot(as.numeric(data1[11,]), col="orange")
inpF2<-file.path(pathD,"File-2.xlsx")
data2 <- read_excel(inpF2)
summary(data2)
data2rn<-data2[,-10]
data2rn<-data2rn[-1,]
data2rn<-data2rn[,-1]
data2rn<-sapply(data2rn, as.numeric)
data2rn[is.na(data2rn)]=0
summary(data2rn)
summary(log2(data2rn+1))
princomp(data2rn)
biplot(prcomp(data2rn))
#install.packages('readxl')
library('readxl')
inpF4<-file.path(pathD,"File-4.xlsx")
data4 <- read_excel(inpF4)
summary(data4)
data4rn<-data4[,-1]
row.names(data4rn)<-data4[,1]
plot(log2(data4rn))
biplot(prcomp(data4rn))
