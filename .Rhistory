data(Breast)
#http://users.humboldt.edu/finneyb/gfortran-windows-20140629.exe # windows
#install.packages("doMC", repos="http://R-Forge.R-project.org") # windows
#sudo apt-get install libssl-dev libxml2-dev libcurl4-gnutls-dev # linux
#install.packages(c('mclust', 'mvtnorm', 'sva', 'Rcpp', 'RcppArmadillo', 'rARPACK', 'parallel', 'foreach', 'doParallel', 'ggplot2', 'RColorBrewer', 'doMC'))
#install.packages('devtools')
#require(devtools)
#install_github("syspremed/exploBATCH",verbose=TRUE)
#install_github("gnyamundanda/exploBATCHbreast") # install_github requires devtools package
require(exploBATCHbreast)
data(Breast)
head(Breast)
expBATCH(D=Breast,batchCL=batchBreast,Conf=NA,mindim=2,maxdim=9,method="ppcca",SDselect=4)
library("exploBATCH")
head(Breast)
expBATCH(D=Breast,batchCL=batchBreast,Conf=NA,mindim=2,maxdim=9,method="ppcca",SDselect=4)
require(exploBATCHbreast)
batchBreast
Breast
expBATCH(D=Breast,batchCL=batchBreast,Conf=NA,mindim=2,maxdim=9,method="ppcca",SDselect=4)
expBATCH(D=Breast,batchCL=batchBreast,Conf=NA,mindim=2,maxdim=9,method="ppcca",SDselect=4)
expBATCH(D=Breast,batchCL=batchBreast,Conf=NA,mindim=2,maxdim=9,method="ppcca",SDselect=4)
batchBreast
expBATCH(D=Breast,batchCL=batchBreast,Conf=NA,mindim=2,maxdim=9,method="ppcca",SDselect=2)
expBATCH(D=Breast,batchCL=batchBreast,Conf=NA,mindim=2,maxdim=9,method="ppcca",SDselect=2)
batchBreast
library(exploBATCHbreast)
require(exploBATCHbreast)
expBATCH(D=Breast,batchCL=batchBreast,Conf=NA,mindim=2,maxdim=9,method="ppcca",SDselect=2)
ls
ls()
cwd()
wd()
wd
pwd
cwd
chwd
chd
chwd
getwd()
setwd()
setwd(getwd())
getwd()
inpF <-"L:/Animesh/IdaJ/Bafh1resOldMQ/msmsScans.txt"
data <- read.delim(inpF, sep = "\t", header = T)
dataID = data[, grep("Identified", names(data))]
summary(dataID)
inpF <-"L:/Animesh/IdaJ/Bafh1resMQ/msmsScans.txt"
inpF <-"L:/Animesh/IdaJ/Bafh1resMQ/msmsScans.txt"
data <- read.delim(inpF, sep = "\t", header = T)
dataID = data[, grep("Identified", names(data))]
summary(dataID)
inpF <-"L:/Animesh/Abba/dePep/msmsScans.txt"
data <- read.delim(inpF, sep = "\t", header = T)
dataID = data[, grep("Identified", names(data))]
summary(dataID)
inpF <-"L:/Animesh/Abba/dePep/proteinGroups.txt"
data <- read.delim(inpF, row.names = 1, sep = "\t", header = T)
dataNorm = data[, grep("LFQ.intensity.", names(data))]
dataNorm = log2(dataNorm)
summary(dataNorm)
data <- read.delim(inpF, row.names = 1, sep = "\t", header = T)
dataNorm = data[, grep("LFQ.intensity.", names(data))]
dataNorm = log2(dataNorm+1)
summary(dataNorm)
source("https://bioconductor.org/biocLite.R")
biocLite("missRows")
biocLite("missRows")
#source("https://bioconductor.org/biocLite.R")
#biocLite("missRows")
library("missRows")
?missRows
biocLite("PowerExplorer")
#biocLite("PowerExplorer")
library("PowerExplorer")
?PowerExplorer
#biocLite("PowerExplorer")
library("PowerExplorer")
?PowerExplorer
?PowerExplorerStorage
biocLite("rWikiPathways")
biocLite("rWikiPathways")
```
library("rWikiPathways")
?rWikiPathways
biocLite("SDAMS")
library("SDAMS")
?SDAMS
biocLite("signet")
library("signet")
?signet
?signet
browseVignettes("signet")
biocLite("singscore")
library("singscore")
?singscore
biocLite("TissueEnrich")
library("TissueEnrich")
?TissueEnrich
biocLite("Trendy")
library("Trendy")
?Trendy
biocLite("multiClust")
?multiClust
library("multiClust")
biocLite("dendextend")
library("multiClust")
library("dendextend")
biocLite("dendextend")
biocLite("DEComplexDisease")
library("DEComplexDisease")
?DEComplexDisease
biocLite("DominoEffect")
library("DominoEffect")
?DominoEffect
biocLite("drawProteins")
library("drawProteins")
?drawProteins
biocLite("enrichplot")
library("enrichplot")
?enrichplot
library("BiocInstaller")
biocLite("PGA")
?PGA
inpF <-"L:/Animesh/Abba/dePep/msmsScans.txt"
data <- read.delim(inpF, sep = "\t", header = T)
inpF <-"L:/Animesh/bug/ANOVA.txt"
data <- read.delim(inpF, sep = "\t", header = T)
dataID = data[, grep("Column", names(data))]
summary(dataID)
dataID
factorC=rep(4,4)
factorC
factorC=c(rep(1,4),rep(2,4),rep(3,4),rep(4,4))
factorC
dataID
TukeyHSD(aov((as.numeric(dataID[2,])~factorC)))
factorC=c(rep(1,4),rep(2,4),rep(3,4),rep(4,4))
TukeyHSD(aov((as.numeric(dataID[2,])~factorC)))
factorC=c(rep(1,4),rep(2,4),rep(3,4),rep(4,4),rep(5,4))
TukeyHSD(aov((as.numeric(dataID[2,])~factorC)))
factorC=c(rep(A,4),rep(B,4),rep(C,4),rep(D,4),rep(E,4))
factorC=c(rep("A",4),rep("B",4),rep("C",4),rep("D",4),rep("E",4))
TukeyHSD(aov((as.numeric(dataID[2,])~factorC)))
factorC=c(rep("A",4),rep("B",4),rep("C",4),rep("D",4),rep("E",4))
TukeyHSD(aov((as.numeric(dataID[161,])~factorC)))
dataID[161,]
data <- read.delim(inpF, sep = "\t", header = T, row.names = 24)
dataID = data[, grep("Column", names(data))]
summary(dataID)
inpF <-"L:/Animesh/bug/ANOVA.txt"
data <- read.delim(inpF, sep = "\t", header = T, row.names = 24)
dataID = data[, grep("Column", names(data))]
summary(dataID)
dataID[161,]
dataID[160,]
TukeyHSD(aov((as.numeric(dataID[160,])~factorC)))
aov((as.numeric(dataID[160,])~factorC))
TukeyHSD(aov((as.numeric(dataID[160,])~factorC)))
factorC=c(rep("A",5),rep("B",5),rep("C",5),rep("D",5))
TukeyHSD(aov((as.numeric(dataID[160,])~factorC)))
factorC=c(rep("Group1",5),rep("Group2",5),rep("Group3",5),rep("Group4",5))
TukeyHSD(aov((as.numeric(dataID[160,])~factorC)))
View(data)
tc=apply(dataNorm,1,function(x){
#tc=apply(dataNorm, 1, function(x)
tryCatch(TukeyHSD(aov(x~factorC,"factorC", ordered = TRUE),error=function(x){return(rep(1,20))})})
tc=apply(dataNorm,1,function(x){
#tc=apply(dataNorm, 1, function(x)
tryCatch(TukeyHSD(aov(x~factorC,"factorC", ordered = TRUE),error=function(x){return(rep(1,20))}))}
)
tc=apply(dataNorm,1,function(x){
#tc=apply(dataNorm, 1, function(x)
tryCatch(TukeyHSD(aov(x~factorC,"factorC", ordered = TRUE),error=function(x){return(rep(1,20))}))})
tc=apply(dataNorm,1,function(x){
#tc=apply(dataNorm, 1, function(x)
tryCatch(TukeyHSD(aov(x~factorC,"factorC", ordered = TRUE)),error=function(x){return(rep(1,20))})}
)
tc=apply(dataNorm,1,function(x){
#tc=apply(dataNorm, 1, function(x)
tryCatch(TukeyHSD(aov(x~factorC,"factorC", ordered = TRUE)),error=function(x){return(rep(1,20))})})
outF = paste0(inpF,"anovaTukey.txt")
class(tc)
names(tc)
dump(tc, file=outF)
tc
tc=apply(dataID,1,function(x){
#tc=apply(dataNorm, 1, function(x)
tryCatch(TukeyHSD(aov(x~factorC,"factorC", ordered = TRUE)),error=function(x){return(rep(1,20))})})
tc
factorC
outF = paste0(inpF,"anovaTukey.txt")
names(tc)
dump(tc, file=outF)
dump
outF = paste0(inpF,"anovaTukey.csv")
class(tc)
names(tc)
write.csv(tc, file=outF)
x
TukeyHSD(aov((as.numeric(dataID[160,])~factorC)),"factorC", ordered = TRUE))
TukeyHSD(aov((as.numeric(dataID[160,])~factorC)),"factorC", ordered = TRUE)
?TukeyHSD
tc=apply(dataID,1,function(x){
#tc=apply(dataNorm, 1, function(x)
#  tryCatch(TukeyHSD(aov(x~factorC,"factorC", ordered = TRUE)),error=function(x){return(rep(1,20))})})
tryCatch(TukeyHSD(aov(x~factorC,"factorC")),error=function(x){return(rep(1,20))})})
tc
factorC
rep(1,20)
inpF <-"L:/Animesh/bug/ANOVA.txt"
data <- read.delim(inpF, sep = "\t", header = T, row.names = 24)
dataID = data[, grep("Column", names(data))]
summary(dataID)
#install.packages('shiny')
#library(shiny)
renderPlot({
hist(dataNorm[,as.numeric(which(names(dataNorm)==input$expression))],breaks = as.numeric(input$bins),probability = TRUE,col="orange")
lines(density(dataNorm[,as.numeric(which(names(dataNorm)==input$expression))], adjust = as.numeric(input$dens)),col="blue")
})
#install.packages('shiny')
library(shiny)
renderPlot({
hist(dataNorm[,as.numeric(which(names(dataNorm)==input$expression))],breaks = as.numeric(input$bins),probability = TRUE,col="orange")
lines(density(dataNorm[,as.numeric(which(names(dataNorm)==input$expression))], adjust = as.numeric(input$dens)),col="blue")
})
renderText({paste("Inputs:", input$bins,input$dens,input$expression)})
renderPlot({
hist(dataNorm[,as.numeric(which(names(dataNorm)==input$expression))],breaks = as.numeric(input$bins),probability = TRUE,col="orange")
lines(density(dataNorm[,as.numeric(which(names(dataNorm)==input$expression))], adjust = as.numeric(input$dens)),col="blue")
})
renderPlot({
hist(dataNorm[,as.numeric(which(names(dataNorm)==input$expression))],breaks = as.numeric(input$bins),probability = TRUE,col="orange")
lines(density(dataNorm[,as.numeric(which(names(dataNorm)==input$expression))], adjust = as.numeric(input$dens)),col="blue")
})
summary(dataNorm)
inpF <-"L:/Animesh/Abba/dePep/proteinGroups.txt"
summary(dataNorm)
inpF
summary(dataNorm)
dataNorm
data <- read.delim(inpF, row.names = 1, sep = "\t", header = T)
data <- read.delim(inpF, row.names = 1, sep = "\t", header = T)
dataNorm = data[, grep("LFQ.intensity.", names(data))]
dataNorm = log2(dataNorm+1)
summary(dataNorm)
inputPanel(
sliderInput("bins", "#bins:", min = 1, max = 50, value = 30),
textInput("dens", "Density:", "auto",value = 0.6),
selectInput("expression", label = "Sample:",choices = names(dataNorm), selected = names(dataNorm)[6]))
renderText({paste("Inputs:", input$bins,input$dens,input$expression)})
#install.packages('shiny')
library(shiny)
renderPlot({
hist(dataNorm[,as.numeric(which(names(dataNorm)==input$expression))],breaks = as.numeric(input$bins),probability = TRUE,col="orange")
lines(density(dataNorm[,as.numeric(which(names(dataNorm)==input$expression))], adjust = as.numeric(input$dens)),col="blue")
})
inputPanel(
sliderInput("bins", "#bins:", min = 1, max = 50, value = 30),
textInput("dens", "Density:", "auto",value = 0.6),
selectInput("expression", label = "Sample:",choices = names(dataNorm), selected = names(dataNorm)[6]))
renderText({paste("Inputs:", input$bins,input$dens,input$expression)})
dataNorm
renderText({paste("Inputs:", input$bins,input$dens,input$expression)})
inputPanel(
sliderInput("bins", "#bins:", min = 1, max = 50, value = 30),
textInput("dens", "Density:", "auto",value = 0.6),
selectInput("expression", label = "Sample:",choices = names(dataNorm), selected = names(dataNorm)[6]))
renderText({paste("Inputs:", input$bins,input$dens,input$expression)})
#install.packages('shiny')
#library(shiny)
renderPlot({
hist(dataNorm[,as.numeric(which(names(dataNorm)==input$expression))],breaks = as.numeric(input$bins),probability = TRUE,col="orange")
lines(density(dataNorm[,as.numeric(which(names(dataNorm)==input$expression))], adjust = as.numeric(input$dens)),col="blue")
})
inpF <-"L:/Animesh/IdaJ/Bafh1resMQ/proteinGroups.txt"
inpF <-"L:/Animesh/IdaJ/Bafh1resMQ/msmsScans.txt"
data <- read.delim(inpF, sep = "\t", header = T)
dataID = data[, grep("Identified", names(data))]
summary(dataID)
data <- read.delim(inpF, row.names = 1, sep = "\t", header = T)
inpF <-"L:/Animesh/IdaJ/Bafh1resMQ/proteinGroups.txt"
---
runtime: shiny
output: html_document
---
data <- read.delim(inpF, row.names = 1, sep = "\t", header = T)
data <- read.delim(inpF, row.names = 1, sep = "\t", header = T)
dataNorm = data[, grep("LFQ.intensity.", names(data))]
dataNorm = log2(dataNorm+1)
summary(dataNorm)
factorC=c(rep(("Baf","Ctr"),4))
factorC=c(rep(["Baf","Ctr"],4))
factorC=c(rep(("Baf" "Ctr"),4))
factorC=c(rep(c("Baf","Ctr"),each=4))
factorC
#factorC=c(rep(c("Baf","Ctr"),each=4))
factorC=c(rep(c("Baf","Ctr")))
factorC
#factorC=c(rep(c("Baf","Ctr"),each=4))
factorC=c(rep(c("Baf","Ctr"),4))
factorC
outF = paste0(inpF,"test.csv")
class(tc)
#?TukeyHSD(aov((as.numeric(dataID[160,])~factorC)),"factorC", ordered = TRUE)
#tc=apply(dataID,1,function(x){
#tc=apply(dataNorm, 1, function(x)   tryCatch(TukeyHSD(aov(x~factorC,"factorC", ordered = TRUE)),error=function(x){return(rep(1,20))})}) tryCatch(TukeyHSD(aov(x~factorC,"factorC")),error=function(x){return(rep(1,20))})})
tc=t.test(dataNorm[1,],factorC)
outF = paste0(inpF,"test.csv")
t.test(dataNorm[1,],factorC)
dataNorm[1,]
t.test(dataNorm[2,],factorC)
dataNorm[2,]
dataNorm[3,]
source("https://bioconductor.org/biocLite.R")
biocLite("limma")
biocLite("limma")
biocLite("limma")
source("https://bioconductor.org/biocLite.R")
biocLite("limma")
source("https://bioconductor.org/biocLite.R")
biocLite("limma")
source("https://bioconductor.org/biocLite.R")
biocLite("limma")
source("https://bioconductor.org/biocLite.R")
biocLite("limma")
inpF <-"L:/Animesh/IdaJ/Bafh1resMQ/proteinGroups.txt"
data <- read.delim(inpF, row.names = 1, sep = "\t", header = T)
dataNorm = data[, grep("LFQ.intensity.", names(data))]
dataNorm = log2(dataNorm+1)
summary(dataNorm)
library("limma")
plotDensities(data)
plotDensities(dataNorm)
boxplot(dataNorm)
format(round(colSums(dataNorm), digits = 0), big.mark = ",")
format(round(colSums(dataNorm)))
colSums(dataNorm)
biplot(dataNorm)
plotMDS(dataNorm)
names(data)
names(dataNorm)
data <- read.delim(inpF, row.names = 1, sep = "\t", header = T)
colName="LFQ.intensity."
dataNorm = data[, grep(colName, names(data))]
dataNorm = log2(dataNorm+1)
names(dataNorm)=gsub(pattern = colName, replacement = "", x = names(dataNorm))
summary(dataNorm)
plotMDS(dataNorm)
biocLite("edgeR")
library("edgeR")
target_dN <- mean(colSums(dataNorm))
target_dN
norm_dN <- target_dN / colSums(dataNorm)
norm_dN
norm_dN <- mean(colSums(dataNorm)) / colSums(dataNorm)
norm_dN
dataN_sl <- sweep(dataNorm, 2, norm_dN, FUN = "*")
dataN_sl
plotDensities(dataN_sl)
boxplot(dataN_sl)
source("https://bioconductor.org/biocLite.R")
biocLite("limma")
library("limma")
boxplot(dataNorm)
plotDensities(dataNorm)
colSums(dataNorm)
plotMDS(dataNorm)
norm_dN <- mean(colSums(dataNorm)) / colSums(dataNorm)
dataN_sl <- sweep(dataNorm, 2, norm_dN, FUN = "*")
plotDensities(dataN_sl)
boxplot(dataN_sl)
boxplot(dataNorm[dataNorm!=0])
boxplot(dataNorm[dataNorm!=0,])
plotDensities(dataNorm!=0,])
plotDensities(dataNorm[dataNorm!=0,])
#dataNorm = log2(dataNorm+1)
dataNorm = log2(dataNorm)
#inpF <- "L:/Animesh/IdaJ/Bafh1resMQ/msmsScans.txt"
#data <- read.delim(inpF, sep = "\t", header = T)
#dataID = data[, grep("Identified", names(data))]
#summary(dataID)
inpF <- "L:/Animesh/IdaJ/Bafh1resMQ/proteinGroups.txt"
data <- read.delim(inpF, row.names = 1, sep = "\t", header = T)
colName = "LFQ.intensity."
dataNorm = data[, grep(colName, names(data))]
#dataNorm = log2(dataNorm+1)
dataNorm = log2(dataNorm)
names(dataNorm) = gsub(pattern = colName, replacement = "", x = names(dataNorm))
summary(dataNorm)
#source("https://bioconductor.org/biocLite.R")
#biocLite("limma")
library("limma")
#boxplot(dataNorm[dataNorm!=0,])
dataNorm[dataNorm == -Inf] <- NaN
boxplot(dataNorm)
plotDensities(dataNorm)
colSums(dataNorm, na.rm = TRUE)
plotMDS(dataNorm)
norm_dN <- mean(colSums(dataNorm,na.rm = TRUE)) / colSums(dataNorm,na.rm = TRUE)
dataN_sl <- sweep(dataNorm, 2, norm_dN, FUN = "*")
plotDensities(dataN_sl)
boxplot(dataN_sl)
#source("https://bioconductor.org/biocLite.R")
#biocLite("edgeR")
library("edgeR")
summary(is.na(dataNorm))
dataN_s2 <- dataNorm
dataN_s2[is.na(dataN_s2)] <- 0
dataN_s2 <- sweep(dataN_s2, 2, calcNormFactors(dataN_s2), FUN = "/")
summary(is.na(dataN_s2))
boxplot(dataN_s2)
#factorC=c(rep(c("Baf","Ctr"),each=4))
factorC <- c(rep(c("Baf","Ctr"),4))
#?TukeyHSD(aov((as.numeric(dataID[160,])~factorC)),"factorC", ordered = TRUE)
#tc=apply(dataID,1,function(x){
#tc=apply(dataNorm, 1, function(x)   tryCatch(TukeyHSD(aov(x~factorC,"factorC", ordered = TRUE)),error=function(x){return(rep(1,20))})}) tryCatch(TukeyHSD(aov(x~factorC,"factorC")),error=function(x){return(rep(1,20))})})
tc = t.test(dataNorm[3,])$p.value
outF = paste0(inpF,"test.csv")
class(tc)
names(tc)
write.csv(tc, file = outF)
#https://rmarkdown.rstudio.com/authoring_shiny.html
#install.packages('shiny')
library(shiny)
dN_shiny <- dataNorm
dN_shiny[is.na(dN_shiny)] <- 0
summary(is.na(dN_shiny))
#ctrl-shift-K
#rmarkdown::run
#shiny::renderUI
inputPanel(
sliderInput("bins", "#bins:", min = 1, max = 100, value = 30),
textInput("dens", "Density:", "auto",value = 0.6),
selectInput("expression", label = "Sample:",choices = names(dN_shiny), selected = names(dN_shiny)[1]))
renderText({paste("Inputs:", input$bins,input$dens,input$expression)})
renderPlot({
hist(dN_shiny[,as.numeric(which(names(dN_shiny) == input$expression))],breaks = as.numeric(input$bins),probability = TRUE,col="orange")
lines(density(dN_shiny[,as.numeric(which(names(dN_shiny) == input$expression))], adjust = as.numeric(input$dens)),col="blue")
})
colSums(dataN_s2)
plotMDS(dataN_s2)
pairs(dataN_s2)
pairwise.t.test(dataNorm,factorC)
pairwise.t.test(dataN_s2,factorC)
pairwise.t.test(dataNorm[3,],factorC)
?pairwise.t.test
dataNorm[3,]
factorC
pairwise.t.test(dataNorm[3,],factorC)
dataNorm[3,],factorC
pairwise.t.test(dataNorm[3,],factor(factorC))
factor(factorC)
pairwise.t.test(dataNorm[3,],(factorC))
factor
pairwise.t.test(dataNorm[3,],factor(factorC))
pairwise.t.test(dataNorm[3,],factor(factorC))
pairwise.t.test(dataNorm[3,],(factorC))
dDGE <- DGEList(counts = dataN_s2, group = factorC)
dDGE <- calcNormFactors(dDGE)
dDGE <- calcNormFactors(dDGE)
factorC <- c(rep(c("Baf","Ctr"),4))
dDGE <- DGEList(counts = dataN_s2, group = factorC)
dDGE <- calcNormFactors(dDGE)
dDGE <- estimateDisp(dDGE)
dDGE$samples
plotBCV(dDGE)
factorC <- c(rep(c("Baf","Ctr"),4))
dDGE <- DGEList(counts = dataN_s1, group = factorC)
dDGE <- DGEList(counts = dataNorm, group = factorC)
dDGE <- DGEList(counts = dataN_s2, group = factorC)
dDGE <- calcNormFactors(dDGE)
dDGE <- estimateDisp(dDGE)
dDGE$samples
dTest <- exactTest(dataN_s2, pair = c("Baf","Ctr"))
dTest <- exactTest(dDGE, pair = c("Baf","Ctr"))
summary(decideTestsDGE(dTest)) # this counts up, down, and unchanged genes (here it is proteins)
dTest <- exactTest(dDGE)#, pair = c("Baf","Ctr"))
summary(decideTestsDGE(dTest)) # this counts up, down, and unchanged genes (here it is proteins)
pairwise.t.test(dataNorm[3,],(factorC))
dTestFDR <- topTags(dTest, n = 10000, sort.by = "none")
summary(dTestFDR) # this counts up, down, and unchanged genes (here it is proteins)
dTest <- exactTest(dDGE)#, pair = c("Baf","Ctr"))
summary(decideTestsDGE(dTest)) # this counts up, down, and unchanged genes (here it is proteins)
plotBCV(dDGE)
names(dataNorm)
#factorC=c(rep(c("Baf","Ctr"),each=4))
factorC <- c("Baf","Ctr","Baf","Ctr","Baf","Baf","Ctr","Ctr")
names(dataNorm)
dDGE <- DGEList(counts = dataN_s2, group = factorC)
dDGE <- calcNormFactors(dDGE)
dDGE <- estimateDisp(dDGE)
dDGE$samples
names(dataNorm)
#factorC=c(rep(c("Baf","Ctr"),each=4))
factorC <- c("Baf","Ctr","Baf","Ctr","Ctr","Baf","Baf","Ctr")
t(names(dataNorm))
dDGE <- DGEList(counts = dataN_s2, group = factorC)
dDGE <- calcNormFactors(dDGE)
dDGE <- estimateDisp(dDGE)
dDGE$samples
plotBCV(dDGE)
plotBCV(dDGE)
dTest <- exactTest(dDGE)#, pair = c("Baf","Ctr"))
summary(decideTestsDGE(dTest))
dTestFDR <- topTags(dTest, n = 10000, sort.by = "none")
summary(dTestFDR)
dTestFDR <- topTags(dTest, n = 1000, sort.by = "none")
summary(dTestFDR)
dTest
summary(decideTestsDGE(dTest))
dTest$table
