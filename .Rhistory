plot(dN_shiny$`input$expression`)
dataNorm$`NB4 Biol Rep 22 WSRT`
hist(dataNorm$`NB4 Biol Rep 22 WSRT`)
summary(dataNorm$`NB4 Biol Rep 22 WSRT`)
euler(dataNorm<.5), quantities = TRUE)
euler(dataNorm<.5)
che=euler(dataNorm<.5)
che$original.values
euler(dataNorm<.5)$original.values
euler(dataNorm<.5)$original.values[1]
che$ellipses
che$original.values
che$original.values["NB4 Biol Rep 22 WSRT"]
Uniprot<-sapply(strsplit(row.names(data$`T: Majority protein IDs`),";"), `[`, 1)
Uniprot<-sapply(strsplit(data$`T: Majority protein IDs`,";"), `[`, 1)
Uniprot
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade") ## you may need this
data$`NB4 Biol Rep 22 WSRT`<0.5
## biocLite("BiocUpgrade") ## you may need this
biocLite("clusterProfiler")
library("clusterProfiler")
install.packages("F:/promec/Animesh/Camilla/colorspace_1.2-5.zip")
install.packages("F:/promec/Animesh/Camilla/colorspace_1.4-0.zip")
install.packages("F:/promec/Animesh/Camilla/colorspace_1.4-0.zip")
library("clusterProfiler")
enrichGO
install.packages("F:/promec/Animesh/Camilla/colorspace_1.4-0.zip")
library("clusterProfiler")
devtools::install_github('cran/colorspace')
install.packages("F:/promec/Animesh/Camilla/colorspace_1.4-0.zip")
data[data$`NB4 Biol Rep 22 WSRT`<0.5,1]
Uniprot=data[data$`NB4 Biol Rep 22 WSRT`<0.5,1]
Uniprot<-sapply(strsplit(Uniprot,";"), `[`, 1)
Uniprot=data[data$`NB4 Biol Rep 22 WSRT`<0.5,1]
enrichGO(gene         = gene.df$ENSEMBL,
OrgDb         = org.Hs.eg.db,
keyType       = 'UNIPROT',
ont           = "CC",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05)
Uniprot<-sapply(strsplit(Uniprot,";"), `[`, 1)
Uniprot=data[data$`NB4 Biol Rep 22 WSRT`<0.5,1]
Uniprot<-sapply(strsplit(Uniprot,";"))
Uniprot
Uniprot<-sapply(strsplit(data$`T: Majority protein IDs`,";"), `[`, 1)
Uniprot
library("clusterProfiler")
install.packages("F:/promec/Animesh/Camilla/colorspace_1.4-0.zip")
library("clusterProfiler")
install.packages("colorspace")
library("clusterProfiler")
#Uniprot=data[data$`NB4 Biol Rep 22 WSRT`<0.5,1]
Uniprot<-sapply(strsplit(data$`T: Majority protein IDs`,";"), `[`, 1)
#install.packages('readxl')
library('readxl')
pathD<-"F:/promec/Animesh/Camilla"
inpF<-file.path(pathD,"Wilcoxon_forAnimesh.xlsx WSRTun.xls")
data <- read_excel(inpF)
dataNorm <- data[,3:5]
#Uniprot=data[data$`NB4 Biol Rep 22 WSRT`<0.5,1]
Uniprot<-sapply(strsplit(data$`T: Majority protein IDs`,";"), `[`, 1)
Uniprot
Uniprot
enrichGO(gene=Uniprot,OrgDb=org.Hs.eg.db,keyType= 'UNIPROT',ont= "CC",pAdjustMethod = "BH",pvalueCutoff  = 0.01,qvalueCutoff  = 0.05)
library("clusterProfiler")
install.packages("org.Hs.eg.db")
biocLite("org.Hs.eg.db")
source("https://bioconductor.org/biocLite.R")
biocLite("org.Hs.eg.db")
enrichGO(gene=Uniprot,OrgDb=org.Hs.eg.db,keyType= 'UNIPROT',ont= "CC",pAdjustMethod = "BH",pvalueCutoff  = 0.01,qvalueCutoff  = 0.05)
library("org.Hs.eg.db")
enrichGO(gene=Uniprot,OrgDb=org.Hs.eg.db,keyType= 'UNIPROT',ont= "CC",pAdjustMethod = "BH",pvalueCutoff  = 0.01,qvalueCutoff  = 0.05)
devtools::install_github("jlmelville/uwot")
install.packages("stringi")
install.packages("ggdark")
Scratch for R
========================================================
**check**
frac $\frac{1}{n}$
rm(list=ls())
Scratch for R
========================================================
**check**
frac $\frac{1}{n}$
memory . limit ()
rm(list=ls())
Scratch for R
========================================================
**check**
frac $\frac{1}{n}$
memory.limit ()
rm(list=ls())
?memory.limit
Scratch for R
========================================================
**check**
frac $\frac{1}{n}$
memory.size(TRUE)
memory.limit(TRUE)
rm(list=ls())
Scratch for R
========================================================
**check**
frac $\frac{1}{n}$
memory.size(TRUE)
memory.limit()
rm(list=ls())
Scratch for R
========================================================
**check**
frac $\frac{1}{n}$
memory.size(TRUE)
memory.limit()
rm(list=ls())
Scratch for R
========================================================
**check**
frac $\frac{1}{n}$
memory.size(TRUE)
memory.limit()
rm(list=ls())
frac $\frac{1}{n}$
memory.size(TRUE)
memory.limit()
install.packages('shiny')
install.packages("stringi")
a=[[1,2],[2,1]]
a=c(c(1,2),c(2,1))
a=c(c(1,2),c(2,1))
a=[[1,2],[2,1]]
a=c(c(1,2),c(2,1))
t(a)
a=c(c(1,2);c(2,1))
a=c(c(1,2) c(2,1))
dim(a)<-c(2,2)
t(a)
a-t(a)
a.t(a)
a*t(a)
t(a)*(a)
a=c(c(1,2) c(2,1))
dim(a)<-c(2,2)
t(a)*(a)
(a)*t(a)
cov(a)
devtools::install_github("rstudio/r2d3")
devtools::install_github("rstudio/r2d3")
install.packages('devtools')
devtools::install_github("rstudio/r2d3")
library(r2d3)
r2d3(data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20), script = "barchart.js")
library(r2d3)
bars <- c(10, 20, 30)
svg.selectAll('rect')
.data(data)
.enter()
.append('rect')
.attr('width', function(d) { return d * 10; })
.attr('height', '20px')
.attr('y', function(d, i) { return i * 22; })
.attr('fill', options.color);
library(r2d3)
bars <- c(10, 20, 30)
svg.selectAll('rect')
.data(data)
.enter()
.append('rect')
.attr('width', function(d) { return d * 10; })
.attr('height', '20px')
.attr('y', function(d, i) { return i * 22; })
.attr('fill', options.color);
library(r2d3)
bars <- c(10, 20, 30)
svg.selectAll('rect')
.data(data)
.enter()
.append('rect')
.attr('width', function(d) { return d * 10; })
.attr('height', '20px')
.attr('y', function(d, i) { return i * 22; })
.attr('fill', options.color);
svg.selectAll('rect')
.data(data)
.enter()
.append('rect')
.attr('width', function(d) { return d * 10; })
.attr('height', '20px')
.attr('y', function(d, i) { return i * 22; })
.attr('fill', options.color);
svg.selectAll('rect')
.data(data)
.enter()
.append('rect')
.attr('width', function(d) { return d * 10; })
.attr('height', '20px')
.attr('y', function(d, i) { return i * 22; })
.attr('fill', options.color);
r2d3::r2d3("barChart.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("barChart.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
install.packages('reticulate')
scriptD <- 'C:\\Users\\animeshs\\Desktop\\scripts\\'
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
stan(paste0(scriptD,'school8.stan'))
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
scriptD <- 'C:\\Users\\animeshs\\Desktop\\scripts\\'
stan(paste0(scriptD,'school8.stan'))
scriptD <- 'C:\\Users\\animeshs\\Desktop\\scripts\\'
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
scriptD <- 'C:\\Users\\animeshs\\Desktop\\scripts\\'
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library('rstan')
stan(paste0(scriptD,'school8.stan'))
scriptD <- 'C:\\Users\\animeshs\\Desktop\\scripts\\'
inpD <-'L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\'
data <- read.delim(paste0(inpD,"proteinGroups.txt"),row.names=1,sep="\t",header = T)
summary(data)
decoyPrefix="REV"
contaminantPrefix="CON"
dataC="LFQ.intensity."
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
dataNormImpCom[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
library(ROTS)
data(upsSpikeIn)
input = upsSpikeIn
groups = c(rep(0,3), rep(1,3))
groups
results = ROTS(data = input, groups = groups , B = 100 , K = 500 , seed = 1234)
names(results)
summary(results, fdr = 0.05)
plot(results, fdr = 0.2, type = "volcano")
#plot(results, fdr = 0.05, type = "heatmap")
library('rstan')
stan(paste0(scriptD,'school8.stan'))
library(mlbench) #provides the data set
install.packages(mlbench) #provides the data set
install.packages('mlbench') #provides the data set
library(mlbench) #provides the data set
data("BreastCancer")
model_set <- sapply(BreastCancer[complete.cases(BreastCancer),-1], as.numeric)
#format target variable as 0, 1 instead of 1,2
model_set[,10]<-model_set[,10]-1
#Split into test and train sets
indices <- sample(1:nrow(model_set), size = 0.7 * nrow(model_set))
#Target variables
target<-unlist(model_set[indices,10])
test_target<-unlist(model_set[-indices,10])
#create unscaled data set for boosted tree models
unscale_train<-as.matrix(model_set[indices,-10])
unscale_test<-as.matrix(model_set[-indices,-10 ])
#create normalized data set for neural network
mean <- apply(model_set[indices,-10], 2, mean)
std <- apply(model_set[indices,-10], 2, sd)
train <- scale(model_set[indices,-10], center = mean, scale = std)
test <- scale(model_set[-indices,-10], center = mean, scale = std)
boost_model<-xgboost(data = unscale_train,label=target,booster="gbtree", nfold = 2,nrounds = 25, verbose = FALSE, objective = "binary:logistic", eval_metric = "auc", nthread = 4)
#convert to numeric for models and remove na values for this example
library(xgboost)
#convert to numeric for models and remove na values for this example
ininstall.packages(xgboost)
#convert to numeric for models and remove na values for this example
install.packages(xgboost)
#convert to numeric for models and remove na values for this example
install.packages('xgboost')
boost_model<-xgboost(data = unscale_train,label=target,booster="gbtree", nfold = 2,nrounds = 25, verbose = FALSE, objective = "binary:logistic", eval_metric = "auc", nthread = 4)
library(xgboost)
boost_model<-xgboost(data = unscale_train,label=target,booster="gbtree", nfold = 2,nrounds = 25, verbose = FALSE, objective = "binary:logistic", eval_metric = "auc", nthread = 4)
boost_model
library(keras)
y_target<-to_categorical(target,2)
tf_nn <- keras_model_sequential() %>%
layer_dense(units = 12,
activation = 'relu',
input_shape = dim(train)[[2]]) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 12,
activation = 'relu')%>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2,
activation = 'softmax')
tf_nn %>% compile(
optimizer = optimizer_rmsprop(),
loss = "categorical_crossentropy",
metrics = c("accuracy")
)
history<-tf_nn %>% fit(
x=train,
y=y_target,
epochs = 7,
batch_size = 12
)
iinstall.packages(keras)
iinstall.packages('keras')
install.packages('keras')
library(keras)
y_target<-to_categorical(target,2)
y_target
tf_nn <- keras_model_sequential() %>%
layer_dense(units = 12,
activation = 'relu',
input_shape = dim(train)[[2]]) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 12,
activation = 'relu')%>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2,
activation = 'softmax')
tf_nn %>% compile(
optimizer = optimizer_rmsprop(),
loss = "categorical_crossentropy",
metrics = c("accuracy")
)
history<-tf_nn %>% fit(
x=train,
y=y_target,
epochs = 7,
batch_size = 12
)
tf_nn <- keras_model_sequential() %>%
layer_dense(units = 12,
activation = 'relu',
input_shape = dim(train)[[2]]) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 12,
activation = 'relu')%>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2,
activation = 'softmax')
install.packages('dplyr')
install.packages("dplyr")
library(xgboost)
library(dplyr)
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages('dplyr')
library(dplyr)
library(keras)
library(mlbench) #provides the data set
data("BreastCancer")
y_target<-to_categorical(target,2)
boost_model<-xgboost(data = unscale_train,label=target,booster="gbtree", nfold = 2,nrounds = 25, verbose = FALSE, objective = "binary:logistic", eval_metric = "auc", nthread = 4)
library(xgboost)
boost_model<-xgboost(data = unscale_train,label=target,booster="gbtree", nfold = 2,nrounds = 25, verbose = FALSE, objective = "binary:logistic", eval_metric = "auc", nthread = 4)
model_set <- sapply(BreastCancer[complete.cases(BreastCancer),-1], as.numeric)
#format target variable as 0, 1 instead of 1,2
model_set[,10]<-model_set[,10]-1
#Split into test and train sets
indices <- sample(1:nrow(model_set), size = 0.7 * nrow(model_set))
#Target variables
target<-unlist(model_set[indices,10])
test_target<-unlist(model_set[-indices,10])
#create unscaled data set for boosted tree models
unscale_train<-as.matrix(model_set[indices,-10])
unscale_test<-as.matrix(model_set[-indices,-10 ])
#create normalized data set for neural network
mean <- apply(model_set[indices,-10], 2, mean)
std <- apply(model_set[indices,-10], 2, sd)
train <- scale(model_set[indices,-10], center = mean, scale = std)
test <- scale(model_set[-indices,-10], center = mean, scale = std)
boost_model<-xgboost(data = unscale_train,label=target,booster="gbtree", nfold = 2,nrounds = 25, verbose = FALSE, objective = "binary:logistic", eval_metric = "auc", nthread = 4)
y_target<-to_categorical(target,2)
tf_nn <- keras_model_sequential() %>%
layer_dense(units = 12,
activation = 'relu',
input_shape = dim(train)[[2]]) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 12,
activation = 'relu')%>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2,
activation = 'softmax')
tf_nn %>% compile(
optimizer = optimizer_rmsprop(),
loss = "categorical_crossentropy",
metrics = c("accuracy")
)
history<-tf_nn %>% fit(
x=train,
y=y_target,
epochs = 7,
batch_size = 12
)
library(keras)
tf_nn <- keras_model_sequential() %>%
layer_dense(units = 12,
activation = 'relu',
input_shape = dim(train)[[2]]) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 12,
activation = 'relu')%>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 2,
activation = 'softmax')
history<-tf_nn %>% fit(
x=train,
y=y_target,
epochs = 7,
batch_size = 12
)
#write.csv(dataNormImpCom,file=paste0(inpD,"dataNormImpCom.csv"))
#write.csv(factors,file=paste0(inpD,"dataNormImpComFactor.csv"))
dataNormImpCom <- read.csv(paste0(inpD,"dataNormImpCom.csv"),row.names=1,header = T)
#factors<-read.csv(paste0(inpD,"dataNormImpComFactor.csv"))
#dump(dataNorm,file=paste0(inpD,"dataNorm.R"))
scriptD <- 'C:\\Users\\animeshs\\Desktop\\scripts\\'
inpD <-"L:\\promec\\Animesh\\HUNT\\txt106dpMBR\\"
data <- read.delim(paste0(inpD,"proteinGroups.txt"),row.names=1,sep="\t",header = T)
summary(data)
decoyPrefix="REV"
contaminantPrefix="CON"
dataC="LFQ.intensity."
#write.csv(dataNormImpCom,file=paste0(inpD,"dataNormImpCom.csv"))
#write.csv(factors,file=paste0(inpD,"dataNormImpComFactor.csv"))
dataNormImpCom <- read.csv(paste0(inpD,"dataNormImpCom.csv"),row.names=1,header = T)
#factors<-read.csv(paste0(inpD,"dataNormImpComFactor.csv"))
#dump(dataNorm,file=paste0(inpD,"dataNorm.R"))
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
dataNormImpCom<-read.delim("L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.txt",row.names=1,sep="\t",header = T)
dataNormImpCom[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
factors<-c(rep(0,5), rep(1,5))
library(ROTS)
results = ROTS(data = dataNormImpCom, groups = factors , B = 1000 , K = 500 , seed = 1234)
write.csv(summary(results, fdr = 1),file=paste0(inpD,"L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.rots.csv"), sep = "\t")
names(results)
summary(results, fdr = 1)
plot(results, fdr = 0.5, type = "volcano")
#P61203-2;P61203
#plot(results, fdr = 0.5, type = "heatmap")
library(ROTS)
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
dataNormImpCom<-read.delim("L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.txt",row.names=1,sep="\t",header = T)
dataNormImpCom[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
factors<-c(rep(0,5), rep(1,5))
library(ROTS)
results = ROTS(data = dataNormImpCom, groups = factors , B = 1000 , K = 500 , seed = 1234)
write.csv(summary(results, fdr = 1),file=paste0(inpD,"L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.rots.csv"), sep = "\t")
names(results)
summary(results, fdr = 1)
plot(results, fdr = 0.5, type = "volcano")
#P61203-2;P61203
#plot(results, fdr = 0.5, type = "heatmap")
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
dataNormImpCom<-read.delim("L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.txt",row.names=1,sep="\t",header = T)
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
dataNormImpCom<-read.delim("L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.txt",row.names=1,sep="\t",header = T)
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
dataNormImpCom<-read.delim("L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.txt",row.names=1,sep="\t",header = T)
dataNormImpCom[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
factors<-c(rep(0,5), rep(1,5))
library(ROTS)
results = ROTS(data = dataNormImpCom, groups = factors , B = 1000 , K = 500 , seed = 1234)
write.csv(summary(results, fdr = 1),file=paste0(inpD,"L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.rots.csv"), sep = "\t")
names(results)
summary(results, fdr = 1)
plot(results, fdr = 0.5, type = "volcano")
#P61203-2;P61203
#plot(results, fdr = 0.5, type = "heatmap")
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
dataNormImpCom<-read.delim("L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.txt",row.names=1,sep="\t",header = T)
dataNormImpCom[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
factors<-c(rep(0,5), rep(1,5))
library(ROTS)
results = ROTS(data = dataNormImpCom, groups = factors , B = 1000 , K = 500 , seed = 1234)
write.csv(summary(results, fdr = 1),file=paste0(inpD,"L:\\promec\\Elite\\LARS\\2014\\desember\\christiano\\plantaris-walker-hit.rots.csv"), sep = "\t")
names(results)
summary(results, fdr = 1)
plot(results, fdr = 0.5, type = "volcano")
#P61203-2;P61203
#plot(results, fdr = 0.5, type = "heatmap")
