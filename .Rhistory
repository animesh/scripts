plot(results, fdr = fdrThr, type = "volcano")
#plot(results, fdr = 0.05, type = "heatmap")
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
#BiocManager::install("ROTS")
dataNormImpCom<-yyt
#dataNormImpCom[dataNormImpCom==0]=5
summary(dataNormImpCom)
library(ROTS)
input = dataNormImpCom
colnames(dataNormImpCom)<-sub("X","",colnames(dataNormImpCom))
colnames(dataNormImpCom)
groups = label#$Code
groups
yyt<-yyt[,rownames(groups)]
results = ROTS(data = dataNormImpCom, groups = as.numeric(groups$Code2) , B = 100 , K = 5000 , seed = 1234)
names(results)
fdrThr<-0.2
uniP<-summary(results, fdr = fdrThr)
plot(results, fdr = fdrThr, type = "volcano")
#plot(results, fdr = 0.05, type = "heatmap")
?ROTS
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
#BiocManager::install("ROTS")
dataNormImpCom<-yyt
#dataNormImpCom[dataNormImpCom==0]=5
summary(dataNormImpCom)
library(ROTS)
input = dataNormImpCom
colnames(dataNormImpCom)<-sub("X","",colnames(dataNormImpCom))
colnames(dataNormImpCom)
groups = label#$Code
groups
yyt<-yyt[,rownames(groups)]
?ROTS
results = ROTS(data = dataNormImpCom, groups = as.numeric(groups$Code2) , B = 500 , K = 1000 , seed = 42)
names(results)
fdrThr<-0.2c
uniP<-summary(results, fdr = fdrThr)
plot(results, fdr = fdrThr, type = "volcano")
#plot(results, fdr = 0.05, type = "heatmap")
plot(results, fdr = 0.05, type = "heatmap")
plot(results, fdr = fdrThr, type = "heatmap")
uniP
View(uniP)
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
#BiocManager::install("ROTS")
dataNormImpCom<-yyt
#dataNormImpCom[dataNormImpCom==0]=5
summary(dataNormImpCom)
library(ROTS)
input = dataNormImpCom
colnames(dataNormImpCom)<-sub("X","",colnames(dataNormImpCom))
colnames(dataNormImpCom)
groups = label#$Code
groups
yyt<-yyt[,rownames(groups)]
?ROTS
results = ROTS(data = dataNormImpCom, groups = as.numeric(groups$Code2) , B = 500 , K = 1000 , seed = 42)
names(results)
fdrThr<-0.2
uniP<-summary(results, fdr = fdrThr)
plot(results, fdr = fdrThr, type = "volcano")
#plot(results, fdr = fdrThr, type = "heatmap")
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
#BiocManager::install("ROTS")
dataNormImpCom<-yyt
#dataNormImpCom[dataNormImpCom==0]=5
summary(dataNormImpCom)
library(ROTS)
input = dataNormImpCom
colnames(dataNormImpCom)<-sub("X","",colnames(dataNormImpCom))
colnames(dataNormImpCom)
groups = label#$Code
groups
yyt<-yyt[,rownames(groups)]
#?ROTS
results = ROTS(data = dataNormImpCom, groups = as.numeric(groups$Code2) , B = 500 , K = 1000 , seed = 42)
names(results)
fdrThr<-0.2
uniP<-summary(results, fdr = fdrThr)
plot(results, fdr = fdrThr, type = "volcano")
#plot(results, fdr = fdrThr, type = "heatmap")
?plot
results
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
#BiocManager::install("ROTS")
dataNormImpCom<-yyt
#dataNormImpCom[dataNormImpCom==0]=5
summary(dataNormImpCom)
library(ROTS)
input = dataNormImpCom
colnames(dataNormImpCom)<-sub("X","",colnames(dataNormImpCom))
colnames(dataNormImpCom)
groups = label#$Code
groups
yyt<-yyt[,rownames(groups)]
#?ROTS
results = ROTS(data = dataNormImpCom, groups = as.numeric(groups$Code2) , B = 250 , K = 1000 , seed = 42)
names(results)
fdrThr<-0.2
uniP<-summary(results, fdr = fdrThr)
?plot
plot(results, fdr = fdrThr, type = "volcano")
#plot(results, fdr = fdrThr, type = "heatmap")
#?plot
plot(results, fdr = fdrThr, type = "volcano")
uniP
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
#BiocManager::install("ROTS")
dataNormImpCom<-yyt
#dataNormImpCom[dataNormImpCom==0]=5
summary(dataNormImpCom)
library(ROTS)
input = dataNormImpCom
colnames(dataNormImpCom)<-sub("X","",colnames(dataNormImpCom))
colnames(dataNormImpCom)
groups = label#$Code
groups
yyt<-yyt[,rownames(groups)]
#?ROTS
results = ROTS(data = dataNormImpCom, groups = as.numeric(groups$Code2) , B = 250 , K = 1000 , seed = 42)
names(results)
fdrThr<-0.2
uniP<-summary(results, fdr = fdrThr)
#?plot
plot(results, fdr = fdrThr, type = "volcano")
#plot(results, fdr = fdrThr, type = "heatmap")
#?plot
plot(results, fdr = fdrThr, type = "volcano")
results
uniP
#log.yyt=log(yyt[,1:8]+1)
#yyt.pca=prcomp(log.yyt,center=TRUE,scale.=TRUE)
yyt.pca=prcomp((yyt),center=TRUE,scale.=TRUE)
autoplot(yyt.pca,data=(yyt))#,colour=t(label$Code))
#log.yyt=log(yyt[,1:8]+1)
#yyt.pca=prcomp(log.yyt,center=TRUE,scale.=TRUE)
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
autoplot(yyt.pca,data=t(yyt))#,colour=t(label$Code))
autoplot(yyt.pca,data=(yyt))#,colour=t(label$Code))
#log.yyt=log(yyt[,1:8]+1)
#yyt.pca=prcomp(log.yyt,center=TRUE,scale.=TRUE)
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
colnames(yyt)
groups
colnames(yyt)
library(ggfortify)
biplot(yyt.pca)
autoplot(yyt.pca,data=(yyt))#,colour=t(label$Code))
biplot(t(yyt.pca))
#log.yyt=log(yyt[,1:8]+1)
#yyt.pca=prcomp(log.yyt,center=TRUE,scale.=TRUE)
yyt.pca=prcomp((yyt),center=TRUE,scale.=TRUE)
biplot(yyt.pca)
#log.yyt=log(yyt[,1:8]+1)
#yyt.pca=prcomp(log.yyt,center=TRUE,scale.=TRUE)
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
biplot(yyt.pca)
#log.yyt=log(yyt[,1:8]+1)
#yyt.pca=prcomp(log.yyt,center=TRUE,scale.=TRUE)
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
#log.yyt=log(yyt[,1:8]+1)
#yyt.pca=prcomp(log.yyt,center=TRUE,scale.=TRUE)
yyt.pca=prcomp((yyt),center=TRUE,scale.=TRUE)
autoplot(yyt.pca,data=(yyt))#,colour=t(label$Code))
biplot(yyt.pca)
autoplot(yyt.pca,data=(yyt),colour=t(label$Code))
autoplot(yyt.pca,data=(yyt),colour=(label$Code))
autoplot(yyt.pca,data=(yyt),colour=(groups$Code))
biplot(yyt.pca)
y<-as.matrix(yyt)
summary(y)
pheatmap(y,scale="row")
#install.packages('pheatmap')
library(pheatmap)
pheatmap(y,scale="row")
pheatmap(y)#,scale="row")
#install.packages('quantable')
library(quantable)
y=robustscale(y)
y$data[is.na(y$data)]<-0
pheatmap(y$data,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)
pheatmap(y$data,scale="row",clustering_distance_rows = "manhattan",clustering_distance_cols = "manhattan",fontsize_row=6,annotation_col = label)
set.seed(100)
yyt=as.data.frame(yyt)
ind=sample(2,nrow(yyt),replace=TRUE,prob=c(0.80,0.20))
yyt.training=yyt[ind==1,]
yyt.test=yyt[ind==2,]
yyt.test
set.seed(100)
set.seed(42)
yyt=as.data.frame(yyt)
ind=sample(2,nrow(yyt),replace=TRUE,prob=c(0.75,0.25))
yyt.training=yyt[ind==1,]
yyt.test=yyt[ind==2,]
yyt.test
y$data
group$Code2)
group$Code2
groups$Code2
yy<-rbind(y$data,groups$Code2)
yy
yyt<-t(yy)
summary(yyt)
yyt=as.data.frame(yyt)
ind=sample(2,nrow(yyt),replace=TRUE,prob=c(0.75,0.25))
yyt.training=yyt[ind==1,]
yyt.test=yyt[ind==2,]
View(yyt)
tree=rpart(data=yyt.training,V4447~.,method="class",control=rpart.control(minsplit=10,minbucket=5),parms=list(split="information"))
library("rpart")
library("rpart.plot")
library("randomForest")
tree=rpart(data=yyt.training,V4447~.,method="class",control=rpart.control(minsplit=10,minbucket=5),parms=list(split="information"))
rpart.plot(tree,main="Classification tree for the yyt data (using 80% of data as training set)",extra=101)
rpart.plot(tree,main="Classification tree for the yyt data (using 75% of data as training set)",extra=101)
library(randomForest)
set.seed(42)
set.seed(42)
#yyt=as.data.frame(yyt)
random_forest=randomForest(data=yyt.training,V4447~.,impurity='gini',ntree=200,replace=TRUE)
#yyt=as.data.frame(yyt)
colnames(yyt) <- gsub(";", "_", colnames(yyt))
colnames(yyt) <- gsub("-", "__", colnames(yyt))
summary(yyt)
random_forest=randomForest(data=yyt.training,V4447~.,impurity='gini',ntree=200,replace=TRUE)
colnames(yyt) <- gsub(";", "_", colnames(yyt))
colnames(yyt) <- gsub("-", "__", colnames(yyt))
summary(yyt)
yyt=as.data.frame(yyt)
ind=sample(2,nrow(yyt),replace=TRUE,prob=c(0.75,0.25))
yyt.training=yyt[ind==1,]
yyt.test=yyt[ind==2,]
library(randomForest)
set.seed(42)
#yyt=as.data.frame(yyt)
random_forest=randomForest(data=yyt.training,V4447~.,impurity='gini',ntree=200,replace=TRUE)
print(random_forest)
#yyt=as.data.frame(yyt)
random_forest=randomForest(data=yyt.training,V4447~.,impurity='gini',ntree=200,replace=TRUE)
set.seed(42)
yy<-rbind(y$data,groups$Code2)
yyt<-t(yy)
summary(yyt)
yyt=as.data.frame(yyt)
colnames(yyt) <- gsub(";", "_", colnames(yyt))
colnames(yyt) <- gsub(":", "__", colnames(yyt))
colnames(yyt) <- gsub("-", "___", colnames(yyt))
summary(yyt)
ind=sample(2,nrow(yyt),replace=TRUE,prob=c(0.75,0.25))
yyt.training=yyt[ind==1,]
yyt.test=yyt[ind==2,]
tree=rpart(data=yyt.training,V4447~.,method="class",control=rpart.control(minsplit=10,minbucket=5),parms=list(split="information"))
rpart.plot(tree,main="Classification tree for the yyt data (using 75% of data as training set)",extra=101)
library(randomForest)
set.seed(42)
#yyt=as.data.frame(yyt)
random_forest=randomForest(data=yyt.training,V4447~.,impurity='gini',ntree=200,replace=TRUE)
print(random_forest)
plot(random_forest)
legend("top",cex=0.8,legend=colnames(random_forest$err.rate),lty=c(1,2,3),col=c(1,2,3),horiz=T)
predictions=predict(random_forest,newdata=yyt.training,type="class")
actuals=yyt.training$class
table(actuals,predictions)
actuals=yyt.training$V4447
table(actuals,predictions)
View(yyt)
yyt.test
View(yyt.training)
View(yyt.test)
sort(importance(random_forest))
varImpPlot(random_forest)
inpF<-"L:/promec/Animesh/MK/proteinGroups.txt"
data<-read.table(inpF,header=T,sep="\t",row.names = 1)
summary(data)
inpL<-"L:/promec/Animesh/MK/Class.txt"
label<-read.table(inpL,header=T,row.names=1,sep="\t")
summary(label)
#colnames(label)=sub("\\-[0-9]+","",colnames(label))
colnames(label)
fileP<-"L:/promec/Animesh/api5000/"
fileS<-list.files(path=fileP, pattern="*.txt", full.names=TRUE, recursive=FALSE)
fileS
fileP<-"L:/promec/Animesh/api5000/"
fileS<-list.files(path=fileP, pattern="*.txt", full.names=TRUE, recursive=FALSE)
for(i in fileS){
print(i)
data <- read.table(i)
summary/data)
#data.pca.plot<-biplot(data.pca,col=c(1,8), cex=c(0.5, 0.4))
#ggsave(file=paste0(fileP,"sheet",numSheet,"WithPhylum.svg"), plot=biplot(data.pca,col=c(1,8), cex=c(0.5, 0.4)), width=6, height=6)
#data.pca.plot<-autoplot(data.pca,label = TRUE, label.size = 2,loadings = TRUE, loadings.label = TRUE, loadings.label.size  =3,colour = rownames(data))#,colour=rownames(t(data)))#,main="dataset")
#ggsave(file=paste0(fileP,"sheet",numSheet,".svg"), plot=data.pca.plot, width=6, height=6)
}
fileP<-"L:/promec/Animesh/api5000/"
fileS<-list.files(path=fileP, pattern="*.txt", full.names=TRUE, recursive=FALSE)
for(i in fileS){
print(i)
data <- read.table(i)
summary(data)
#data.pca.plot<-biplot(data.pca,col=c(1,8), cex=c(0.5, 0.4))
#ggsave(file=paste0(fileP,"sheet",numSheet,"WithPhylum.svg"), plot=biplot(data.pca,col=c(1,8), cex=c(0.5, 0.4)), width=6, height=6)
#data.pca.plot<-autoplot(data.pca,label = TRUE, label.size = 2,loadings = TRUE, loadings.label = TRUE, loadings.label.size  =3,colour = rownames(data))#,colour=rownames(t(data)))#,main="dataset")
#ggsave(file=paste0(fileP,"sheet",numSheet,".svg"), plot=data.pca.plot, width=6, height=6)
}
data <- read.table(i,sep="\t", header=F)
summary(data)
fileP<-"L:/promec/Animesh/api5000/"
fileS<-list.files(path=fileP, pattern="*.txt", full.names=TRUE, recursive=FALSE)
for(i in fileS){
print(i)
data <- read.table(i,sep="\t", header=F)
summary(data)
#data.pca.plot<-biplot(data.pca,col=c(1,8), cex=c(0.5, 0.4))
#ggsave(file=paste0(fileP,"sheet",numSheet,"WithPhylum.svg"), plot=biplot(data.pca,col=c(1,8), cex=c(0.5, 0.4)), width=6, height=6)
#data.pca.plot<-autoplot(data.pca,label = TRUE, label.size = 2,loadings = TRUE, loadings.label = TRUE, loadings.label.size  =3,colour = rownames(data))#,colour=rownames(t(data)))#,main="dataset")
#ggsave(file=paste0(fileP,"sheet",numSheet,".svg"), plot=data.pca.plot, width=6, height=6)
}
fileP<-"L:/promec/Animesh/api5000/"
fileS<-list.files(path=fileP, pattern="*.txt", full.names=TRUE, recursive=FALSE)
for(i in fileS){
print(i)
data <- read.table(i,sep="\t", header=F)
print(summary(data))
#data.pca.plot<-biplot(data.pca,col=c(1,8), cex=c(0.5, 0.4))
#ggsave(file=paste0(fileP,"sheet",numSheet,"WithPhylum.svg"), plot=biplot(data.pca,col=c(1,8), cex=c(0.5, 0.4)), width=6, height=6)
#data.pca.plot<-autoplot(data.pca,label = TRUE, label.size = 2,loadings = TRUE, loadings.label = TRUE, loadings.label.size  =3,colour = rownames(data))#,colour=rownames(t(data)))#,main="dataset")
#ggsave(file=paste0(fileP,"sheet",numSheet,".svg"), plot=data.pca.plot, width=6, height=6)
}
plot(data)
library(ggplot2)
ggplot(data) + geom_line()
ggplot(data) + geom_line(data$V1,data$V2)
ggplot(data)# + geom_line(data$V1,data$V2)
print(ggplot(data))# + geom_line(data$V1,data$V2)
print(ggplot(data),aes(data$V1,data$V2))
aes(data$V1,data$V2)
print(ggplot(data)+aes(data$V1,data$V2))
plot(data)
plot(data,type = "o")  #print(ggplot(data)+aes(data$V1,data$V2))
plot(data,type = "l")  #print(ggplot(data)+aes(data$V1,data$V2))
data
plot(data,type = "l")  #print(ggplot(data)+aes(data$V1,data$V2))
print(i)
library(ggplot2)
fileP<-"L:/promec/Animesh/api5000/"
fileS<-list.files(path=fileP, pattern="*.txt", full.names=TRUE, recursive=FALSE)
for(i in fileS){
print(i)
data <- read.table(i,sep="\t", header=F)
print(summary(data))
plot(data,type = "l")  #print(ggplot(data)+aes(data$V1,data$V2))
#data.pca.plot<-biplot(data.pca,col=c(1,8), cex=c(0.5, 0.4))
#ggsave(file=paste0(fileP,"sheet",numSheet,"WithPhylum.svg"), plot=biplot(data.pca,col=c(1,8), cex=c(0.5, 0.4)), width=6, height=6)
#data.pca.plot<-autoplot(data.pca,label = TRUE, label.size = 2,loadings = TRUE, loadings.label = TRUE, loadings.label.size  =3,colour = rownames(data))#,colour=rownames(t(data)))#,main="dataset")
#ggsave(file=paste0(fileP,"sheet",numSheet,".svg"), plot=data.pca.plot, width=6, height=6)
}
plot(t(data),type = "l")  #print(ggplot(data)+aes(data$V1,data$V2))
plot(data,type = "l")  #print(ggplot(data)+aes(data$V1,data$V2))
library(ggplot2)
fileP<-"L:/promec/Animesh/api5000/"
fileS<-list.files(path=fileP, pattern="*.txt", full.names=TRUE, recursive=FALSE)
for(i in fileS){
print(i)
data <- read.table(i,sep="\t", header=F)
print(summary(data))
plot(data,type = "l")  #print(ggplot(data)+aes(data$V1,data$V2))
ggsave(file=paste0(fileP,".svg"), plot=plot(data,type = "l"), width=6, height=6)
}
library(ggplot2)
fileP<-"L:/promec/Animesh/api5000/"
fileS<-list.files(path=fileP, pattern="*.txt", full.names=TRUE, recursive=FALSE)
for(i in fileS){
print(i)
data <- read.table(i,sep="\t", header=F)
print(summary(data))
plot(data,type = "l")  #print(ggplot(data)+aes(data$V1,data$V2))
ggsave(file=paste0(i,".svg"), plot=plot(data,type = "l"), width=6, height=6)
}
#colnames(label)=sub("\\-[0-9]+","",colnames(label))
#colnames(label)
summary(label)
inpF<-"L:/promec/Animesh/MK/proteinGroups.txt"
data<-read.table(inpF,header=T,sep="\t",row.names = 1)
summary(data)
inpL<-"L:/promec/Animesh/MK/Class.txt"
label<-read.table(inpL,header=T,row.names=1,sep="\t")
#colnames(label)=sub("\\-[0-9]+","",colnames(label))
#colnames(label)
summary(label)
yyt=as.matrix(data[202:202+30])
summary(yyt)
yyt=as.matrix(data[,202:202+30])
summary(yyt)
yyt=as.matrix(data[,202:231])
summary(yyt)
yyt<-yyt[,rownames(label)]
rownames(label)
colnames(yyt)
label<-read.table(inpL,header=T,row.names=1,sep="\t", stringsAsFactors = T)
#colnames(label)=sub("\\-[0-9]+","",colnames(label))
#colnames(label)
summary(label)
label<-read.table(inpL,header=T,row.names=1,sep="\t", stringsAsFactors = F)
#colnames(label)=sub("\\-[0-9]+","",colnames(label))
#colnames(label)
summary(label)
label<-read.table(inpL,header=T,row.names=1,sep="\t", colClasses=c(rep("factor",3)))
#colnames(label)=sub("\\-[0-9]+","",colnames(label))
#colnames(label)
summary(label)
label
yyt<-yyt[,rownames(label)]
rownames(label)
colnames(yyt)
colnames(yyt)<-sub("LFQ.intensity.","",colnames(yyt))
colnames(yyt)
yyt=as.matrix(data[,201:230])
summary(yyt)
colnames(yyt)<-sub("LFQ.intensity.","",colnames(yyt))
colnames(yyt)
yyt<-yyt[,rownames(label)]
colnames(yyt)
View(yyt)
library(ggfortify)
#log.yyt=log(yyt[,1:8]+1)
#yyt.pca=prcomp(log.yyt,center=TRUE,scale.=TRUE)
yyt.pca=prcomp((yyt),center=TRUE,scale.=TRUE)
autoplot(yyt.pca,data=(yyt),colour=label)
autoplot(yyt.pca,data=(yyt),colour=label$Treatment)
autoplot(yyt.pca,data=t(yyt),colour=label$Treatment)
biplot(yyt.pca)
#log.yyt=log(yyt[,1:8]+1)
#yyt.pca=prcomp(log.yyt,center=TRUE,scale.=TRUE)
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
biplot(yyt.pca)
colnames(yyt)
yyt<-log2(yyt)
yyt[is.na(yyt)]<-0
yyt<-yyt[,-(which(colSums(yyt) == 0))]
yyt<-yyt[-(which(rowSums(yyt) == 0)),]
yyt=as.matrix(data[,201:230])
yyt<-log2(yyt)
yyt[is.na(yyt)]<-0
yyt<-yyt[,-(which(colSums(yyt) == 0))]
#yyt<-yyt[-(which(rowSums(yyt) == 0)),]
summary(yyt)
yyt=as.matrix(data[,201:230])
yyt<-log2(yyt)
yyt[is.na(yyt)]<-0
yyt<-yyt[,-(which(colSums(yyt) == 0))]
yyt=as.matrix(data[,201:230])
yyt<-log2(yyt)
yyt[is.na(yyt)]<-0
#yyt<-yyt[,-(which(colSums(yyt) == 0))]
#yyt<-yyt[-(which(rowSums(yyt) == 0)),]
summary(yyt)
colnames(yyt)<-sub("LFQ.intensity.","",colnames(yyt))
colnames(yyt)
yyt<-yyt[,rownames(label)]
colnames(yyt)
library(ggfortify)
#log.yyt=log(yyt[,1:8]+1)
#yyt.pca=prcomp(log.yyt,center=TRUE,scale.=TRUE)
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
yyt[is.na(yyt)]<-0
#yyt<-yyt[,-(which(colSums(yyt) == 0))]
#yyt<-yyt[-(which(rowSums(yyt) == 0)),]
summary(yyt)
yyt[is.infinite(yyt)]<-0
#yyt<-yyt[,-(which(colSums(yyt) == 0))]
#yyt<-yyt[-(which(rowSums(yyt) == 0)),]
summary(yyt)
#log.yyt=log(yyt[,1:8]+1)
#yyt.pca=prcomp(log.yyt,center=TRUE,scale.=TRUE)
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
yyt[-(which(rowSums(yyt) == 0)),]
#yyt<-yyt[,-(which(colSums(yyt) == 0))]
yyt<-yyt[-(which(rowSums(yyt) == 0)),]
#log.yyt=log(yyt[,1:8]+1)
#yyt.pca=prcomp(log.yyt,center=TRUE,scale.=TRUE)
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
autoplot(yyt.pca,data=t(yyt),colour=label$Treatment)
autoplot(yyt.pca,data=t(yyt))
biplot(yyt.pca)
#install.packages('pheatmap')
library(pheatmap)
pheatmap(y)#,scale="row")
y<-as.matrix(yyt)
summary(y)
pheatmap(y)#,scale="row")
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,annotation_col = label)
?pheatmap
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,annotation_col = label,annotation_names_row=0)
2+2
?pheatmap
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,annotation_col = label$Location,show_rownames=F)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,annotation_col = label,show_rownames=F)
ggsave(file=paste0(inpF,"corrcoefED.svg"), plot=svgPHC, width=6, height=6)
yyt=as.matrix(data[,201:230])
yyt[is.na(yyt)]<-0
yyt<-log2(yyt)
yyt[is.infinite(yyt)]<-0
#yyt<-yyt[,-(which(colSums(yyt) == 0))]
yyt<-yyt[-(which(rowSums(yyt) == 0)),]
summary(yyt)
