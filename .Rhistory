y[is.na(y)]<-0
#row.names(y)<-dsub$Fasta.headers
rn<-sub(";","",dsub$Fasta.headers)
#rn<-strsplit(rn, "apolipoprotein")
rn<-strsplit(rn, " ")
#row.names(y)<-paste(sapply(rn, "[", 1),sapply(rn, "[", 3),sapply(rn, "[", 6))
row.names(y)<-paste(sapply(rn, "[", 1),sapply(rn, "[", 2),sapply(rn, "[", 3),sapply(rn, "[", 4),sapply(rn, "[", 6))
summary(y)
#svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,cluster_cols=FALSE)#,annotation_col = label,show_rownames=F)
#ggsave(file=paste0(inpF,"corrcoefED.svg"), plot=svgPHC, width=6, height=6)
ggsave(file=paste0(inpD,hdr,"clusterPlot.frac.svg"),plot=svgPHC)#,  width=6, height=6)
write.csv(y,file=paste0(inpD,hdr,"tTestBH.fraction.y.csv"))
#install.packages('pheatmap')
library(pheatmap)
#?pheatmap
y<-as.matrix(dsub[,grepl("Fraction\\.[0-9]+",colnames(dsub))])
#yy<-as.matrix(data[grepl("albumin",data$Fasta.headers),])
y[is.na(y)]<-0
#row.names(y)<-dsub$Fasta.headers
rn<-sub(";","",dsub$Fasta.headers)
#rn<-strsplit(rn, "apolipoprotein")
rn<-strsplit(rn, " ")
#row.names(y)<-paste(sapply(rn, "[", 1),sapply(rn, "[", 3),sapply(rn, "[", 6))
row.names(y)<-paste(sapply(rn, "[", 1),sapply(rn, "[", 2),sapply(rn, "[", 3),sapply(rn, "[", 5),sapply(rn, "[", 6))
summary(y)
#svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,cluster_cols=FALSE)#,annotation_col = label,show_rownames=F)
#ggsave(file=paste0(inpF,"corrcoefED.svg"), plot=svgPHC, width=6, height=6)
ggsave(file=paste0(inpD,hdr,"clusterPlot.frac.svg"),plot=svgPHC)#,  width=6, height=6)
write.csv(y,file=paste0(inpD,hdr,"tTestBH.fraction.y.csv"))
#dsub=data[grep("apo",data$Fasta.headers),]
#dsub=data[(grepl("apo",data$Fasta.headers))|(grepl("alb",data$Fasta.headers)),]
#dsub=data[((grepl("apo",data$Fasta.headers))|(grepl("alb",data$Fasta.headers)))&grepl("tshawytscha",data$Fasta.headers),]
dsub=data[((grepl(" apolipoprotein ",data$Fasta.headers))|(grepl(" albumin ",data$Fasta.headers)))&grepl(" tshawytscha ",data$Fasta.headers),]
dsub=merge(dsub,ttest.results,by="row.names")
rn<-strsplit(dsub$Row.names, ';')
row.names(dsub) <- sapply(rn, "[", 1)#rn[[1]]
g = ggplot(ttest.results,aes(logFC,-log10(P.Value)))+geom_point(aes(color=adj.pval),size=0.15) + theme_bw(base_size=10) +geom_text(data=dsub,aes(label=row.names(dsub)), vjust=0.5, size=1.5) + xlab("Log2 Fold Change (Red-White)")  + ylab("-Log10 P-value") + ggtitle("Differentially expressed proteins") + scale_size_area()+scale_color_gradient(low="#FF9933", high="#99CC66")
plot(g)
write.csv(dsub,file=paste0(inpD,hdr,"tTestBH.fraction.dsub.csv"))
ggsave(file=paste0(inpD,hdr,"volcanoPlot.frac.svg"),plot=g)#,  width=6, height=6)
#install.packages('pheatmap')
library(pheatmap)
#?pheatmap
y<-as.matrix(dsub[,grepl("Fraction\\.[0-9]+",colnames(dsub))])
#yy<-as.matrix(data[grepl("albumin",data$Fasta.headers),])
y[is.na(y)]<-0
#row.names(y)<-dsub$Fasta.headers
rn<-sub(";","",dsub$Fasta.headers)
#rn<-strsplit(rn, "apolipoprotein")
rn<-strsplit(rn, " ")
#row.names(y)<-paste(sapply(rn, "[", 1),sapply(rn, "[", 3),sapply(rn, "[", 6))
row.names(y)<-paste(sapply(rn, "[", 1),sapply(rn, "[", 2),sapply(rn, "[", 4),sapply(rn, "[", 5),sapply(rn, "[", 6))
summary(y)
#svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,cluster_cols=FALSE)#,annotation_col = label,show_rownames=F)
#ggsave(file=paste0(inpF,"corrcoefED.svg"), plot=svgPHC, width=6, height=6)
ggsave(file=paste0(inpD,hdr,"clusterPlot.frac.svg"),plot=svgPHC)#,  width=6, height=6)
write.csv(y,file=paste0(inpD,hdr,"tTestBH.fraction.y.csv"))
#install.packages('pheatmap')
library(pheatmap)
#?pheatmap
y<-as.matrix(dsub[,grepl("Fraction\\.[0-9]+",colnames(dsub))])
#yy<-as.matrix(data[grepl("albumin",data$Fasta.headers),])
y[is.na(y)]<-0
#row.names(y)<-dsub$Fasta.headers
rn<-sub(";","",dsub$Fasta.headers)
#rn<-strsplit(rn, "apolipoprotein")
rn<-strsplit(rn, " ")
#row.names(y)<-paste(sapply(rn, "[", 1),sapply(rn, "[", 3),sapply(rn, "[", 6))
row.names(y)<-paste(sapply(rn, "[", 1),sapply(rn, "[", 2),sapply(rn, "[", 4),sapply(rn, "[", 5),sapply(rn, "[", 6))
summary(y)
#svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,cluster_cols=FALSE)#,annotation_col = label,show_rownames=F)
#ggsave(file=paste0(inpF,"corrcoefED.svg"), plot=svgPHC, width=6, height=6)
ggsave(file=paste0(inpD,hdr,"clusterPlot.frac.svg"),plot=svgPHC)#,  width=6, height=6)
write.csv(y,file=paste0(inpD,hdr,"tTestBH.fraction.y.csv"))
#dsub=data[grep("apo",data$Fasta.headers),]
#dsub=data[(grepl("apo",data$Fasta.headers))|(grepl("alb",data$Fasta.headers)),]
#dsub=data[((grepl("apo",data$Fasta.headers))|(grepl("alb",data$Fasta.headers)))&grepl("tshawytscha",data$Fasta.headers),]
dsub=data[((grepl("apolipoprotein",data$Fasta.headers))|(grepl(" albumin",data$Fasta.headers)))&grepl("tshawytscha",data$Fasta.headers),]
dsub=merge(dsub,ttest.results,by="row.names")
rn<-strsplit(dsub$Row.names, ';')
row.names(dsub) <- sapply(rn, "[", 1)#rn[[1]]
g = ggplot(ttest.results,aes(logFC,-log10(P.Value)))+geom_point(aes(color=adj.pval),size=0.15) + theme_bw(base_size=10) +geom_text(data=dsub,aes(label=row.names(dsub)), vjust=0.5, size=1.5) + xlab("Log2 Fold Change (Red-White)")  + ylab("-Log10 P-value") + ggtitle("Differentially expressed proteins") + scale_size_area()+scale_color_gradient(low="#FF9933", high="#99CC66")
plot(g)
write.csv(dsub,file=paste0(inpD,hdr,"tTestBH.fraction.dsub.csv"))
ggsave(file=paste0(inpD,hdr,"volcanoPlot.frac.svg"),plot=g)#,  width=6, height=6)
#install.packages('pheatmap')
library(pheatmap)
#?pheatmap
y<-as.matrix(dsub[,grepl("Fraction\\.[0-9]+",colnames(dsub))])
#yy<-as.matrix(data[grepl("albumin",data$Fasta.headers),])
y[is.na(y)]<-0
#row.names(y)<-dsub$Fasta.headers
rn<-sub(";","",dsub$Fasta.headers)
#rn<-strsplit(rn, "apolipoprotein")
rn<-strsplit(rn, " ")
#row.names(y)<-paste(sapply(rn, "[", 1),sapply(rn, "[", 3),sapply(rn, "[", 6))
row.names(y)<-paste(sapply(rn, "[", 1),sapply(rn, "[", 2),sapply(rn, "[", 4),sapply(rn, "[", 5),sapply(rn, "[", 6))
summary(y)
#svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,cluster_cols=FALSE)#,annotation_col = label,show_rownames=F)
#ggsave(file=paste0(inpF,"corrcoefED.svg"), plot=svgPHC, width=6, height=6)
ggsave(file=paste0(inpD,hdr,"clusterPlot.frac.svg"),plot=svgPHC)#,  width=6, height=6)
write.csv(y,file=paste0(inpD,hdr,"tTestBH.fraction.y.csv"))
#install.packages('pheatmap')
library(pheatmap)
#?pheatmap
y<-as.matrix(dsub[,grepl("Fraction\\.[0-9]+",colnames(dsub))])
#yy<-as.matrix(data[grepl("albumin",data$Fasta.headers),])
y[is.na(y)]<-0
#row.names(y)<-dsub$Fasta.headers
rn<-sub(";","",dsub$Fasta.headers)
#rn<-strsplit(rn, "apolipoprotein")
rn<-strsplit(rn, " ")
#row.names(y)<-paste(sapply(rn, "[", 1),sapply(rn, "[", 3),sapply(rn, "[", 6))
row.names(y)<-paste(sapply(rn, "[", 1),sapply(rn, "[", 2),sapply(rn, "[", 4),sapply(rn, "[", 5),sapply(rn, "[", 3))
summary(y)
#svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,cluster_cols=FALSE)#,annotation_col = label,show_rownames=F)
#ggsave(file=paste0(inpF,"corrcoefED.svg"), plot=svgPHC, width=6, height=6)
ggsave(file=paste0(inpD,hdr,"clusterPlot.frac.svg"),plot=svgPHC)#,  width=6, height=6)
write.csv(y,file=paste0(inpD,hdr,"tTestBH.fraction.y.csv"))
#install.packages('pheatmap')
library(pheatmap)
#?pheatmap
y<-as.matrix(dsub[,grepl("Fraction\\.[0-9]+",colnames(dsub))])
#yy<-as.matrix(data[grepl("albumin",data$Fasta.headers),])
y[is.na(y)]<-0
#row.names(y)<-dsub$Fasta.headers
rn<-sub(";","",dsub$Fasta.headers)
#rn<-strsplit(rn, "apolipoprotein")
rn<-strsplit(rn, " ")
#row.names(y)<-paste(sapply(rn, "[", 1),sapply(rn, "[", 3),sapply(rn, "[", 6))
row.names(y)<-paste(sapply(rn, "[", 1),sapply(rn, "[", 6),sapply(rn, "[", 4),sapply(rn, "[", 5),sapply(rn, "[", 3))
summary(y)
#svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,cluster_cols=FALSE)#,annotation_col = label,show_rownames=F)
#ggsave(file=paste0(inpF,"corrcoefED.svg"), plot=svgPHC, width=6, height=6)
ggsave(file=paste0(inpD,hdr,"clusterPlot.frac.svg"),plot=svgPHC)#,  width=6, height=6)
write.csv(y,file=paste0(inpD,hdr,"tTestBH.fraction.y.csv"))
plot(logFC,-log10(pVal),col="orange",)
library(keras)
fileP<-"L:\promec\Animesh\Lymphoma"
fileN<-"Sel66.txt"
lym<-read.table(paste0(fileP, fileN),row.names = 1, header=T)
fileP<-"L:\promec\Animesh\Lymphoma"
fileN<-"Sel66.txt"
fileP<-"L:\\promec\\Animesh\\Lymphoma"
fileN<-"Sel66.txt"
lym<-read.table(paste0(fileP, fileN),row.names = 1, header=T)
fileP<-"L:\\promec\\Animesh\\Lymphoma\\"
fileN<-"Sel66.txt"
lym<-read.table(paste0(fileP, fileN),row.names = 1, header=T)
fileC<-"Code.txt"
code<-read.table(paste0(fileP, fileC),row.names = 1, header=T)
summary(lym)
library(quantable)
y<-lym
y=robustscale(y)
install.packages(quantable)
install.packages('quantable')
library(quantable)
y<-lym
y=robustscale(y)
y$data[is.na(y$data)]<-0
names(y$data)=sub("X","",names(y$data))
colnames(y$data)
yy<-rbind(y$data,code$Code)
yyt<-t(yy)
colnames(yyt) <- gsub(";", "_", colnames(yyt))
colnames(yyt) <- gsub("-", "__", colnames(yyt))
summary(yyt)
#yyt[,67]=as.numeric(yyt[,67]-1)
colnames(yyt)[67] <- "class"
summary(yyt)
plot(yyt[,67])
```{r tree}
library("rpart")
library("rpart.plot")
library("randomForest")
install.packages("rpart.plot")
library("rpart.plot")
library("randomForest")
library("rpart")
set.seed(100)
yyt=as.data.frame(yyt)
colnames(yyt)[67] <- "class"
yyt[,67]=as.factor(yyt[,67])
ind=sample(2,nrow(yyt),replace=TRUE,prob=c(0.80,0.20))
yyt.training=yyt[ind==1,]
yyt.test=yyt[ind==2,]
tree=rpart(data=yyt.training,class~.,method="class",control=rpart.control(minsplit=10,minbucket=5),parms=list(split="information"))
rpart.plot(tree,main="Classification tree for the yyt data (using 80% of data as training set)",extra=101)
qplot(PTBP2,GALNT2,data=yyt,colour=class,size=I(3))
#library(ggplot2)
qplot(PTBP2,GALNT2,data=yyt,colour=class,size=I(3))
predictions=predict(tree,newdata=yyt.training,type="class")
actuals=yyt.training$class
table(actuals,predictions)
predictions=predict(tree,newdata=yyt.test,type="class")
actuals=yyt.test$class
confusion.matrix=table(actuals,predictions)
print(confusion.matrix)
accuracy=sum(diag(confusion.matrix))/sum(confusion.matrix)
print(accuracy)
tree=rpart(data=yyt,class~.,method="class",control=rpart.control(minsplit=1,minbucket=1,cp=0.000001),parms=list(split="information"))
rpart.plot(tree,main="Biggest Tree",extra=101)
printcp(tree)
plotcp(tree)
ptree=prune(tree,cp=2.0e-02)
rpart.plot(ptree,main="Pruned Tree",extra=101)
qplot(ALDH1B1,PTBP2,data=yyt,colour=class,size=I(3))
```{r randomtree}
library(randomForest)
set.seed(100)
#yyt=as.data.frame(yyt)
random_forest=randomForest(data=yyt.training,class~.,impurity='gini',ntree=200,replace=TRUE)
print(random_forest)
plot(random_forest)
legend("top",cex=0.8,legend=colnames(random_forest$err.rate),lty=c(1,2,3),col=c(1,2,3),horiz=T)
random_forest=randomForest(data=yyt.training,class~.,impurity='gini',ntree=25,replace=TRUE)
predictions=predict(random_forest,newdata=yyt.training,type="class")
actuals=yyt.training$class
table(actuals,predictions)
predictions=predict(random_forest,newdata=yyt.test,type="class")
actuals=yyt.test$class
confusion.matrix=table(actuals,predictions)
print(confusion.matrix)
accuracy=sum(diag(confusion.matrix))/sum(confusion.matrix)
print(accuracy)
sort(importance(random_forest))
varImpPlot(random_forest)
# Chunk 1: data
fileP<-"L:\\promec\\Animesh\\Lymphoma\\"
fileN<-"Sel66.txt"
lym<-read.table(paste0(fileP, fileN),row.names = 1, header=T)
fileC<-"Code.txt"
code<-read.table(paste0(fileP, fileC),row.names = 1, header=T)
summary(lym)
install.packages('quantable')
library(quantable)
y<-lym
y=robustscale(y)
y$data[is.na(y$data)]<-0
names(y$data)=sub("X","",names(y$data))
colnames(y$data)
yy<-rbind(y$data,code$Code)
yyt<-t(yy)
colnames(yyt) <- gsub(";", "_", colnames(yyt))
colnames(yyt) <- gsub("-", "__", colnames(yyt))
summary(yyt)
#yyt[,67]=as.numeric(yyt[,67]-1)
colnames(yyt)[67] <- "class"
summary(yyt)
plot(yyt[,67])
# Chunk 2: tree
install.packages("rpart.plot")
library("rpart.plot")
library("rpart")
library("randomForest")
set.seed(100)
yyt=as.data.frame(yyt)
colnames(yyt)[67] <- "class"
yyt[,67]=as.factor(yyt[,67])
ind=sample(2,nrow(yyt),replace=TRUE,prob=c(0.80,0.20))
yyt.training=yyt[ind==1,]
yyt.test=yyt[ind==2,]
tree=rpart(data=yyt.training,class~.,method="class",control=rpart.control(minsplit=10,minbucket=5),parms=list(split="information"))
rpart.plot(tree,main="Classification tree for the yyt data (using 80% of data as training set)",extra=101)
#library(ggplot2)
qplot(PTBP2,GALNT2,data=yyt,colour=class,size=I(3))
# Chunk 3: tree - pred
predictions=predict(tree,newdata=yyt.training,type="class")
actuals=yyt.training$class
table(actuals,predictions)
predictions=predict(tree,newdata=yyt.test,type="class")
actuals=yyt.test$class
confusion.matrix=table(actuals,predictions)
print(confusion.matrix)
accuracy=sum(diag(confusion.matrix))/sum(confusion.matrix)
print(accuracy)
tree=rpart(data=yyt,class~.,method="class",control=rpart.control(minsplit=1,minbucket=1,cp=0.000001),parms=list(split="information"))
rpart.plot(tree,main="Biggest Tree",extra=101)
printcp(tree)
plotcp(tree)
ptree=prune(tree,cp=2.0e-02)
rpart.plot(ptree,main="Pruned Tree",extra=101)
qplot(ALDH1B1,PTBP2,data=yyt,colour=class,size=I(3))
# Chunk 4: randomtree
library(randomForest)
set.seed(100)
#yyt=as.data.frame(yyt)
random_forest=randomForest(data=yyt.training,class~.,impurity='gini',ntree=200,replace=TRUE)
print(random_forest)
plot(random_forest)
legend("top",cex=0.8,legend=colnames(random_forest$err.rate),lty=c(1,2,3),col=c(1,2,3),horiz=T)
random_forest=randomForest(data=yyt.training,class~.,impurity='gini',ntree=25,replace=TRUE)
predictions=predict(random_forest,newdata=yyt.training,type="class")
actuals=yyt.training$class
table(actuals,predictions)
predictions=predict(random_forest,newdata=yyt.test,type="class")
actuals=yyt.test$class
confusion.matrix=table(actuals,predictions)
print(confusion.matrix)
accuracy=sum(diag(confusion.matrix))/sum(confusion.matrix)
print(accuracy)
sort(importance(random_forest))
varImpPlot(random_forest)
#qplot(RCN1,GALNT2,data=yyt,colour=class,size=I(3))
install.packages("quantable")
install.packages("rpart.plot")
inpD <-"L:/promec/Animesh/Odrun/"
data <- read.delim(paste0(inpD,"proteinGroupsTotalTtestMedian.txt"),sep="\t",header = T)
summary(data)
hdr="LFQ.intensity."
datLog2LFQ=log2(data[,grep(hdr, names(data))])
summary(datLog2LFQ)
hist(as.matrix(datLog2LFQ))
summary(data)
inpD <-"L:/promec/Animesh/Odrun/"
#data <- read.delim(paste0(inpD,"proteinGroupsTotalTtestMedian.txt"),sep="\t",header = T)
data <- read.delim(paste0(inpD,"combined/txt/proteinGroups.txt"),sep="\t",header = T)
summary(data)
View(data)
#hdr="LFQ.intensity."
hdr="Ratio.H.L."
datLog2LFQ=log2(data[,grep(hdr, names(data))])
summary(datLog2LFQ)
hist(as.matrix(datLog2LFQ))
#hdr="LFQ.intensity."
hdr="Ratio.H.L."
datLog2LFQ=log2(data[,grep(hdr, names(data))])
#hdr="LFQ.intensity."
hdr="Ratio.H.L.6"
datLog2LFQ=log2(data[,grep(hdr, names(data))])
summary(datLog2LFQ)
hist(as.matrix(datLog2LFQ))
View(datLog2LFQ)
datLog2LFQ=log2(datLog2LFQ[,-grep("ENDOSOME", names(datLog2LFQ))])
summary(datLog2LFQ)
hist(as.matrix(datLog2LFQ))
View(datLog2LFQ)
#hdr="LFQ.intensity."
hdr="Ratio.H.L.6"
datLog2LFQ=log2(data[,grep(hdr, names(data))])
summary(datLog2LFQ)
hist(as.matrix(datLog2LFQ))
samples="ENDOSOME"
datLog2LFQ=log2(datLog2LFQ[,-grep(samples, names(datLog2LFQ))])
summary(datLog2LFQ)
hist(as.matrix(datLog2LFQ))
group="PCI"
datLog2LFQ=log2(datLog2LFQ[,grep(group, names(datLog2LFQ))])
summary(datLog2LFQ)
hist(as.matrix(datLog2LFQ))
samples="ENDOSOME"
datLog2LFQ=log2(datLog2LFQ[,-grep(samples, names(datLog2LFQ))])
summary(datLog2LFQ)
hist(as.matrix(datLog2LFQ))
#hdr="LFQ.intensity."
hdr="Ratio.H.L.6"
datLog2LFQ=log2(data[,grep(hdr, names(data))])
summary(datLog2LFQ)
hist(as.matrix(datLog2LFQ))
samples="ENDOSOME"
datLog2LFQ=log2(datLog2LFQ[,-grep(samples, names(datLog2LFQ))])
summary(datLog2LFQ)
hist(as.matrix(datLog2LFQ))
group="PDT"
datLog2LFQ=log2(datLog2LFQ[,grep(group, names(datLog2LFQ))])
summary(datLog2LFQ)
hist(as.matrix(datLog2LFQ))
View(datLog2LFQ)
View(data)
#hdr="LFQ.intensity."
hdr="Ratio.H.L.6"
datLog2LFQ=log2(data[,grep(hdr, names(data))])
summary(datLog2LFQ)
hist(as.matrix(datLog2LFQ))
samples="ENDOSOME"
datLog2LFQ=log2(datLog2LFQ[,-grep(samples, names(datLog2LFQ))])
summary(datLog2LFQ)
hist(as.matrix(datLog2LFQ))
group="bleomycin"
datLog2LFQ=log2(datLog2LFQ[,grep(group, names(datLog2LFQ))])
summary(datLog2LFQ)
hist(as.matrix(datLog2LFQ))
View(datLog2LFQ)
inpD <-"L:/promec/Animesh/Lisa/"
#data <- read.delim(paste0(inpD,"proteinGroupsTotalTtestMedian.txt"),sep="\t",header = T)
data <- read.delim(paste0(inpD,"proteinG140anno.txt"),sep="\t",header = T)
summary(data)
View(data)
#install.packages('pheatmap')
library(pheatmap)
#?pheatmap
y<-as.matrix(data[1:18])
View(y)
y[is.na(y)]
rn<-sub(";","",data$T..T..Gene.names)
rn
#rn<-strsplit(rn, "apolipoprotein")
rn<-strsplit(rn, " ")
row.names(y)<-paste(sapply(rn, "[", 1),sapply(rn, "[", 3),sapply(rn, "[", 6))
summary(y)
row.names(y)<-paste(sapply(rn, "[", 1))#,sapply(rn, "[", 3),sapply(rn, "[", 6))
summary(y)
#svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,cluster_cols=FALSE)#,annotation_col = label,show_rownames=F)
#ggsave(file=paste0(inpF,"corrcoefED.svg"), plot=svgPHC, width=6, height=6)
plot(svgPHC)
ggsave(file=paste0(inpD,hdr,"clusterPlot.frac.svg"),plot=svgPHC)#,  width=6, height=6)
library(ggplot2)
ggsave(file=paste0(inpD,hdr,"clusterPlot.frac.svg"),plot=svgPHC)#,  width=6, height=6)
colnames(ŧ)
colnames(y)
strsplit(colnames(y), " ")
strsplit(colnames(y), "_")
cn<-strsplit(colnames(y), "_")
colnames(y)<-paste(sapply(cn, "[", 1))
summary(y)
#svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,cluster_cols=FALSE)#,annotation_col = label,show_rownames=F)
hdr="log2diff"
ggsave(file=paste0(inpD,hdr,"clusterPlot.frac.svg"),plot=svgPHC)#,  width=6, height=6)
pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
pheatmap
pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
samples="log2diff"
hdr
data_apo <- data[,grep("Apoptosis", data$C..KEGG.name]
data_apo <- data[,grep("Apoptosis", data$C..KEGG.name)]
data$C..KEGG.name)
data$C..KEGG.name
data_apo <- data[,grepl("Apoptosis", data$C..KEGG.name)]
data_apo <- data[grep("Apoptosis", data$C..KEGG.name),]
data_apo
data_apop <- data[grep("Apoptosis", data$C..KEGG.name),]
data_jaks <- data[grep("Jak-STAT signaling pathway", data$C..KEGG.name),]
data_mapk <- data[grep("MAPK signaling pathway", data$C..KEGG.name),]
data_jaks <- data[grep("Jak-STAT signaling pathway", data$C..KEGG.name),]
data_mapk <- data[grep("MAPK signaling pathway", data$C..KEGG.name),]
data_selr<-rbind.data.frame(data_apop,data_apop,data_mapk)
data_selr <- data[grep("MAPK signaling pathway", data$C..KEGG.name),]
summary(data_selr)
y<-as.matrix(data_selr[1:18])
#?pheatmap
rn<-sub(";","",data_selr$T..T..Gene.names)
#rn<-strsplit(rn, "apolipoprotein")
rn<-strsplit(rn, " ")
row.names(y)<-paste(sapply(rn, "[", 1))#,sapply(rn, "[", 3),sapply(rn, "[", 6))
cn<-strsplit(colnames(y), "_")
colnames(y)<-paste(sapply(cn, "[", 1))
summary(y)
#svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,cluster_cols=FALSE)#,annotation_col = label,show_rownames=F)
ggsave(file=paste0(inpD,hdr,"clusterPlot.frac.svg"),plot=svgPHC)#,  width=6, height=6)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
#svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,cluster_cols=FALSE)#,annotation_col = label,show_rownames=F)
ggsave(file=paste0(inpD,hdr,"clusterPlot.MAPK.svg"),plot=svgPHC)#,  width=6, height=6)
View(data_selr)
data_selr <- data[grep("Apoptosis", data$C..KEGG.name),]
y<-as.matrix(data_selr[1:18])
#?pheatmap
rn<-sub(";","",data_selr$T..T..Gene.names)
#rn<-strsplit(rn, "apolipoprotein")
rn<-strsplit(rn, " ")
row.names(y)<-paste(sapply(rn, "[", 1))#,sapply(rn, "[", 3),sapply(rn, "[", 6))
cn<-strsplit(colnames(y), "_")
colnames(y)<-paste(sapply(cn, "[", 1))
summary(y)
#svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,cluster_cols=FALSE)#,annotation_col = label,show_rownames=F)
ggsave(file=paste0(inpD,hdr,"clusterPlot.Apoptosis.svg"),plot=svgPHC)#,  width=6, height=6)
data_selr <- data[grep("Jak-STAT signaling pathway", data$C..KEGG.name),]
y<-as.matrix(data_selr[1:18])
rn<-sub(";","",data_selr$T..T..Gene.names)
#rn<-strsplit(rn, "apolipoprotein")
rn<-strsplit(rn, " ")
row.names(y)<-paste(sapply(rn, "[", 1))#,sapply(rn, "[", 3),sapply(rn, "[", 6))
cn<-strsplit(colnames(y), "_")
colnames(y)<-paste(sapply(cn, "[", 1))
summary(y)
#svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,cluster_cols=FALSE)#,annotation_col = label,show_rownames=F)
ggsave(file=paste0(inpD,hdr,"clusterPlot.JakSTAT.svg"),plot=svgPHC)#,  width=6, height=6)
devtools::install_github("AimeeD90/pClean_release")
remotes::install_github("AimeeD90/pClean_release")
library(pClean)
devtools::install_github("AimeeD90/pClean_release")
#remotes::install_github("AimeeD90/pClean_release")
library(pClean)
#remotes::install_github("AimeeD90/pClean_release")
library(pClean)
devtools::install_github("AimeeD90/pClean_release")
install.packages('digest', repos='http://cran.us.r-project.org')
devtools::install_github("AimeeD90/pClean_release")
#remotes::install_github("AimeeD90/pClean_release")
library(pClean)
mgffile<-system.file("extdata/", "tte.frac1.mgf",package="pClean")
mgffile
pCleanGear(mgf=mgffile,outdir="tte/result",mem=2,cpu=0,mionFilter=TRUE,labelMethod="iTRAQ8plex",repFilter=TRUE,labelFilter=TRUE,low=TRUE,high=TRUE,isoReduction=TRUE,chargeDeconv=TRUE,largerThanPrecursor=TRUE,ionsMerge=TRUE,network=TRUE,debug=FALSE)
pCleanGear(mgf=mgffile,outdir="result",mem=2,cpu=0,mionFilter=TRUE,labelMethod="iTRAQ8plex",repFilter=TRUE,labelFilter=TRUE,low=TRUE,high=TRUE,isoReduction=TRUE,chargeDeconv=TRUE,largerThanPrecursor=TRUE,ionsMerge=TRUE,network=TRUE,debug=FALSE)
pCleanGear(mgf=mgffile,outdir=".",mem=2,cpu=0,mionFilter=TRUE,labelMethod="iTRAQ8plex",repFilter=TRUE,labelFilter=TRUE,low=TRUE,high=TRUE,isoReduction=TRUE,chargeDeconv=TRUE,largerThanPrecursor=TRUE,ionsMerge=TRUE,network=TRUE,debug=FALSE)
pCleanGear(mgf=mgffile,outdir="pClean",mem=2,cpu=0,mionFilter=TRUE,labelMethod="iTRAQ8plex",repFilter=TRUE,labelFilter=TRUE,low=TRUE,high=TRUE,isoReduction=TRUE,chargeDeconv=TRUE,largerThanPrecursor=TRUE,ionsMerge=TRUE,network=TRUE,debug=FALSE)
mgffile<-system.file("extdata/", "tte.frac1.mgf",package="pClean")
mgffile<-system.file("extdata/", "120426_Jurkat_highLC_Frac1.mgf",package="pClean")
pCleanGear(mgf=mgffile,outdir="jurkat/result",mem=2,cpu=0,mionFilter=TRUE,isoReduction=TRUE,chargeDeconv=TRUE,largerThanPrecursor=TRUE,ionsMerge=TRUE,network=TRUE,debug=FALSE)
