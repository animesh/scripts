i1<-read.table(i,sep='\t')
i1<-t(i1)
colnames(i1)=c("ID",name)
i1df<-data.frame(i1,stringsAsFactors=F)
comb=merge(comb,i1df,by="ID",all = TRUE)
}
comb<-comb[-1,]
comb<-comb[,-2]
write.table(comb,paste(pathD,toupper(typeF),"total",".txt",sep = ""),sep = "\t",quote = FALSE,col.names = TRUE,row.names = FALSE)
install.packages('quantable')
library(quantable)
y<-comb
y=robustscale(y)
y
View(y)
y[is.na(y)]<-0
y=robustscale(y)
y
row.names(y)<-y[,1]
y<-y{,-1}
y[,1]
y{,-1]
y<-y{,-1]
#y[is.na(y)]<-0
y=robustscale(y)
y$data[is.na(y$data)]<-0
names(y$data)=sub("X","",names(y$data))
pheatmap(y$data,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)
```
y<-y[,-1]
#y[is.na(y)]<-0
y=robustscale(y)
y
#y[is.na(y)]<-0
y=robustscale(y+1)
#y[is.na(y)]<-0
summary(y)
y<-as.matrix(comb)
#y[is.na(y)]<-0
summary(y)
row.names(y)<-y[,1]
y<-y[,-1]
#y[is.na(y)]<-0
summary(y)
y=robustscale(y+1)
y=robustscale(y)
#y[is.na(y)]<-0
summary(y)
hist(ŧ)
hist(y)
install.packages("epitools")
install.packages("taRifx")
install.packages("data.table")
install.packages("reshape")
install.packages("dplyr")
install.packages("plyr")
install.packages("utils")
install.packages("microbenchmark")
install.packages("rpart")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
lPep=100
nPep=10000
nTot=lPep*nPep
data<-runif(nTot)
#hist(sample(data,100000,replace=T),breaks=nPep)
sPep=rnorm(lPep)
n=1
i=1
while(n<=lPep){
print(n)
print(i)
sPep[c(seq(n,n+i-1))]=sample(data,i,replace=T)
n=n+i
i=i+1
}
hist(sPep,breaks=lPep)
sumarry(sPep)
summary(sPep)
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("microbenchmark")
install.packages("rpart")
install.packages("epitools")
install.packages("taRifx")
install.packages("data.table")
install.packages("reshape")
install.packages("dplyr")
install.packages("plyr")
#install.packages("utils")
install.packages("microbenchmark")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("randomForest")
install.packages("ggplot2")
install.packages("devtools")
devtools::install_github("rstudio/keras")
library(keras)
install_keras()
install.packages("ggfortify”)
devtools::install_github("rstudio/keras")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("rstudio/keras")
library(keras)
install_keras()
library(keras)
install_keras()
install.packages("ggfortify”)
install.packages("ggfortify”)
install.packages("ggfortify”)
lPep=100
nPep=10000
nTot=lPep*nPep
data<-runif(nTot)
#hist(sample(data,100000,replace=T),breaks=nPep)
sPep=rnorm(lPep)
n=1
i=1
while(n<=lPep){
print(n)
print(i)
sPep[c(seq(n,n+i-1))]=sample(data,i,replace=T)
n=n+i
i=i+1
}
hist(sPep,breaks=lPep)
summary(sPep)
```
install.packages("ggfortify”)
lPep=100
nPep=10000
nTot=lPep*nPep
data<-runif(nTot)
#hist(sample(data,100000,replace=T),breaks=nPep)
sPep=rnorm(lPep)
n=1
i=1
while(n<=lPep){
print(n)
print(i)
sPep[c(seq(n,n+i-1))]=sample(data,i,replace=T)
n=n+i
i=i+1
}
hist(sPep,breaks=lPep)
summary(sPep)
```
)
)
''
""
"
ggfortify
install.packages("ggfortify”)
"
""
install.packages("ggfortify")
lPep=100
nPep=10000
nTot=lPep*nPep
data<-runif(nTot)
#hist(sample(data,100000,replace=T),breaks=nPep)
sPep=rnorm(lPep)
n=1
i=1
while(n<=lPep){
print(n)
print(i)
sPep[c(seq(n,n+i-1))]=sample(data,i,replace=T)
n=n+i
i=i+1
}
hist(sPep,breaks=lPep)
summary(sPep)
library(keras)
shiny::runApp('~/Documents/xlinkx/XlinkX_training/ui_batch')
install.packages('maptools');
install.packages('seqinr');
install.packages('Rmpfr');
install.packages('ggplot2');
install.packages('shiny');
install.packages("shiny")
shiny::runApp('~/Documents/xlinkx/XlinkX_training/ui_batch')
install.packages('Rmpfr')
install.packages('Rmpfr')
install.packages('Rmpfr')
runApp('~/Documents/xlinkx/XlinkX_training/ui_batch')
runApp('~/Documents/xlinkx/XlinkX_training/ui_batch')
ls()
less hideTab()
ls()
brfss<-read.xport("~/LLCP2013.XPT")
library(SASxport)
brfss<-read.xport("~/LLCP2013.XPT")
install.packages("oddsratio")
library(oddsratio)
oddsratio(as.factor(brfss$X.HCVU651),brfss$X.RFCHOL))
oddsratio(as.factor(brfss$X.HCVU651),as.factor(brfss$X.RFCHOL))
library(oddsratio)
oddsratio(as.factor(brfss$X.HCVU651),as.factor(brfss$X.RFCHOL))
as.factor(brfss$X.HCVU651)
oddsratio
library(oddsratio)
oddsratio(as.factor(brfss$X.HCVU651),as.factor(brfss$X.RFCHOL))
library(oddsratio)
library(epitools)
oddsratio(as.factor(brfss$X.HCVU651),as.factor(brfss$X.RFCHOL))
rows_to_select <- sample(1:nrow(brfss), 500, replace=F)
rows_to_select
brfss_sample <- brfss[rows_to_select,]
oddsratio(as.factor(brfss_sample$X.HCVU651),as.factor(brfss_sample$X.RFCHOL))
library(googleVis)
library(googleVis)
data_map<-read.csv( "~/Documents/map.csv", header=TRUE,sep= "\t")
map<-gvisGeoChart(data_map,locationvar="Country",colorvar="mortalit
y")
plot(map)
library(googleVis)
data_map<-read.csv( "~/Documents/map.csv", header=TRUE,sep= "\t")
map<-gvisGeoChart(data_map,locationvar="Country",colorvar="mortalit
y")
plot(map)
library(googleVis)
data_map<-read.csv( "~/Documents/map.csv", header=TRUE,sep= "\t")
map<-gvisGeoChart(data_map,locationvar="Country",colorvar="mortalit
y")
plot(map)
library(googleVis)
data_map<-read.csv( "~/Documents/map.csv", header=TRUE,sep= "\t")
map<-gvisGeoChart(data_map,locationvar="Country",colorvar="mortalit
y")
plot(map)
library(microbenchmark)
library(microbenchmark)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
dt[, mean(mortality), by = group],
summarize( group_by(df, group), m = mean(mortality) ),
summarize( group_by(dt, group), m = mean(mortality) )
)
print(m1, signif = 3)
autoplot(m1)
library(ggplot2)
library(microbenchmark)
library(ggplot2)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
dt[, mean(mortality), by = group],
summarize( group_by(df, group), m = mean(mortality) ),
summarize( group_by(dt, group), m = mean(mortality) )
)
print(m1, signif = 3)
autoplot(m1)
library(ddply)
install.packages(ddply)
install.packages("ddply")
install.packages("dplyr")
library(ddply)
library(dplyr)
library(microbenchmark)
library(ggplot2)
install.packages("dplyr")
library(dplyr)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
dt[, mean(mortality), by = group],
summarize( group_by(df, group), m = mean(mortality) ),
summarize( group_by(dt, group), m = mean(mortality) )
)
print(m1, signif = 3)
autoplot(m1)
group=as.factor(sample(c(”g1",”g2”))
df <- data.frame(group=as.factor(sample(c(”g1",”g2”)),10,replace=TRUE)),mortality=runif(10))
library(microbenchmark)
df <- data.frame(group=as.factor(sample(c("g1,”g2”),10,replace=TRUE)),mortality=runif(10))
df <- data.frame(group=factor(sample(c(”g1",”g2”), 10, replace=TRUE)),mortality=runif(10))
df <- data.frame(group=as.factor(sample(c("g1,”g2”),10,replace=TRUE)),mortality=runif(10))
df <- data.frame(group=factor(sample(c(”g1","g2"), 10, replace=TRUE)),mortality=runif(10))
df <- data.frame(group=as.factor(sample(c("g1,”g2”),10,replace=TRUE)),mortality=runif(10))
df <- data.frame(group=factor(sample(c(”g1","g2"), 10, replace=TRUE)),mortality=runif(10))
df
df <- data.frame(group=as.factor(sample(c("g1,”g2”),10,replace=TRUE)),mortality=runif(10))
df <- data.frame(group=factor(sample(c(”g1","g2"), 10, replace=TRUE)),mortality=runif(10))
library(microbenchmark)
library(ggplot2)
#install.packages("dplyr")
library(dplyr)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
dt[, mean(mortality), by = group],
summarize( group_by(df, group), m = mean(mortality) ),
summarize( group_by(dt, group), m = mean(mortality) )
)
print(m1, signif = 3)
autoplot(m1)
df
View(df)
df <- data.frame(group=as.factor(sample(c("g1,”g2”),10,replace=TRUE)),mortality=runif(10))
df <- data.frame(group=factor(sample(c(”g1","g2"), 10, replace=TRUE)),mortality=runif(10))
df <- data.frame(group=factor(sample(c(”g1","g2"), 10, replace=TRUE)),mortality=runif(10))
df <- data.frame(group=factor(sample(c("g1","g2"), 10, replace=TRUE)),mortality=runif(10))
df
df <- data.frame(group=factor(sample(c("g1","g2"), 10, replace=TRUE)),mortality=runif(10))
library(microbenchmark)
library(ggplot2)
#install.packages("dplyr")
library(dplyr)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
dt[, mean(mortality), by = group],
summarize( group_by(df, group), m = mean(mortality) ),
summarize( group_by(dt, group), m = mean(mortality) )
)
print(m1, signif = 3)
autoplot(m1)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
dt[, mean(mortality), by = group],
summarize( group_by(df, group), m = mean(mortality) ),
summarize( group_by(dt, group), m = mean(mortality) )
)
by( df$mortality, df$group, mean)
aggregate(mortality~ group, df, mean )
splitmean(df)
splitmean <- function(df) {
s <- split( df, df$group)
sapply( s, function(x)
mean(x$mortality) )
}
splitmean(df)
splitmean(df)
ddply( df, .(group), function(x) mean(x$mortality) )
#install.packages("dplyr")
library(plyr)
ddply( df, .(group), function(x) mean(x$mortality) )
ddply( df, .(group), function(x) mean(x$mortality) )
dcast( melt(df), variable ~ group, mean)
melt(df)
library(reshape2)
dcast( melt(df), variable ~ group, mean)
dt[, mean(mortality), by = group]
df[, mean(mortality), by = group]
mean(mortality)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
#dt[, mean(mortality), by = group],
summarize( group_by(df, group), m = mean(mortality) ),
summarize( group_by(dt, group), m = mean(mortality) )
)
summarize( group_by(df, group), m = mean(mortality) )
library(dplyr)
df <- data.frame(group=factor(sample(c("g1","g2"), 10, replace=TRUE)),mortality=runif(10))
library(microbenchmark)
library(ggplot2)
#install.packages("dplyr")
library(plyr)
library(dplyr)
library(reshape2)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
#dt[, mean(mortality), by = group],
#summarize( group_by(df, group), m = mean(mortality) ),
#summarize( group_by(dt, group), m = mean(mortality) )
)
splitmean <- function(df) {
s <- split( df, df$group)
sapply( s, function(x)
mean(x$mortality) )
}
splitmean(df)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
#dt[, mean(mortality), by = group],
summarize( group_by(df, group), m = mean(mortality) ),
summarize( group_by(dt, group), m = mean(mortality) )
)
print(m1, signif = 3)
autoplot(m1)
df <- data.frame(group=factor(sample(c("g1","g2"), 10, replace=TRUE)),mortality=runif(10))
library(microbenchmark)
library(ggplot2)
#install.packages("dplyr")
library(plyr)
library(dplyr)
library(reshape2)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean)
#dt[, mean(mortality), by = group],
#summarize( group_by(df, group), m = mean(mortality) ),
#summarize( group_by(dt, group), m = mean(mortality) )
)
splitmean <- function(df) {
s <- split( df, df$group)
sapply( s, function(x)
mean(x$mortality) )
}
splitmean(df)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
#dt[, mean(mortality), by = group],
summarize( group_by(df, group), m = mean(mortality) ),
summarize( group_by(dt, group), m = mean(mortality) )
)
print(m1, signif = 3)
autoplot(m1)
setDT(df)[ , .(mean_mortality =mean(mortality)), by = group]
library(data.table)
setDT(df)[ , .(mean_mortality =mean(mortality)), by = group]
dt=setDT(df)[ , .(mean_mortality =mean(mortality)), by = group]
dt[, mean(mortality), by = group]
dt
by
m1
dt<- data.table(df)
setkey(dt, mortality)
dt
dt[, mean(mortality), by = group]
summarize( group_by(df, group), m = mean(mortality) )
df <- data.frame(group=factor(sample(c("g1","g2"), 10, replace=TRUE)),mortality=runif(10))
library(microbenchmark)
library(ggplot2)
#install.packages("dplyr")
library(plyr)
library(dplyr)
library(reshape2)
library(data.table)
dt<- data.table(df)
setkey(dt, mortality)
setDT(df)[ , .(mean_mortality =mean(mortality)), by = group]
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
dt[, mean(mortality), by = group],
#summarize( group_by(df, group), m = mean(mortality) ),
#summarize( group_by(dt, group), m = mean(mortality) )
)
splitmean <- function(df) {
s <- split( df, df$group)
sapply( s, function(x)
mean(x$mortality) )
}
splitmean(df)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
#dt[, mean(mortality), by = group],
summarize( group_by(df, group), m = mean(mortality) ),
summarize( group_by(dt, group), m = mean(mortality) )
)
print(m1, signif = 3)
autoplot(m1)
summarize( group_by(dt, group), m = mean(mortality)
)
