dat.log=dataNormFilter.Select
df.prot=dataNormFilter[dataNormFilter$Red<selThr & dataNormFilter$White<selThr,]
df.prot=data[dataNormFilter$Red<selThr & dataNormFilter$White<selThr,]
df.prot=dataClean[dataNormFilter$Red<selThr & dataNormFilter$White<selThr,]
library(matrixStats)
count_columns = "MS.MS.count."
#psm.count.table = data.frame(count = rowMins(as.matrix(df.prot[,grep(count_columns, names(df.prot))])))+1
rownames(fit3$coefficients)
fit3$count = rowMins(as.matrix(df.prot[,grep(count_columns, names(df.prot))]))+1
fit4 = spectraCounteBayes(fit3)
# n=30 limits the boxplot to show only proteins quantified by <= 30 PSMs.
VarianceBoxplot(fit4,n=30,main=inpD,xlab="PSM count")
VarianceScatterplot(fit4,main=inpD)
DEqMS.results = outputResult(fit4,coef_col = 1)
#if you are not sure which coef_col refers to the specific contrast,type
head(fit4$coefficients)
# a quick look on the DEqMS results table
head(DEqMS.results)
#install.packages("ggrepel")
library(ggrepel)
# Use ggplot2 allows more flexibility in plotting
DEqMS.results$log.sca.pval = -log10(DEqMS.results$sca.P.Value)
ggplot(DEqMS.results, aes(x = logFC, y =log.sca.pval )) +
geom_point(size=0.5 )+
theme_bw(base_size = 16) + # change theme
xlab(expression("log2(red/white)")) + # x-axis label
ylab(expression(" -log10(P-value)")) + # y-axis label
geom_vline(xintercept = c(-1,1), colour = "red") + # Add fold change cutoffs
geom_hline(yintercept = 3, colour = "red") + # Add significance cutoffs
geom_vline(xintercept = 0, colour = "black") + # Add 0 lines
scale_colour_gradient(low = "black", high = "black", guide = FALSE)+
geom_text_repel(data=subset(DEqMS.results, abs(logFC)>1&log.sca.pval > 3),
aes( logFC, log.sca.pval ,label=gene)) # add gene label
fit4$p.value = fit4$sca.p
# volcanoplot highlight top 20 proteins ranked by p-value here
volcanoplot(fit4,coef=1, style = "p-value", highlight = 20,names=rownames(fit4$coefficients))
boxplot(df.LFQ)
#iocManager::install("ROTS")#, version = "3.8")
dataNormImpCom<-dataNormFilter#[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
#iocManager::install("ROTS")#, version = "3.8")
dataNormImpCom<-dataNormFilter.Select#[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
factors<-c(0,0,1,1,1,0,0)
library(ROTS)
results = ROTS(data = dataNormImpCom, groups = factors , B = 1000 , K = 500 , seed = 1234)
factors<-c(0,0,1,1,1,0)
library(ROTS)
results = ROTS(data = dataNormImpCom, groups = factors , B = 1000 , K = 500 , seed = 1234)
names(results)
summary(results, fdr = 0.2)
results = ROTS(data = dataNormImpCom, groups = factors , B = 250 , K = 500 , seed = 42)
summary(results, fdr = 0.2)
plot(results, fdr = 0.5, type = "volcano")
plot(results, fdr = 0.05, type = "volcano")
#https://rdrr.io/bioc/DEqMS/f/vignettes/DEqMS-package-vignette.Rmd
#install.packages("BiocManager")
#BiocManager::install("DEqMS")
library(DEqMS)
dat.log=dataNormFilter
boxplot(dat.log,las=2,main="")
cond = as.factor(c("w","w","r","r","r","w"))
design = model.matrix(~0+cond) # 0 means no intercept for the linear model
colnames(design) = gsub("cond","",colnames(design))
x <- c("r-w")
contrast =  makeContrasts(contrasts=x,levels=design)
fit1 <- lmFit(dat.log, design)
fit2 <- contrasts.fit(fit1,contrasts = contrast)
fit3 <- eBayes(fit2)
df.prot=dataClean[dataNormFilter$Red<selThr & dataNormFilter$White<selThr,]
library(matrixStats)
count_columns = "MS.MS.count."
#psm.count.table = data.frame(count = rowMins(as.matrix(df.prot[,grep(count_columns, names(df.prot))])))+1
rownames(fit3$coefficients)
fit3$count = rowMins(as.matrix(df.prot[,grep(count_columns, names(df.prot))]))+1
fit4 = spectraCounteBayes(fit3)
# n=30 limits the boxplot to show only proteins quantified by <= 30 PSMs.
VarianceBoxplot(fit4,n=30,main=inpD,xlab="PSM count")
VarianceScatterplot(fit4,main=inpD)
DEqMS.results = outputResult(fit4,coef_col = 1)
#if you are not sure which coef_col refers to the specific contrast,type
head(fit4$coefficients)
# a quick look on the DEqMS results table
head(DEqMS.results)
# Save it into a tabular text file
write.table(DEqMS.results,paste0(inpD,hdr,"DEqMS.results.txt"),sep = "\t",row.names = F,quote=F)
#install.packages("ggrepel")
library(ggrepel)
# Use ggplot2 allows more flexibility in plotting
DEqMS.results$log.sca.pval = -log10(DEqMS.results$sca.P.Value)
ggplot(DEqMS.results, aes(x = logFC, y =log.sca.pval )) +
geom_point(size=0.5 )+
theme_bw(base_size = 16) + # change theme
xlab(expression("log2(red/white)")) + # x-axis label
ylab(expression(" -log10(P-value)")) + # y-axis label
geom_vline(xintercept = c(-1,1), colour = "red") + # Add fold change cutoffs
geom_hline(yintercept = 3, colour = "red") + # Add significance cutoffs
geom_vline(xintercept = 0, colour = "black") + # Add 0 lines
scale_colour_gradient(low = "black", high = "black", guide = FALSE)+
geom_text_repel(data=subset(DEqMS.results, abs(logFC)>1&log.sca.pval > 3),
aes( logFC, log.sca.pval ,label=gene)) # add gene label
fit4$p.value = fit4$sca.p
# volcanoplot highlight top 20 proteins ranked by p-value here
volcanoplot(fit4,coef=1, style = "p-value", highlight = 20,names=rownames(fit4$coefficients))
fit4$coefficients
View(fit4)
#iocManager::install("ROTS")#, version = "3.8")
dataNormImpCom<-dataNormFilter.Select#[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
factors<-c(0,0,1,1,1,0)
library(ROTS)
results = ROTS(data = dataNormImpCom, groups = factors , B = 250 , K = 250 , seed = 42)
write.csv(summary(results, fdr = 1),file=paste0(inpD,hdr,"rots.csv"))
names(results)
summary(results, fdr = 0.2)
plot(results, fdr = 0.05, type = "volcano")
#P61203-2;P61203
#plot(results, fdr = 0.5, type = "heatmap")
summary(results, fdr = 0.5)
View(.Last.value)
# volcanoplot highlight top 20 proteins ranked by p-value here
volcanoplot(fit4,coef=1, style = "p-value", highlight = 20,names=rownames(fit4$coefficients))
volcanoplot(fit4,coef=1, style = "p-value", highlight = 5,names=rownames(fit4$coefficients))
View(DEqMS.results)
dataNormImp<-dataNorm
set.seed(1)
dataNormImp[dataNormImp==-Inf]<-rnorm(sum(dataNormImp==-Inf),mean=mean(dataNormImp[dataNormImp!=-Inf])-10,sd=sd(dataNormImp[dataNormImp!=-Inf])/10)
summary(dataNormImp)
hist(as.matrix(dataNormImp))
dataNormFilter<-dataNorm
dataNormFilter[dataNormFilter==-Inf]=NA
summary(dataNormFilter)
selThr<-2
dataNormFilter$Red = apply(dataNormFilter,1,function(x) sum(is.na(x[3:5])))
dataNormFilter$White = apply(dataNormFilter,1,function(x) sum(is.na(x[c(1,2,6)])))
dataNormFilter.Select = dataNormFilter[dataNormFilter$Red<selThr & dataNormFilter$White<selThr,1:6]
summary(dataNormFilter.Select)
dataNormImpFilter<-dataNormFilter.Select
set.seed(1)
dataNormImpFilter[is.na(dataNormImpFilter)]<-rnorm(sum(is.na(dataNormImpFilter)),mean=mean(dataNormImpFilter[!is.na(dataNormImpFilter)])-3,sd=sd(!is.na(dataNormImpFilter))/3)
summary(dataNormImpFilter)
hist(as.matrix(dataNormImpFilter))
pairwise.t.test(dataNormImpFilter)
pairwise.t.test(dataNormImpFilter[,3:5],dataNormImpFilter[,c(1,2,6)])
pairwise.t.test(dataNormImpFilter[1,3:5],dataNormImpFilter[1,c(1,2,6)])
dataNormImpFilter[1,c(1,2,6)]
dataNormImpFilter[1,3:5]
?pairwise.t.test
?pairwise.t.test(dataNormImpFilter,c(0,0,1,1,1,0))#[1,3:5],dataNormImpFilter[1,c(1,2,6)])
pairwise.t.test(dataNormImpFilter,c(0,0,1,1,1,0))#[1,3:5],dataNormImpFilter[1,c(1,2,6)])
pairwise.t.test(as.matrix(dataNormImpFilter),c(0,0,1,1,1,0))#[1,3:5],dataNormImpFilter[1,c(1,2,6)])
dataNormFilter.Select = dataNormFilter[dataNormFilter$Red<selThr | dataNormFilter$White<selThr,1:6]
summary(dataNormFilter.Select)
dataNormImpFilter<-dataNormFilter.Select
set.seed(1)
dataNormImpFilter[is.na(dataNormImpFilter)]<-rnorm(sum(is.na(dataNormImpFilter)),mean=mean(dataNormImpFilter[!is.na(dataNormImpFilter)])-3,sd=sd(!is.na(dataNormImpFilter))/3)
summary(dataNormImpFilter)
hist(as.matrix(dataNormImpFilter))
pairwise.t.test(as.matrix(dataNormImpFilter),c(0,0,1,1,1,0))#[1,3:5],dataNormImpFilter[1,c(1,2,6)])
decoyPrefix="REV"
dataClean<-data[-grep(decoyPrefix, rownames(data)),]
dfNoRev = data[!data$Reverse=="+",]
setdiff(rownames(dataClean),rownames(dfNoRev))
setdiff(rownames(dfNoRev),rownames(dataClean))
decoyPrefix="REV__"
dataClean<-data[-grep(decoyPrefix, rownames(data)),]
setdiff(rownames(dataClean),rownames(dfNoRev))
setdiff(rownames(dfNoRev),rownames(dataClean))
contaminantPrefix="CON__"
dataClean<-dataClean[-grep(contaminantPrefix, rownames(dataClean)),]
#dataClean=dataClean[!dataClean$Only.identified.by.site=="+",]
summary(dataClean)
hdr="LFQ.intensity."
dataNorm=log2(dataClean[,grep(hdr, names(dataClean))])
summary(dataNorm)
hist(as.matrix(dataNorm))
dataNormFilter<-dataNorm
dataNormFilter[dataNormFilter==-Inf]=NA
summary(dataNormFilter)
selThr<-2
dataNormFilter$Red = apply(dataNormFilter,1,function(x) sum(is.na(x[3:5])))
dataNormFilter$White = apply(dataNormFilter,1,function(x) sum(is.na(x[c(1,2,6)])))
dataNormFilter.Select = dataNormFilter[dataNormFilter$Red<selThr | dataNormFilter$White<selThr,1:6]
summary(dataNormFilter.Select)
inpD <-"L:/promec/Elite/LARS/2018/november/Rolf final/txt/"
data <- read.delim(paste0(inpD,"proteinGroups.txt"),row.names=1,sep="\t",header = T)
summary(data)
decoyPrefix="REV"
dataClean<-data[-grep(decoyPrefix, rownames(data)),]
dfNoRev = data[!data$Reverse=="+",]
setdiff(rownames(dataClean),rownames(dfNoRev))
setdiff(rownames(dfNoRev),rownames(dataClean))
decoyPrefix="REV__"
dataClean<-data[-grep(decoyPrefix, rownames(data)),]
setdiff(rownames(dataClean),rownames(dfNoRev))
setdiff(rownames(dfNoRev),rownames(dataClean))
contaminantPrefix="CON__"
dataClean<-dataClean[-grep(contaminantPrefix, rownames(dataClean)),]
#dataClean=dataClean[!dataClean$Only.identified.by.site=="+",]
summary(dataClean)
decoyPrefix="REV"
dataClean<-data[-grep(decoyPrefix, rownames(data)),]
dfNoRev = data[!data$Reverse=="+",]
setdiff(rownames(dataClean),rownames(dfNoRev))
setdiff(rownames(dfNoRev),rownames(dataClean))
decoyPrefix="REV__"
dataClean<-data[-grep(decoyPrefix, rownames(data)),]
setdiff(rownames(dataClean),rownames(dfNoRev))
setdiff(rownames(dfNoRev),rownames(dataClean))
contaminantPrefix="CON__"
#dataClean<-dataClean[-grep(contaminantPrefix, rownames(dataClean)),]
dataClean=dataClean[!dataClean$Potential.contaminant=="+",]
#dataClean=dataClean[!dataClean$Only.identified.by.site=="+",]
summary(dataClean)
hdr="LFQ.intensity."
dataNorm=log2(dataClean[,grep(hdr, names(dataClean))])
summary(dataNorm)
hist(as.matrix(dataNorm))
dataNormFilter<-dataNorm
dataNormFilter[dataNormFilter==-Inf]=NA
summary(dataNormFilter)
selThr<-2
dataNormFilter$Red = apply(dataNormFilter,1,function(x) sum(is.na(x[3:5])))
dataNormFilter$White = apply(dataNormFilter,1,function(x) sum(is.na(x[c(1,2,6)])))
dataNormFilter.Select = dataNormFilter[dataNormFilter$Red<selThr | dataNormFilter$White<selThr,1:6]
summary(dataNormFilter.Select)
#ven <- venndetail(list(dat=dataClean$Majority.protein.IDs,daf=df.prot$Majority.protein.IDs))
#plot(ven)
#head(dataNorm$LFQ.intensity.15+dataNorm$LFQ.intensity.12)
#ven <- venndetail(list(Red = dataNorm$LFQ.intensity.19+dataNorm$LFQ.intensity.26+dataNorm$LFQ.intensity.29, White = dataNorm$LFQ.intensity.15+dataNorm$LFQ.intensity.12+dataNorm$LFQ.intensity.30))
ven <- venndetail(list(Red = dataNormFilter$Red, White = dataNormFilter$White))
#ven <- venndetail(dataNorm)
plot(ven)
plot(ven, type = "vennpie")
#https://bioconductor.org/packages/release/bioc/vignettes/VennDetail/inst/doc/VennDetail.html
#install.packages('BiocManager')
#BiocManager::install("VennDetail")
library(VennDetail)
plot(ven, type = "vennpie")
#ven <- venndetail(dataNorm)
plot(ven)
install.packages('eulerr')
#install.packages('eulerr')
library(eulerr)
plot(euler(c(dataNormFilter$Red, dataNormFilter$White,shape),"ellipse"),quantities=TRUE)
plot(euler(c(dataNormFilter$Red, dataNormFilter$White),shape="ellipse"),quantities=TRUE)
View(dataNormFilter)
plot(euler(dataNormFilter,shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter.Select,shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter[,7:8],shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter[,dataNormFilter[,7:8]<2],shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter[,dataNormFilter[,7]<2],shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter[dataNormFilter$Red<selThr | dataNormFilter$White<selThr,7:8] ,shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter[dataNormFilter$Red<selThr | dataNormFilter$White<selThr,7:8] ,shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter[dataNormFilter$Red<selThr | dataNormFilter$White<selThr,1:6] ,shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter[dataNormFilter$Red<selThr | dataNormFilter$White<selThr,] ,shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter.Select ,shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter.Select>0,shape="ellipse"),quantities=TRUE)
dataNormFilter[,7:8]
plot(euler(dataNormFilter[,7:8],shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter[,1:6],shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter[,7:8]<2,shape="ellipse"),quantities=TRUE)
?eulerr
plot(euler(dataNormFilter[,7:8]<2,shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter[,7:8]<1,shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter[,7:8]<2,shape="ellipse"),quantities=TRUE)
euler(dataNormFilter[,7:8]<2,shape="ellipse")$original.values
plot(euler(dataNormFilter[,7:8]<2,shape="ellipse"),quantities=TRUE,title="Salmon")
plot(euler(dataNormFilter[,7:8]<2,shape="ellipse"),quantities=TRUE,colors="Salmon")
inpF<-"L:/promec/Animesh/MK/proteinGroups.txt"
data<-read.table(inpF,header=T,sep="\t",row.names = 1)
summary(data)
inpL<-"L:/promec/Animesh/MK/Class.txt"
label<-read.table(inpL,header=T,row.names=1,sep="\t", colClasses=c(rep("factor",3)))
#colnames(label)=sub("\\-[0-9]+","",colnames(label))
#colnames(label)
summary(label)
inpD <-"L:/promec/Elite/LARS/2018/november/Rolf final/txt/"
data <- read.delim(paste0(inpD,"proteinGroups.txt"),row.names=1,sep="\t",header = T)
summary(data)
decoyPrefix="REV"
dataClean<-data[-grep(decoyPrefix, rownames(data)),]
dfNoRev = data[!data$Reverse=="+",]
setdiff(rownames(dataClean),rownames(dfNoRev))
setdiff(rownames(dfNoRev),rownames(dataClean))
decoyPrefix="REV__"
dataClean<-data[-grep(decoyPrefix, rownames(data)),]
setdiff(rownames(dataClean),rownames(dfNoRev))
setdiff(rownames(dfNoRev),rownames(dataClean))
contaminantPrefix="CON__"
#dataClean<-dataClean[-grep(contaminantPrefix, rownames(dataClean)),]
dataClean=dataClean[!dataClean$Potential.contaminant=="+",]
#dataClean=dataClean[!dataClean$Only.identified.by.site=="+",]
summary(dataClean)
hdr="LFQ.intensity."
dataNorm=log2(dataClean[,grep(hdr, names(dataClean))])
summary(dataNorm)
hist(as.matrix(dataNorm))
dataNormFilter<-dataNorm
dataNormFilter[dataNormFilter==-Inf]=NA
summary(dataNormFilter)
selThr<-2
dataNormFilter$Red = apply(dataNormFilter,1,function(x) sum(is.na(x[3:5])))
dataNormFilter$White = apply(dataNormFilter,1,function(x) sum(is.na(x[c(1,2,6)])))
dataNormFilter.Select = dataNormFilter[dataNormFilter$Red<selThr | dataNormFilter$White<selThr,1:6]
summary(dataNormFilter.Select)
#install.packages('eulerr')
library(?eulerr)
euler(dataNormFilter[,7:8]<2,shape="ellipse")$original.values
plot(euler(dataNormFilter[,7:8]<selThr,shape="ellipse"),quantities=TRUE,colors="Salmon")
#plot(euler(c(dataNormFilter$Red, dataNormFilter$White),shape="ellipse"),quantities=TRUE)
#euler(dataNorm<.5)$original.values
plot(euler(dataNormFilter[,7:8]<selThr,shape="ellipse"),quantities=TRUE)
#install.packages('eulerr')
library(eulerr)
#install.packages('eulerr')
library(eulerr)
euler(dataNormFilter[,7:8]<2,shape="ellipse")$original.values
plot(euler(dataNormFilter[,7:8]<selThr,shape="ellipse"),quantities=TRUE)
#plot(euler(c(dataNormFilter$Red, dataNormFilter$White),shape="ellipse"),quantities=TRUE)
#euler(dataNorm<.5)$original.values
#install.packages('eulerr')
library(eulerr)
euler(dataNormFilter[,8:7]<2,shape="ellipse")$original.values
plot(euler(dataNormFilter[,7:8]<selThr,shape="ellipse"),quantities=TRUE)
#plot(euler(c(dataNormFilter$Red, dataNormFilter$White),shape="ellipse"),quantities=TRUE)
#euler(dataNorm<.5)$original.values
#install.packages('eulerr')
library(eulerr)
euler(dataNormFilter[,8:7]<2,shape="ellipse")$original.values
plot(euler(dataNormFilter[,7:8]<selThr,shape="ellipse"),quantities=TRUE)
#plot(euler(c(dataNormFilter$Red, dataNormFilter$White),shape="ellipse"),quantities=TRUE)
#euler(dataNorm<.5)$original.values
#install.packages('eulerr')
library(eulerr)
euler(dataNormFilter[,8:7]<2,shape="ellipse")$original.values
plot(euler(dataNormFilter[,7:8]<selThr,shape="ellipse"),quantities=TRUE)
#plot(euler(c(dataNormFilter$Red, dataNormFilter$White),shape="ellipse"),quantities=TRUE)
#euler(dataNorm<.5)$original.values
euler(dataNormFilter[,8:7]<2,shape="ellipse")$original.values
#install.packages('eulerr')
library(eulerr)
euler(dataNormFilter[,8:7]<2,shape="ellipse")$original.values
plot(euler(dataNormFilter[,8:7]<selThr,shape="ellipse"),quantities=TRUE)
#plot(euler(c(dataNormFilter$Red, dataNormFilter$White),shape="ellipse"),quantities=TRUE)
#euler(dataNorm<.5)$original.values
plot(euler(dataNormFilter[,8:7]<selThr))#,shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter[,8:7]<selThr,shape="ellipse"),quantities=TRUE,title="x")
plot(euler(dataNormFilter[,8:7]<selThr,shape="ellipse"),quantities=TRUE, col="red")
plot(euler(dataNormFilter[,8:7]<selThr,shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter[,8:7]<selThr,shape="ellipse"),quantities=TRUE, col="red",fill=c("blue","red"))
plot(euler(dataNormFilter[,8:7]<selThr,shape="ellipse"),quantities=TRUE, col="white",fill=c("white","red"))
plot(euler(dataNormFilter[,8:7]<selThr,shape="ellipse"),quantities=TRUE, col="blue",fill=c("white","red"))
plot(euler(dataNormFilter[,8:7]<selThr,shape="ellipse"),quantities=TRUE, col="black",fill=c("white","red"))
#install.packages('eulerr')
library(eulerr)
euler(dataNormFilter[,8:7]<2,shape="ellipse")$original.values
plot(euler(dataNormFilter[,8:7]<selThr,shape="ellipse"),quantities=TRUE)
plot(euler(dataNormFilter[,8:7]<selThr,shape="ellipse"),quantities=TRUE, col="black",fill=c("white","red"),main="Identified Protein Groups in Salmon Types")
#plot(euler(c(dataNormFilter$Red, dataNormFilter$White),shape="ellipse"),quantities=TRUE)
#euler(dataNorm<.5)$original.values
dataNormImpFilter<-dataNormFilter.Select
set.seed(1)
dataNormImpFilter[is.na(dataNormImpFilter)]<-rnorm(sum(is.na(dataNormImpFilter)),mean=mean(dataNormImpFilter[!is.na(dataNormImpFilter)])-3,sd=sd(!is.na(dataNormImpFilter))/3)
summary(dataNormImpFilter)
hist(as.matrix(dataNormImpFilter))
dataNormImpCom<-dataNormImpFilter
plot(princomp(dataNormImpCom))
biplot(prcomp(as.matrix(t(dataNormImpCom)),scale = T))
biplot(prcomp(dataNormImpCom,scale = T),col=c(1,8), cex=c(0.5, 0.4))
#https://rdrr.io/bioc/DEqMS/f/vignettes/DEqMS-package-vignette.Rmd
#install.packages("BiocManager")
#BiocManager::install("DEqMS")
library(DEqMS)
dat.log=dataNormImpFilter
boxplot(dat.log,las=2,main="")
cond = as.factor(c("w","w","r","r","r","w"))
design = model.matrix(~0+cond) # 0 means no intercept for the linear model
colnames(design) = gsub("cond","",colnames(design))
x <- c("r-w")
contrast =  makeContrasts(contrasts=x,levels=design)
fit1 <- lmFit(dat.log, design)
fit2 <- contrasts.fit(fit1,contrasts = contrast)
fit3 <- eBayes(fit2)
df.prot=dataClean[dataNormFilter$Red<selThr & dataNormFilter$White<selThr,]
library(matrixStats)
df.prot=dataClean[dataNormFilter$Red<selThr | dataNormFilter$White<selThr,]
library(matrixStats)
count_columns = "MS.MS.count."
#psm.count.table = data.frame(count = rowMins(as.matrix(df.prot[,grep(count_columns, names(df.prot))])))+1
rownames(fit3$coefficients)
#psm.count.table = data.frame(count = rowMins(as.matrix(df.prot[,grep(count_columns, names(df.prot))])))+1
#rownames(fit3$coefficients)
fit3$count = rowMins(as.matrix(df.prot[,grep(count_columns, names(df.prot))]))+1
fit4 = spectraCounteBayes(fit3)
# n=30 limits the boxplot to show only proteins quantified by <= 30 PSMs.
VarianceBoxplot(fit4,n=30,main=inpD,xlab="PSM count")
VarianceScatterplot(fit4,main=inpD)
DEqMS.results = outputResult(fit4,coef_col = 1)
#if you are not sure which coef_col refers to the specific contrast,type
head(fit4$coefficients)
# a quick look on the DEqMS results table
head(DEqMS.results)
# Save it into a tabular text file
write.table(DEqMS.results,paste0(inpD,hdr,"DEqMS.results.txt"),sep = "\t",row.names = F,quote=F)
#install.packages("ggrepel")
library(ggrepel)
# Use ggplot2 allows more flexibility in plotting
DEqMS.results$log.sca.pval = -log10(DEqMS.results$sca.P.Value)
ggplot(DEqMS.results, aes(x = logFC, y =log.sca.pval )) +
geom_point(size=0.5 )+
theme_bw(base_size = 16) + # change theme
xlab(expression("log2(red/white)")) + # x-axis label
ylab(expression(" -log10(P-value)")) + # y-axis label
geom_vline(xintercept = c(-1,1), colour = "red") + # Add fold change cutoffs
geom_hline(yintercept = 3, colour = "red") + # Add significance cutoffs
geom_vline(xintercept = 0, colour = "black") + # Add 0 lines
scale_colour_gradient(low = "black", high = "black", guide = FALSE)+
geom_text_repel(data=subset(DEqMS.results, abs(logFC)>1&log.sca.pval > 3),
aes( logFC, log.sca.pval ,label=gene)) # add gene label
fit4$p.value = fit4$sca.p
volcanoplot(fit4,coef=1, style = "p-value", highlight = 10,names=rownames(fit4$coefficients))
ggplot(DEqMS.results, aes(x = logFC, y =log.sca.pval )) +
geom_point(size=0.5 )+
theme_bw(base_size = 16) + # change theme
xlab(expression("log2(red/white)")) + # x-axis label
ylab(expression(" -log10(P-value)")) + # y-axis label
geom_vline(xintercept = c(-1,1), colour = "red") + # Add fold change cutoffs
geom_hline(yintercept = 3, colour = "red") + # Add significance cutoffs
geom_vline(xintercept = 0, colour = "black") + # Add 0 lines
scale_colour_gradient(low = "black", high = "black", guide = FALSE)+
geom_text_repel(data=subset(DEqMS.results, abs(logFC)>1&log.sca.pval > 3),
aes( logFC, log.sca.pval ,label=gene)) # add gene label
ggplot(DEqMS.results, aes(x = logFC, y =log.sca.pval )) +
geom_point(size=0.5 )+
theme_bw(base_size = 16) + # change theme
xlab(expression("log2(red/white)")) + # x-axis label
ylab(expression(" -log10(P-value)")) + # y-axis label
geom_vline(xintercept = c(-1,1), colour = "red") + # Add fold change cutoffs
geom_hline(yintercept = 2, colour = "red") + # Add significance cutoffs
geom_vline(xintercept = 0, colour = "black") + # Add 0 lines
scale_colour_gradient(low = "black", high = "black", guide = FALSE)+
geom_text_repel(data=subset(DEqMS.results, abs(logFC)>1&log.sca.pval > 3),
aes( logFC, log.sca.pval ,label=gene)) # add gene label
ggplot(DEqMS.results, aes(x = logFC, y =log.sca.pval )) +
geom_point(size=0.5 )+
theme_bw(base_size = 16) + # change theme
xlab(expression("log2(red/white)")) + # x-axis label
ylab(expression(" -log10(P-value)")) + # y-axis label
geom_vline(xintercept = c(-1,1), colour = "red") + # Add fold change cutoffs
geom_hline(yintercept = 2, colour = "red") + # Add significance cutoffs
geom_vline(xintercept = 0, colour = "black") + # Add 0 lines
scale_colour_gradient(low = "black", high = "black", guide = FALSE)+
geom_text_repel(data=subset(DEqMS.results, abs(logFC)>1&log.sca.pval > 2),
aes( logFC, log.sca.pval ,label=gene)) # add gene label
View(DEqMS.results)
#iocManager::install("ROTS")#, version = "3.8")
dataNormImpCom<-dataNormFilter.Select#[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
factors<-c(0,0,1,1,1,0)
library(ROTS)
results = ROTS(data = dataNormImpCom, groups = factors , B = 250 , K = 250 , seed = 42)
write.csv(summary(results, fdr = 1),file=paste0(inpD,hdr,"rots.csv"))
names(results)
summary(results, fdr = 0.5)
plot(results, fdr = 0.05, type = "volcano")
#P61203-2;P61203
#plot(results, fdr = 0.5, type = "heatmap")
#iocManager::install("ROTS")#, version = "3.8")
dataNormImpCom<-dataNormFilter.Select#[is.na(dataNormImpCom)]=5
#iocManager::install("ROTS")#, version = "3.8")
dataNormImpCom<-dataNormFilter.Select#[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
factors<-c(0,0,1,1,1,0)
library(ROTS)
results = ROTS(data = dataNormImpCom, groups = factors , B = 250 , K = 250 , seed = 42)
write.csv(summary(results, fdr = 1),file=paste0(inpD,hdr,"rots.csv"))
names(results)
summary(results, fdr = 0.5)
plot(results, fdr = 0.05, type = "volcano")
#P61203-2;P61203
#plot(results, fdr = 0.5, type = "heatmap")
library(ROTS)
factors<-c(0,0,1,1,1,0)
results = ROTS(data = dataNormImpCom, groups = factors , B = 250 , K = 250 , seed = 42)
#iocManager::install("ROTS")#, version = "3.8")
dataNormImpCom<-dataNormImpFilter#[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
factors<-c(0,0,1,1,1,0)
library(ROTS)
results = ROTS(data = dataNormImpCom, groups = factors , B = 250 , K = 250 , seed = 42)
write.csv(summary(results, fdr = 1),file=paste0(inpD,hdr,"rots.csv"))
names(results)
summary(results, fdr = 0.5)
plot(results, fdr = 0.05, type = "volcano")
View(dataNormImpFilter)
summary(results, fdr = 0.05)
results = ROTS(data = dataNormImpCom, groups = factors , B = 250 , K = 250 , seed = 42)
summary(results, fdr = 0.05)
plot(results, fdr = 0.05, type = "volcano")
results = ROTS(data = dataNormImpCom, groups = as.factor(factors) , B = 250 , K = 250 , seed = 42)
summary(dataNormImpCom)
?ROTS
results = ROTS(data = dataNormImpCom, groups = factors , B = 1000 , K = 250 , seed = 42)
summary(results, fdr = 0.05)
View(results)
plot(results, fdr = 0.05, type = "volcano")
View(dataNormImpCom)
factors<-c(1,1,2,2,2,1)
results = ROTS(data = dataNormImpCom, groups = factors , B = 1000 , K = 250 , seed = 42)
summary(results, fdr = 0.05)
plot(results, fdr = 0.05, type = "volcano")
