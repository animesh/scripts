splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
dt[, mean(mortality), by = group],
#summarize( group_by(df, group), m = mean(mortality) ),
#summarize( group_by(dt, group), m = mean(mortality) )
)
splitmean <- function(df) {
s <- split( df, df$group)
sapply( s, function(x)
mean(x$mortality) )
}
splitmean(df)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
#dt[, mean(mortality), by = group],
summarize( group_by(df, group), m = mean(mortality) ),
summarize( group_by(dt, group), m = mean(mortality) )
)
print(m1, signif = 3)
autoplot(m1)
summarize( group_by(dt, group), m = mean(mortality)
)
df <- data.frame(group=factor(sample(c("g1","g2"), 10, replace=TRUE)),mortality=runif(10))
library(microbenchmark)
library(ggplot2)
#install.packages("dplyr")
library(plyr)
library(dplyr)
library(reshape2)
library(data.table)
dt<- data.table(df)
setkey(dt, mortality)
setDT(df)[ , .(mean_mortality =mean(mortality)), by = group]
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
dt[, mean(mortality), by = group],
#summarize( group_by(df, group), m = mean(mortality) ),
#summarize( group_by(dt, group), m = mean(mortality) )
)
splitmean <- function(df) {
s <- split( df, df$group)
sapply( s, function(x)
mean(x$mortality) )
}
splitmean(df)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
#dt[, mean(mortality), by = group],
summarize( group_by(df, group), m = mean(mortality) ),
summarize( group_by(dt, group), m = mean(mortality) )
)
print(m1, signif = 3)
autoplot(m1)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
dt[, mean(mortality), by = group],
#summarize( group_by(df, group), m = mean(mortality) ),
#summarize( group_by(dt, group), m = mean(mortality) )
)
df <- data.frame(group=factor(sample(c("g1","g2"), 10, replace=TRUE)),mortality=runif(10))
library(microbenchmark)
library(ggplot2)
#install.packages("dplyr")
library(plyr)
library(dplyr)
library(reshape2)
library(data.table)
dt<- data.table(df)
setkey(dt, mortality)
setDT(df)[ , .(mean_mortality =mean(mortality)), by = group]
splitmean <- function(df) {
s <- split( df, df$group)
sapply( s, function(x)
mean(x$mortality) )
}
splitmean(df)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean),
#dt[, mean(mortality), by = group],
summarize( group_by(df, group), m = mean(mortality) ),
summarize( group_by(dt, group), m = mean(mortality) )
)
print(m1, signif = 3)
autoplot(m1)
df <- data.frame(group=factor(sample(c("g1","g2"), 10, replace=TRUE)),mortality=runif(10))
library(microbenchmark)
library(ggplot2)
#install.packages("dplyr")
library(plyr)
library(dplyr)
library(reshape2)
library(data.table)
dt<- data.table(df)
setkey(dt, mortality)
setDT(df)[ , .(mean_mortality =mean(mortality)), by = group]
splitmean <- function(df) {
s <- split( df, df$group)
sapply( s, function(x)
mean(x$mortality) )
}
splitmean(df)
m1 <- microbenchmark(
by( df$mortality, df$group, mean),
aggregate(mortality~ group, df, mean ),
splitmean(df),
ddply( df, .(group), function(x) mean(x$mortality) ),
dcast( melt(df), variable ~ group, mean)
#dt[, mean(mortality), by = group],
#summarize( group_by(df, group), m = mean(mortality) ),
#summarize( group_by(dt, group), m = mean(mortality) )
)
print(m1, signif = 3)
autoplot(m1)
library(dplyr)
install.packages('tidyverse')
dataRx<-rxImport(indata=inFile)
ls
rxImport(inData='/home/animeshs/Downloads/mortality.csv')
library(RevoScaleR)
library("RevoScaleR")
library("RevoScaleR")
R.home()
.libPaths()
R_LIBS_SITE=/opt/microsoft/rclient/3.4.3/libraries/RServer
inputFileFlight <- paste0("/home/animeshs/Downloads/", "Flight_Delays_Sample.csv")
inputFileWeather <- paste0("/home/animeshs/Downloads/", "Weather_Sample.csv")
#Create a temporary directory to store the intermediate XDF files.
outFileFlight  <- "/home/animeshs/Downloads/flight.xdf"
outFileWeather <- "/home/animeshs/Downloads/weather.xdf"
outFileOrigin <-  "/home/animeshs/Downloads/originData.xdf"
outFileDest   <-  "/home/animeshs/Downloads/destData.xdf"
outFileFinal  <-  "/home/animeshs/Downloads/finalData.xdf"
flight_mrs <- rxImport(
inData = inputFileFlight, outFile = outFileFlight,
missingValueString = "M", stringsAsFactors = FALSE,
# Remove columns that are possible target leakers from the flight data.
varsToDrop = c("DepDelay", "DepDel15", "ArrDelay", "Cancelled", "Year"),
# Define "Carrier" as categorical.
colInfo = list(Carrier = list(type = "factor")),
# Round down scheduled departure time to full hour.
transforms = list(CRSDepTime = floor(CRSDepTime/100)),
overwrite = TRUE
)
#Review the first six rows of flight data.
head(flight_mrs)
#Summarize the flight data.
rxSummary(~., data = flight_mrs, blocksPerRead = 2)
#Import the weather data.
xform <- function(dataList) {
# Create a function to normalize some numerical features.
featureNames <- c(
"Visibility",
"DryBulbCelsius",
"DewPointCelsius",
"RelativeHumidity",
"WindSpeed",
"Altimeter"
)
dataList[featureNames] <- lapply(dataList[featureNames], scale)
return(dataList)
}
weather_mrs <- rxImport(
inData = inputFileWeather, outFile = outFileWeather,
missingValueString = "M", stringsAsFactors = FALSE,
# Eliminate some features due to redundance.
varsToDrop = c("Year", "Timezone",
"DryBulbFarenheit", "DewPointFarenheit"),
# Create a new column "DestAirportID" in weather data.
transforms = list(DestAirportID = AirportID),
# Apply the normalization function.
transformFunc = xform,
transformVars = c(
"Visibility",
"DryBulbCelsius",
"DewPointCelsius",
"RelativeHumidity",
"WindSpeed",
"Altimeter"
),
overwrite = TRUE
)
#Review the variable information for the weather data.
rxGetVarInfo(weather_mrs)
#Step 2: Pre-process Data
#Prepare for a merge by renaming some columns in the weather data.
newVarInfo <- list(
AdjustedMonth = list(newName = "Month"),
AdjustedDay = list(newName = "DayofMonth"),
AirportID = list(newName = "OriginAirportID"),
AdjustedHour = list(newName = "CRSDepTime")
)
rxSetVarInfo(varInfo = newVarInfo, data = weather_mrs)
#Concatenate/Merge flight records and weather data.
##Join flight records and weather data at origin of the flight `OriginAirportID`.
originData_mrs <- rxMerge(
inData1 = flight_mrs, inData2 = weather_mrs, outFile = outFileOrigin,
type = "inner", autoSort = TRUE,
matchVars = c("Month", "DayofMonth", "OriginAirportID", "CRSDepTime"),
varsToDrop2 = "DestAirportID",
overwrite = TRUE
)
##Join flight records and weather data using the destination of the flight `DestAirportID`.
destData_mrs <- rxMerge(
inData1 = originData_mrs, inData2 = weather_mrs, outFile = outFileDest,
type = "inner", autoSort = TRUE,
matchVars = c("Month", "DayofMonth", "DestAirportID", "CRSDepTime"),
varsToDrop2 = c("OriginAirportID"),
duplicateVarExt = c("Origin", "Destination"),
overwrite = TRUE
)
##Call the rxFactors() function to convert `OriginAirportID` and `DestAirportID` as categorical.
rxFactors(inData = destData_mrs, outFile = outFileFinal, sortLevels = TRUE,
factorInfo = c("OriginAirportID", "DestAirportID"),
overwrite = TRUE)
data <- read.table("/home/animeshs/Downloads/class.txt")
data
summary(data)
pairs(data)
model <- lm( Height ~ Age )
model <- lm( Height ~ Age , data = data)
model
summary(model)
lm_class<-rxLinMod(formula= Height~Weight, data =class_data[,-1])
class_data<-rxImport(inData = "/home/animeshs/Downloads/class.txt")
lm_class<-rxLinMod(formula= Height~Weight, data =class_data[,-1])
summary(lm_class)
data[,-1]
lm_class_basicR<-lm(formula= Height~Weight, data = data[,-1])
summary(lm_class_basicR)
summary(lm_class)
summary(lm_class_basicR,lm_class)
summary(lm_class)
summary(lm_class_basicR)
lm_class_basicR
rxGetInfo(outFileFinal)
rxGetInfo(outFileFinal,getVarInfo=TRUE)
lm_class_big<-rxLinMod(formula= WindSpeed.Destination~Altimeter.Destination, data =outFileFinal)
summary(lm_class_big)
scatter.smooth(WindSpeed.Destination,Altimeter.Destination)
scatter.smooth(WindSpeed.Destination,Altimeter.Destination,data=outFileFinal)
lm_class_big_basicR<-lm(formula= WindSpeed.Destination~Altimeter.Destination, data =outFileFinal)
lm_class_big_basicR<-lm(WindSpeed.Destination~Altimeter.Destination, data =outFileFinal)
lm_class_big<-rxLinMod(formula= WindSpeed.Destination~Altimeter.Destination, data =outFileFinal)
#Review the variable information for the weather data.
rxGetVarInfo(weather_mrs)
lm_class_basicR<-lm(formula= Height~Weight, data = data[,-1])
summary(lm_class_basicR)
lm_class_big_basicR<-lm(outFileFinal~Altimeter.Destination, data =outFileFinal)
outFileFinal[1]
rxHistogram(WindSpeed.Destination,Altimeter.Destination,data=outFileFinal)
rxHistogram(WindSpeed.Destination,data=outFileFinal)
rxHistogram(WindSpeed.Destination,dateInput=outFileFinal)
rxHistogram(~WindSpeed.Destination,dateInput=outFileFinal)
rxHistogram(~WindSpeed.Destination,data=outFileFinal)
scatter.smooth(~WindSpeed.Destination,~Altimeter.Destination,data=outFileFinal)
scatter(~WindSpeed.Destination,~Altimeter.Destination,data=outFileFinal)
big_data<-rxImport(inData = outFileFinal)
lm_class_big<-rxLinMod(formula= WindSpeed.Destination~Altimeter.Destination, data =big_data)
summary(lm_class_big)
lm_class_big_basicR<-lm(outFileFinal~Altimeter.Destination, data =big_data)
lm_class_big_basicR<-lm(WindSpeed.Destination~Altimeter.Destination, data =big_data)
summary(lm_class_big_basicR)
summary(lm_class_big)
summary(lm_class_big_basicR)
cheese_data<-rxImport(inData = "/home/animeshs/Downloads/class.txt")
lm_class_big<-rxLinMod(formula= age~gender, data = cheese_data)
cheese_data
lm_class_cheese<-rxLinMod(formula= Height~Age+Gender, data = cheese_data)
lm_class_cheese<-rxLinMod(formula= Height~Age+Gender, data = cheese_data)
recodedDF2 <- rxFactors(inData = cheese_data, sortLevels = TRUE,factorInfo = c("Gender"))
rxGetVarInfo(recodedDF2)
lm_class_cheese<-rxLinMod(formula= Height~Age+Gender, data = recodedDF2)
rxGetVarInfo(recodedDF2)
lm_class_cheese<-rxLinMod(formula= Height~Age+Gender, data = recodedDF2)
lm_class_gender<-rxLinMod(formula= Height~Age+Gender, data =recodedDF2)
rxGetVarInfo(recodedDF2)
recodedDF2
lm_class<-rxLinMod(formula= Height~Weight, data =class_data[,-1])
lm_class<-rxLinMod(formula= Height~Weight, data =class_data)
lm_class_gender<-rxLinMod(formula= Height~Age+Gender, data =recodedDF2[,-1])
summary(lm_class_gender)
rxGetVarInfo(recodedDF2)
cheese_data<-rxImport(inData = "/home/animeshs/Downloads/cheese.txt")
rxGetVarInfo(cheese_data)
lm_taste<-rxLinMod(formula= taste~Acetic, data =recodedDF2[,-1])
lm_taste<-rxLinMod(formula= taste~Acetic, data =cheese_data[,-1])
summary(lm_taste)
lm_taste<-rxLinMod(formula= taste~Lactic, data =cheese_data[,-1])
summary(lm_taste)
rxGetVarInfo(cheese_data)
lm_taste<-rxLinMod(formula= taste~H2S, data =cheese_data[,-1])
summary(lm_taste)
rxGetVarInfo(cheese_data)
lm_taste<-rxLinMod(formula= taste~Case, data =cheese_data[,-1])
summary(lm_taste)
lm_taste<-rxLinMod(formula= taste~Acetic*Lactic, data =cheese_data[,-1])
summary(lm_taste)
lm_taste<-rxLinMod(formula= taste~Acetic+Lactic, data =cheese_data[,-1])
summary(lm_taste)
lm_class_gender<-rxLinMod(formula= Height~Age+Gender,data =recodedDF2)
lm_class_gender<-rxLinMod(formula= Height~Age+Gender,data =recodedDF2[,-1])
summary(lm_class_gender)
rxGetVarInfo(recodedDF2)
rxGetVarInfo(cheese_data)
head(cheese_data)
rxHistogram(~Case,data=cheese_data)
recodedDF2 <- rxFactors(inData = cheese_data, sortLevels = TRUE,factorInfo = c("Case"))
rxGetVarInfo(recodedDF2)
lm_taste_case<-rxLinMod(formula= taste~Acetic+Lactic+Case, data =recodedDF2[,-1])
summary(lm_taste_case)
rxHistogram(~H2S,data=cheese_data)
cheese_data_logH2S<-rxDataStep(inData=cheese_data,transforms = list(logH2S = log(H2S)))
log(H2S)
cheese_data_logH2S<-rxDataStep(inData=cheese_data,transforms = list(logH2S = log2(H2S)))
cheese_data_logH2S<-rxDataStep(inData=cheese_data)#,transforms = list(logH2S = log2(H2S)))
cheese_data_logH2S<-rxDataStep(inData=cheese_data)#,transforms = list(logH2S = log2(H2S)))
cheese_data_logH2S<-rxDataStep(inData=cheese_data,transforms = list(logH2S = floor(H2S)))
rxHistogram(~.,data=cheese_data)
rxHistogram(~Acetic,data=cheese_data)
rxHistogram(~Lactic,data=cheese_data)
rxGetVarInfo(recodedDF2)
rxHistogram(~Taste,data=cheese_data)
rxHistogram(~taste,data=cheese_data)
rxHistogram(~H2S,data=cheese_data)
cheese_data_logH2S<-rxDataStep(inData=cheese_data,transforms = list(expression = floor(H2S)))
cheese_data_logH2S<-rxDataStep(inData=cheese_data,transforms = list(expression = (H2S)))
cheese_data_logH2S<-rxDataStep(inData=cheese_data,transforms = list(expression = H2S))
dataExampleNew1<-rxDataStep(inData=dataStep,transforms = list(expression = floor(ccExp/100)))
log(cheese_data_logH2S)
cheese_data_logH2S<-rxDataStep(inData=cheese_data,transforms = list(expression = H2S),overwrite = TRUE)
log(cheese_data)
log(cheese_data[,2])
summary(lm_taste_case)
rxGetVarInfo(recodedDF2)
log(cheese_data[,5])
hist(log(cheese_data[,5]))
cheese_data_logH2S<-rxDataStep(inData=cheese_data,transforms = list(logH2S = log(cheese_data[,5])),overwrite = TRUE)
cheese_data_logH2S<-rxDataStep(inData=cheese_data,transforms = list(logH2S = log(cheese_data[,5]),overwrite = TRUE)
cheese_data_logH2S<-rxDataStep(inData=cheese_data,transforms = list(logH2S = log(cheese_data[,5]),overwrite = TRUE)
hist(log(cheese_data[,5])))
log(cheese_data[,5])
log(cheese_data[,5])
cheese_data_logH2S<-rxDataStep(inData=cheese_data,transforms = list(logH2S = log(cheese_data[,5]),overwrite = TRUE)
log(cheese_data[,5]))
cheese_data_logH2S<-rxDataStep(inData=cheese_data,transforms = list(logH2S = log(cheese_data[,5]),overwrite = TRUE)
log(cheese_data[,5]))
cheese_data_logH2S<-rxDataStep(inData=cheese_data,transforms = list(logH2S = log(cheese_data[,5])),overwrite = TRUE)
cheese_data_logH2S<-rxDataStep(inData=cheese_data,transforms = list(logH2S = log(cheese_data[,5])),overwrite = TRUE)
log(cheese_data[,5])
hist(log(cheese_data[,5]))
lm_taste_case<-rxLinMod(formula= taste~H2S, data =recodedDF2[,-1])
summary(lm_taste_case)
lm_taste_case<-lm(formula= taste~H2S, data =recodedDF2[,-1])
summary(lm_taste_case)
lm_taste_case<-lm(formula= taste~log(H2S), data =recodedDF2[,-1])
summary(lm_taste_case)
logitmodel<-rxLogit(Gender~Height, 	data=recodedDF)
logitmodel<-rxLogit(Gender~Height, 	data=recodedDF2[,-1])
recodedDF2 <- rxFactors(inData = class_data, sortLevels = TRUE,factorInfo = c("Gender"))
logitmodel<-rxLogit(Gender~Height, 	data=recodedDF2[,-1])
summary(logitmodel)
brfss_data<-rxImport(inData = "/home/animeshs/Downloads/LLCP2013_sampled.csv")
rxGetVarInfo(brfss_data)
recodedDF2 <- rxFactors(inData = brfss_data, sortLevels = TRUE,factorInfo = c("X.RACE"))
rxGetVarInfo(recodedDF2)
logitmodel<-rxLogit(HLTHPLN1~X.RACE~HLTHPLN1,data=recodedDF2[,-1])
rxHistogram(HLTHPLN1,data=recodedDF2[,-1])
rxHistogram(HLTHPLN1)#,data=recodedDF2[,-1])
rxHistogram(~HLTHPLN1,data=recodedDF2[,-1])
rxHistogram(~X.RACE,data=recodedDF2[,-1])
logitmodel<-rxLogit(HLTHPLN1~X.RACE,data=recodedDF2[,-1])
recodedDF2[,-1]
logitmodel<-rxLogit(HLTHPLN1~X.RACE,data=recodedDF2)
rxHistogram(~HLTHPLN1,data=recodedDF2[,-1])
rxHistogram(~X.RACE,data=recodedDF2[,-1])
logitmodel<-rxLogit(HLTHPLN1~X.RACE,data=recodedDF2[,-1])
rxHistogram(~X.RACE,data=recodedDF2[,-1])
rxHistogram(~HLTHPLN1,data=recodedDF2[,-1])
logitmodel<-rxLogit(HLTHPLN1~X.RACE,data=recodedDF2[,-1])
logitmodel<-rxLogit(HLTHPLN1~X.RACE,data=recodedDF2[,-1],family=binomial)
logitmodel<-rxLogit(HLTHPLN1~X.RACE,family="binomial",data=recodedDF2[,-1])
logitmodel<-rxLogit(HLTHPLN1~X.RACE,family=binomial,data=recodedDF2[,-1])
#brfss_data<-rxImport(inData = "/home/animeshs/LLCP2013.XPT")
brfss<-read.csv("/home/animeshs/Downloads/LLCP2013_sampled.csv")
brfss$has_plan <- brfss$HLTHPLN1 == 1
brfss$X.RACE
summary(glm(has_plan ~ as.factor(brfss$X.RACE), data=brfss,family=binomial))
brfss_data<-rxImport(inData = "/home/animeshs/Downloads/LLCP2013_sampled.csv")
rxGetVarInfo(brfss_data)
recodedDF2 <- rxFactors(inData = brfss_data, sortLevels = TRUE,factorInfo = c("X.RACE"))
rxGetVarInfo(recodedDF2)
rxHistogram(~X.RACE,data=recodedDF2[,-1])
rxHistogram(~HLTHPLN1,data=recodedDF2[,-1])
logitmodel<-rxLogit(HLTHPLN1~X.RACE,data=recodedDF2[,-1])
logitmodel<-rxLogit(HLTHPLN1~X.RACE,family=binomial,data=recodedDF2[,-1])
summary(logitmodel)
summary(logitmodel)
logitmodel<-rxLogit(HLTHPLN1~X.RACE,family=binomial,data=recodedDF2[,-1])
summary(logitmodel)
logitmodel<-rxLogit(HLTHPLN1~X.RACE,family=binomial(),data=recodedDF2[,-1])
summary(logitmodel)
logitmodel<-rxLogit(HLTHPLN1~X.RACE,family=binomial(),data=recodedDF2[,-1])
logitmodel<-rxLogit(HLTHPLN1~X.RACE,family="binomial",data=recodedDF2[,-1])
logitmodel<-rxLogit(HLTHPLN1~X.RACE,data=recodedDF2[,-1],family="binomial")
logitmodel<-rxLogit(HLTHPLN1~X.RACE,data=recodedDF2[,-1])
logitmodel<-rxLogit(HLTHPLN1~X.RACE,data=recodedDF2[,-1],family="binomial")
logitmodel<-rxLogit(HLTHPLN1~X.RACE,data=recodedDF2[,-1],family=binomial)
logitmodel<-rxLogit(HLTHPLN1~X.RACE,data=recodedDF2[,-1],family=binomial())
binomial()
logitmodel<-rxLogit(HLTHPLN1~X.RACE,data=recodedDF2[,-1])
recodedDF2 <- rxFactors(inData = brfss_data, sortLevels = TRUE,factorInfo = c("X.RACE"))
brfss$has_plan
brfss_data$HLTHPLN1_has<- brfss_data$HLTHPLN1 == 1
rxGetVarInfo(recodedDF2)
rxHistogram(~HLTHPLN1_has,data=recodedDF2[,-1])
rxHistogram(~HLTHPLN1_has,data=recodedDF2[,-1])
brfss_data$HLTHPLN1_has
logitmodel<-rxLogit(HLTHPLN1_has~X.RACE,data=recodedDF2[,-1])
logitmodel<-rxLogit(HHLTHPLN1_has~X.RACE,data=recodedDF2[,-1],family=binomial())
summary(logitmodel)
logitmodel<-rxLogit(Gender~Height,data=recodedDF)
class_data<-rxImport(inData = "/home/animeshs/Downloads/class.txt")
recodedDF2 <- rxFactors(inData = class_data, sortLevels = TRUE,factorInfo = c("Gender"))
recodedDF <- rxFactors(inData = class_data, sortLevels = TRUE,factorInfo = c("Gender"))
logitmodel<-rxLogit(Gender~Height,data=recodedDF)
rxGetVarInfo(recodedDF)
logitmodel<-rxLogit(Gender~Height,data=recodedDF)
rxGetVarInfo(recodedDF)
logitmodel<-rxLogit(Gender~Height,data=recodedDF[,-1])
summary(logitmodel)
logitmodel_basic<-glm(Gender~Height,family=binomial,data=recordedDF)
recordedDF
class_data_basic<-rxImport(inData = "/home/animeshs/Downloads/class.txt")
class_data_basic<-read.csv("/home/animeshs/Downloads/class.txt")
class_data_basic
class_data_basic<-read.table("/home/animeshs/Downloads/class.txt")
class_data_basic
logitmodel_basic<-glm(Gender~Height,family=binomial,data=class_data_basic)
logitmodel_basic<-glm(Gender~Height,family=binomial,data=class_data_basic)
summary(logitmodel_basic)
class_data<-rxImport(inData = "/home/animeshs/Downloads/class.txt")
recodedDF <- rxFactors(inData = class_data, sortLevels = TRUE,factorInfo = c("Gender"))
rxGetVarInfo(recodedDF)
logitmodel<-rxLogit(Gender~Height,data=recodedDF[,-1])
summary(logitmodel)
summary(logitmodel_basic)
logitmodel<-rxLogit(Gender~Height,data=recodedDF[,-1])
summary(logitmodel)
rxHistogram(~X.RACE,data=recodedDF2[,-1])
#brfss_data<-rxImport(inData = "/home/animeshs/LLCP2013.XPT")
brfss<-read.csv("/home/animeshs/Downloads/LLCP2013_sampled.csv")
brfss$has_plan <- brfss$HLTHPLN1 == 1
brfss$X.RACE
summary(glm(has_plan ~ as.factor(brfss$X.RACE), data=brfss,family=binomial))
brfss_data<-rxImport(inData = "/home/animeshs/Downloads/LLCP2013_sampled.csv")
rxGetVarInfo(brfss_data)
recodedDF2 <- rxFactors(inData = brfss_data, sortLevels = TRUE,factorInfo = c("X.RACE"))
brfss_data$HLTHPLN1_has<- brfss_data$HLTHPLN1 == 1
rxGetVarInfo(recodedDF2)
rxHistogram(~X.RACE,data=recodedDF2[,-1])
rxHistogram(~HLTHPLN1,data=recodedDF2[,-1])
rxHistogram(~HLTHPLN1_has,data=recodedDF2[,-1])
logitmodel<-rxLogit(HLTHPLN1~X.RACE,data=recodedDF2[,-1])
logitmodel<-rxLogit(HHLTHPLN1_has~X.RACE,data=recodedDF2[,-1],family=binomial())
summary(logitmodel)
logitmodel<-rxLogit(HHLTHPLN1_has~X.RACE,data=recodedDF2[,-1],family=binomial())
summary(logitmodel)
summary(logitmodel_brfss)
logitmodel_brfss<-rxLogit(HHLTHPLN1_has~X.RACE,data=recodedDF2[,-1],family=binomial())
summary(logitmodel_brfss)
rxHistogram(~HLTHPLN1_has,data=recodedDF2[,-1])
complete.cases(recodedDF2)
class_data_basic<-read.table("/home/animeshs/Downloads/class.txt")
logitmodel_basic<-glm(Gender~Height,family=binomial,data=class_data_basic)
summary(logitmodel_basic)
class_data<-rxImport(inData = "/home/animeshs/Downloads/class.txt")
recodedDF <- rxFactors(inData = class_data, sortLevels = TRUE,factorInfo = c("Gender"))
rxGetVarInfo(recodedDF)
logitmodel<-rxLogit(Gender~Height,data=recodedDF[,-1])
summary(logitmodel)
rxHistogram(~Height,data=recodedDF[,-1])
rxHistogram(~log(Height),data=recodedDF[,-1])
class_data_basic<-read.table("/home/animeshs/Downloads/class.txt")
logitmodel_basic<-glm(Gender~Height,family=binomial,data=class_data_basic)
summary(logitmodel_basic)
class_data<-rxImport(inData = "/home/animeshs/Downloads/class.txt")
recodedDF <- rxFactors(inData = class_data, sortLevels = TRUE,factorInfo = c("Gender"))
rxGetVarInfo(recodedDF)
logitmodel<-rxLogit(Gender~Height,data=recodedDF[,-1])
summary(logitmodel)
rxHistogram(~Height,data=recodedDF[,-1])
