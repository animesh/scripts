#BiocManager::install("DEqMS")
library(DEqMS)
dat.log=dataNormImpFilter
boxplot(dat.log,las=2,main="")
cond = as.factor(c("w","w","r","r","r","w"))
design = model.matrix(~0+cond) # 0 means no intercept for the linear model
colnames(design) = gsub("cond","",colnames(design))
x <- c("r-w")
contrast =  makeContrasts(contrasts=x,levels=design)
fit1 <- lmFit(dat.log, design)
fit2 <- contrasts.fit(fit1,contrasts = contrast)
fit3 <- eBayes(fit2)
df.prot=dataClean[dataNormFilter$Red<selThr | dataNormFilter$White<selThr,]
library(matrixStats)
count_columns = "MS.MS.count."
#psm.count.table = data.frame(count = rowMins(as.matrix(df.prot[,grep(count_columns, names(df.prot))])))+1
#rownames(fit3$coefficients)
fit3$count = rowMins(as.matrix(df.prot[,grep(count_columns, names(df.prot))]))+1
fit4 = spectraCounteBayes(fit3)
# n=30 limits the boxplot to show only proteins quantified by <= 30 PSMs.
VarianceBoxplot(fit4,n=30,main=inpD,xlab="PSM count")
VarianceScatterplot(fit4,main=inpD)
DEqMS.results = outputResult(fit4,coef_col = 1)
#if you are not sure which coef_col refers to the specific contrast,type
head(fit4$coefficients)
# a quick look on the DEqMS results table
head(DEqMS.results)
# Save it into a tabular text file
write.table(DEqMS.results,paste0(inpD,hdr,"DEqMS.results.txt"),sep = "\t",row.names = F,quote=F)
#install.packages("ggrepel")
library(ggrepel)
# Use ggplot2 allows more flexibility in plotting
DEqMS.results$log.sca.pval = -log10(DEqMS.results$sca.P.Value)
ggplot(DEqMS.results, aes(x = logFC, y =log.sca.pval )) +
geom_point(size=0.5 )+
theme_bw(base_size = 16) + # change theme
xlab(expression("log2(red/white)")) + # x-axis label
ylab(expression(" -log10(P-value)")) + # y-axis label
geom_vline(xintercept = c(-1,1), colour = "red") + # Add fold change cutoffs
geom_hline(yintercept = 2, colour = "red") + # Add significance cutoffs
geom_vline(xintercept = 0, colour = "black") + # Add 0 lines
scale_colour_gradient(low = "black", high = "black", guide = FALSE)+
geom_text_repel(data=subset(DEqMS.results, abs(logFC)>1&log.sca.pval > 2),
aes( logFC, log.sca.pval ,label=gene)) # add gene label
#fit4$p.value = fit4$sca.p
#volcanoplot(fit4,coef=1, style = "p-value", highlight = 10,names=rownames(fit4$coefficients))
# Chunk 32: DEqMS-peptides
fit3$count = rowMins(as.matrix(df.prot[,grepl("^Peptides\\.[0-9]+", names(df.prot))]))+1
min(fit3$count)
fit4 = spectraCounteBayes(fit3)
VarianceBoxplot(fit4, n=20, main = hdr,xlab="peptide count + 1")
DEqMS.results = outputResult(fit4,coef_col = 1)
DEqMS.results$Gene.name = df.prot[DEqMS.results$gene,]$Gene.names
head(DEqMS.results)
write.table(DEqMS.results,paste0(inpD,hdr,"R-W.DEqMS.pep.results.txt"),sep = "\t",row.names = F,quote=F)
head(DEqMS.results)
VarianceBoxplot(fit4,n=20)
#peptideProfilePlot(dat=df.prot)#,col=2,gene="TGFBR2")
VarianceScatterplot(fit4, xlab="log2(LFQ)")
limma.prior = fit4$s2.prior
abline(h = log(limma.prior),col="green",lwd=3 )
legend("topright",legend=c("DEqMS prior variance","Limma prior variance"),
col=c("red","green"),lwd=3)
op <- par(mfrow=c(1,2), mar=c(4,4,4,1), oma=c(0.5,0.5,0.5,0))
Residualplot(fit4,  xlab="log2(PSM count)",main="DEqMS")
x = fit3$count
y = log(limma.prior) - log(fit3$sigma^2)
plot(log2(x),y,ylim=c(-6,2),ylab="Variance(estimated-observed)", pch=20, cex=0.5,
xlab = "log2(PSMcount)",main="Limma")
#install.packages("LSD")
library(LSD)
op <- par(mfrow=c(1,2), mar=c(4,4,4,1), oma=c(0.5,0.5,0.5,0))
x = fit3$count
y = fit3$s2.post
heatscatter(log2(x),log(y),pch=20, xlab = "log2(PSMcount)",
ylab="log(Variance)",
main="Posterior Variance in Limma")
y = fit4$sca.postvar
heatscatter(log2(x),log(y),pch=20, xlab = "log2(PSMcount)",
ylab="log(Variance)",
main="Posterior Variance in DEqMS")
# Chunk 33: MSstats
#https://bioconductor.org/packages/3.3/bioc/vignettes/MSstats/inst/doc/MSstats-manual.pdf
library('MSstats')
QuantData<-dataProcess(SRMRawData)
head(QuantData$ProcessedData)
## based on multiple comparisons (T1 vs T3; T1 vs T7; T1 vs T9)
comparison1<-matrix(c(-1,0,1,0,0,0,0,0,0,0),nrow=1)
comparison2<-matrix(c(-1,0,0,0,0,0,1,0,0,0),nrow=1)
comparison3<-matrix(c(-1,0,0,0,0,0,0,0,1,0),nrow=1)
comparison<-rbind(comparison1,comparison2, comparison3)
row.names(comparison)<-c("T3-T1","T7-T1","T9-T1")
testResultMultiComparisons<-groupComparison(contrast.matrix=comparison,data=QuantData)
## Calculate sample size for future experiments:
#(1) Minimal number of biological replicates per condition
designSampleSize(data=testResultMultiComparisons$fittedmodel,numSample=TRUE,
desiredFC=c(1.25,1.75),FDR=0.05,power=0.8)
#(2) Power calculation
designSampleSize(data=testResultMultiComparisons$fittedmodel,numSample=2,
desiredFC=c(1.25,1.75),FDR=0.05,power=TRUE)```
# Chunk 34: SAM
#https://github.com/MikeJSeo/SAM
install.packages(c("samr", "matrixStats", "GSA", "shiny", "shinyFiles", "openxlsx"))
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
library(shiny)
library(shinyFiles)
runGitHub("SAM", "MikeJSeo")
# Chunk 35: NA
#impute(data, method = "mixed",randna = fData(naset)$randna,mar = "knn", mnar = "min")
md.pattern(datasel)
dataimp <- mice(datasel,m=length(colnames(datasel))/2,maxit=length(colnames(datasel)),meth='pmm',seed=1)
dataimp <- complete(dataimp,length(colnames(datasel))/2)
heatmap(as.matrix(dataimp),col=colscl)
# Chunk 36: Scale
datascale=t(scale(t(dataimp))) # takes away the polynomial in YFP data
heatmap(as.matrix(datascale),col=colscl)
# Chunk 37: DistCor
dataasmat<-data.matrix(datascale)
cor(data)
dissimilarityc <- 1 - cor(dataasmat,method = "s")
distancec <- as.dist(dissimilarityc)
col.clus <- hclust(distancec, "aver")
dissimilarityr <- 1 - cor(t(dataasmat),method = "s")
distancer <- as.dist(dissimilarityr)
row.clus <- hclust(distancer, "aver")
heatmap(as.matrix(datascale),col=colscl)
cr <- rainbow(nrow(dataasmat))
cc <- rainbow(ncol(dataasmat))
heatmap((na.omit(dataasmat)), RowSideColors = cr, ColSideColors = cc,Rowv = as.dendrogram(row.clus), Colv = as.dendrogram(col.clus),cexRow=1.5,cexCol=1.5 )
# Chunk 38: Quantile
dataasmat<-normalize.quantiles(dataasmat)
rn<-rownames(dataasmat)
cn<-colnames(dataasmat)
colnames(dataasmat)<-cn
rownames(dataasmat)<-rn
# Chunk 39: AdjPval
p.adjust(10^(-data$X.log10P),method = c("hochberg"), n = length(data$X.log10P))
p.adjust(data$pv,method = c("hochberg"), n = length(data$pv))
# Chunk 40: ROTS
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
#BiocManager::install("ROTS")
dataNormImpCom<-yyt
#dataNormImpCom[dataNormImpCom==0]=5
summary(dataNormImpCom)
library(ROTS)
input = dataNormImpCom
#colnames(dataNormImpCom)<-sub("X","",colnames(dataNormImpCom))
colnames(dataNormImpCom)
groups = label#$Code
groups
results = ROTS(data = dataNormImpCom, groups = as.numeric(groups$Location) , B = 250 , K = 1000 , seed = 42)
names(results)
fdrThr<-0.01
uniP<-summary(results, fdr = fdrThr)
#?plot
#plot(results, fdr = fdrThr, type = "volcano")
plot(results, fdr = fdrThr, type = "heatmap")
# Chunk 41: randomtree
set.seed(42)
yy<-rbind(y$data,label$Treatment)
yyt<-t(yy)
summary(yyt)
yyt=as.data.frame(yyt)
colnames(yyt) <- gsub(";", "_", colnames(yyt))
colnames(yyt) <- gsub(":", "__", colnames(yyt))
colnames(yyt) <- gsub("-", "___", colnames(yyt))
summary(yyt)
ind=sample(2,nrow(yyt),replace=TRUE,prob=c(0.75,0.25))
yyt.training=yyt[ind==1,]
yyt.test=yyt[ind==2,]
library("rpart")
library("rpart.plot")
tree=rpart(data=yyt.training,V4500~.,method="class",control=rpart.control(minsplit=10,minbucket=5),parms=list(split="information"))
rpart.plot(tree,main="Classification tree for the yyt data (using 75% of data as training set)",extra=101)
library(randomForest)
set.seed(42)
#yyt=as.data.frame(yyt)
random_forest=randomForest(data=yyt.training,V4500~.,impurity='gini',ntree=200,replace=TRUE)
print(random_forest)
plot(random_forest)
legend("top",cex=0.8,legend=colnames(random_forest$err.rate),lty=c(1,2,3),col=c(1,2,3),horiz=T)
predictions=predict(random_forest,newdata=yyt.training,type="class")
actuals=yyt.training$V4500
table(actuals,predictions)
accuracy=sum(diag(confusion.matrix))/sum(confusion.matrix)
print(accuracy)
sort(importance(random_forest))
varImpPlot(random_forest)
#qplot(RCN1,GALNT2,data=yyt,colour=class,size=I(3))
# Chunk 42: write
#install.packages('dplyr')
#library(dplyr)
colnames(y$data)
yy<-rbind(y$data,label$Treatment)
yy<-t(yy)
write.csv(yy,paste0(inpF,".scaleWithclass.csv"))
install.packages(c("samr", "matrixStats", "GSA", "shiny", "shinyFiles", "openxlsx"))
dataNormFilter<-dataNorm
dataNormFilter[dataNormFilter==-Inf]=NA
colnames(dataNormFilter)<-sub(hdr,"",colnames(dataNormFilter))
summary(dataNormFilter)
selThr<-3
dataNormFilter$INRTI = apply(dataNormFilter,1,function(x) sum(is.na(x[1:5])))
dataNormFilter$IRTI = apply(dataNormFilter,1,function(x) sum(is.na(x[6:10])))
dataNormFilter$HCTI = apply(dataNormFilter,1,function(x) sum(is.na(x[11:15])))
dataNormFilter$INRSI = apply(dataNormFilter,1,function(x) sum(is.na(x[16:20])))
dataNormFilter$IRSI = apply(dataNormFilter,1,function(x) sum(is.na(x[21:25])))
dataNormFilter$HCSI = apply(dataNormFilter,1,function(x) sum(is.na(x[26:30])))
summary(dataNormFilter)
dataNormFilter[is.na(dataNormFilter)]<-rnorm(sum(dataNorm==-Inf),mean=mean(dataNorm[dataNorm!=-Inf])-10,sd=sd(dataNorm[dataNorm!=-Inf])/10)
summary(dataNormFilter)
hist(as.matrix(dataNormFilter))
inpD <-"L:/promec/Elite/LARS/2018/november/Rolf final/txt/"
data <- read.delim(paste0(inpD,"proteinGroups.txt"),row.names=1,sep="\t",header = T)
summary(data)
inpD <-"L:/promec/Elite/LARS/2018/november/Rolf final/txt/"
data <- read.delim(paste0(inpD,"proteinGroups.txt"),row.names=1,sep="\t",header = T)
summary(data)
inpD <-"F:/promec/Elite/LARS/2018/november/Rolf final/txt/"
data <- read.delim(paste0(inpD,"proteinGroups.txt"),row.names=1,sep="\t",header = T)
summary(data)
decoyPrefix="REV"
dataClean<-data[-grep(decoyPrefix, rownames(data)),]
dfNoRev = data[!data$Reverse=="+",]
setdiff(rownames(dataClean),rownames(dfNoRev))
setdiff(rownames(dfNoRev),rownames(dataClean))
decoyPrefix="REV__"
dataClean<-data[-grep(decoyPrefix, rownames(data)),]
setdiff(rownames(dataClean),rownames(dfNoRev))
setdiff(rownames(dfNoRev),rownames(dataClean))
contaminantPrefix="CON__"
#dataClean<-dataClean[-grep(contaminantPrefix, rownames(dataClean)),]
dataClean=dataClean[!dataClean$Potential.contaminant=="+",]
#dataClean=dataClean[!dataClean$Only.identified.by.site=="+",]
summary(dataClean)
hdr="LFQ.intensity."
dataNorm=log2(dataClean[,grep(hdr, names(dataClean))])
summary(dataNorm)
hist(as.matrix(dataNorm))
hdr="LFQ.intensity."
dataNorm=log2(dataClean[,grep(hdr, names(dataClean))])
summary(dataNorm)
hist(as.matrix(dataNorm))
dataNormFilter<-dataNorm
dataNormFilter[dataNormFilter==-Inf]=NA
summary(dataNormFilter)
selThr<-2
dataNormFilter$Red = apply(dataNormFilter,1,function(x) sum(is.na(x[3:5])))
dataNormFilter$White = apply(dataNormFilter,1,function(x) sum(is.na(x[c(1,2,6)])))
dataNormFilter.Select = dataNormFilter[dataNormFilter$Red<selThr | dataNormFilter$White<selThr,1:6]
summary(dataNormFilter.Select)
dataNormFilter<-dataNorm
dataNormFilter[dataNormFilter==-Inf]=NA
summary(dataNormFilter)
selThr<-2
dataNormFilter$Red = apply(dataNormFilter,1,function(x) sum(is.na(x[3:5])))
dataNormFilter$White = apply(dataNormFilter,1,function(x) sum(is.na(x[c(1,2,6)])))
dataNormFilter.Select = dataNormFilter[dataNormFilter$Red<selThr | dataNormFilter$White<selThr,1:6]
summary(dataNormFilter.Select)
dataNormFilter<-dataNorm
dataNormFilter[dataNormFilter==-Inf]=NA
summary(dataNormFilter)
selThr<-2
dataNormFilter$Red = apply(dataNormFilter,1,function(x) sum(is.na(x[3:5])))
dataNormFilter$White = apply(dataNormFilter,1,function(x) sum(is.na(x[c(1,2,6)])))
dataNormFilter.Select = dataNormFilter[dataNormFilter$Red<selThr | dataNormFilter$White<selThr,1:6]
summary(dataNormFilter.Select)
#https://bioconductor.org/packages/release/bioc/vignettes/VennDetail/inst/doc/VennDetail.html
#install.packages('BiocManager')
#BiocManager::install("VennDetail")
library(VennDetail)
#ven <- venndetail(list(dat=dataClean$Majority.protein.IDs,daf=df.prot$Majority.protein.IDs))
#plot(ven)
#head(dataNorm$LFQ.intensity.15+dataNorm$LFQ.intensity.12)
#ven <- venndetail(list(Red = dataNorm$LFQ.intensity.19+dataNorm$LFQ.intensity.26+dataNorm$LFQ.intensity.29, White = dataNorm$LFQ.intensity.15+dataNorm$LFQ.intensity.12+dataNorm$LFQ.intensity.30))
ven <- venndetail(list(Red = dataNormFilter$Red, White = dataNormFilter$White))
#ven <- venndetail(dataNorm)
plot(ven)
plot(ven, type = "vennpie")
decoyPrefix="REV"
dataClean<-data[-grep(decoyPrefix, rownames(data)),]
dfNoRev = data[!data$Reverse=="+",]
setdiff(rownames(dataClean),rownames(dfNoRev))
setdiff(rownames(dfNoRev),rownames(dataClean))
decoyPrefix="REV__"
dataClean<-data[-grep(decoyPrefix, rownames(data)),]
setdiff(rownames(dataClean),rownames(dfNoRev))
setdiff(rownames(dfNoRev),rownames(dataClean))
contaminantPrefix="CON__"
#dataClean<-dataClean[-grep(contaminantPrefix, rownames(dataClean)),]
dataClean=dataClean[!dataClean$Potential.contaminant=="+",]
#dataClean=dataClean[!dataClean$Only.identified.by.site=="+",]
summary(dataClean)
hdr="LFQ.intensity."
dataNorm=log2(dataClean[,grep(hdr, names(dataClean))])
summary(dataNorm)
hist(as.matrix(dataNorm))
dataNormFilter<-dataNorm
dataNormFilter[dataNormFilter==-Inf]=NA
summary(dataNormFilter)
selThr<-2
dataNormFilter$Red = apply(dataNormFilter,1,function(x) sum(is.na(x[3:5])))
dataNormFilter$White = apply(dataNormFilter,1,function(x) sum(is.na(x[c(1,2,6)])))
dataNormFilter.Select = dataNormFilter[dataNormFilter$Red<selThr | dataNormFilter$White<selThr,1:6]
summary(dataNormFilter.Select)
#install.packages('eulerr')
library(eulerr)
euler(dataNormFilter[,8:7]<2,shape="ellipse")$original.values
vplot<-plot(euler(dataNormFilter[,8:7]<selThr,shape="ellipse"),quantities=TRUE, col="black",fill=c("white","red"),main="Identified Protein Groups in Salmon Types")
#plot(euler(c(dataNormFilter$Red, dataNormFilter$White),shape="ellipse"),quantities=TRUE)
#euler(dataNorm<.5)$original.values
ggsave(file=paste0(inpD,hdr,"venn.svg"),plot=vplot)#,  width=6, height=6)
#install.packages('eulerr')
library(eulerr)
euler(dataNormFilter[,8:7]<2,shape="ellipse")$original.values
vplot<-plot(euler(dataNormFilter[,8:7]<selThr,shape="ellipse"),quantities=TRUE, col="black",fill=c("white","red"),main="Identified Protein Groups in Salmon Types")
plot(euler(c(dataNormFilter$Red, dataNormFilter$White),shape="ellipse"),quantities=TRUE)
#euler(dataNorm<.5)$original.values
library(ggplot)
ggsave(file=paste0(inpD,hdr,"venn.svg"),plot=vplot)#,  width=6, height=6)
#euler(dataNorm<.5)$original.values
library(ggplot)
#install.packages('eulerr')
library(eulerr)
euler(dataNormFilter[,8:7]<2,shape="ellipse")$original.values
vplot<-plot(euler(dataNormFilter[,8:7]<selThr,shape="ellipse"),quantities=TRUE, col="black",fill=c("white","red"),main="Identified Protein Groups in Salmon Types")
plot(euler(c(dataNormFilter$Red, dataNormFilter$White),shape="ellipse"),quantities=TRUE)
#euler(dataNorm<.5)$original.values
library(ggplot2)
ggsave(file=paste0(inpD,hdr,"venn.svg"),plot=vplot)#,  width=6, height=6)
plot(euler(c(dataNormFilter$Red, dataNormFilter$White),shape="ellipse"),quantities=TRUE)
#install.packages('eulerr')
library(eulerr)
euler(dataNormFilter[,8:7]<2,shape="ellipse")$original.values
vplot<-plot(euler(dataNormFilter[,8:7]<selThr,shape="ellipse"),quantities=TRUE, col="black",fill=c("white","red"),main="Identified Protein Groups in Salmon Types")
plot(vplot)
library(ggplot2)
ggsave(file=paste0(inpD,hdr,"venn.svg"),plot=vplot)#,  width=6, height=6)
dataNormImp<-dataNorm
set.seed(1)
dataNormImp[dataNormImp==-Inf]<-rnorm(sum(dataNormImp==-Inf),mean=mean(dataNormImp[dataNormImp!=-Inf])-10,sd=sd(dataNormImp[dataNormImp!=-Inf])/10)
summary(dataNormImp)
hist(as.matrix(dataNormImp))
dataNormImpFilter<-dataNormFilter.Select
summary(dataNormImpFilter)
set.seed(1)
#dataNormImpFilter[is.na(dataNormImpFilter)]<-rnorm(sum(is.na(dataNormImpFilter)),mean=mean(dataNormImpFilter[!is.na(dataNormImpFilter)])-3,sd=sd(!is.na(dataNormImpFilter))/3)
dataNormImpFilter[is.na(dataNormImpFilter)]<-rnorm(sum(is.na(dataNormImpFilter)),mean=mean(dataNormImpFilter[!is.na(dataNormImpFilter)])-12,sd=sd(!is.na(dataNormImpFilter))/12)
summary(dataNormImpFilter)
hist(as.matrix(dataNormImpFilter))
#install.packages('eulerr')
library(eulerr)
euler(dataNormFilter[,8:7]<2,shape="ellipse")$original.values
vplot<-plot(euler(dataNormFilter[,8:7]<selThr,shape="ellipse"),quantities=TRUE, col="black",fill=c("white","red"),main="Identified Protein Groups in Salmon Types")
plot(vplot)
#iinstall.packages("ggplot2")
#library(ggplot2)
#install.packages("svglite")
#library(svglite)
ggsave(file=paste0(inpD,hdr,"venn.svg"),plot=vplot)#,  width=6, height=6)
dataNormImpFilter<-dataNormFilter.Select
summary(dataNormImpFilter)
set.seed(1)
#dataNormImpFilter[is.na(dataNormImpFilter)]<-rnorm(sum(is.na(dataNormImpFilter)),mean=mean(dataNormImpFilter[!is.na(dataNormImpFilter)])-3,sd=sd(!is.na(dataNormImpFilter))/3)
dataNormImpFilter[is.na(dataNormImpFilter)]<-rnorm(sum(is.na(dataNormImpFilter)),mean=mean(dataNormImpFilter[!is.na(dataNormImpFilter)])-12,sd=sd(!is.na(dataNormImpFilter))/12)
summary(dataNormImpFilter)
hist(as.matrix(dataNormImpFilter))
dataNormImpCom<-dataNormImpFilter
plot(princomp(dataNormImpCom))
#biplot(prcomp(as.matrix(t(dataNormImpCom)),scale = T))
#biplot(prcomp(dataNormImpCom,scale = F))
#biplot(prcomp(dataNormImpCom,scale = T),col=c(1,8), cex=c(0.5, 0.4))
pVal = apply(dataNormImpFilter, 1, function(x) t.test(as.numeric(x[c(3:5)]),as.numeric(x[c(1,2,6)]),var.equal=T)$p.value)
logFC = rowMeans(dataNormImpFilter[,c(3:5)])-rowMeans(dataNormImpFilter[,c(1,2,6)])
ttest.results = data.frame(gene=rownames(dataNormImpFilter),logFC=logFC,P.Value = pVal, adj.pval = p.adjust(pVal,method = "BH"))
#ttest.results$PSMcount = psm.count.table[ttest.results$gene,"count"]
ttest.results = ttest.results[with(ttest.results, order(P.Value)), ]
head(ttest.results)
write.csv(ttest.results,file=paste0(inpD,hdr,"tTestBH.csv"))
plot(logFC,-log10(pVal))
plot(logFC,-log10(pVal),col="orange",)
dsub=subset(ttest.results,ttest.results$P.Value<0.05&abs(ttest.results$logFC)>0.58)
#rn<-do.call(rbind, strsplit(rownames(dsub), '\\.'))
rn<-strsplit(rownames(dsub), ';')
row.names(dsub) <- sapply(rn, "[", 1)#rn[[1]]
#g = ggplot(ttest.results,aes(logFC,-log10(P.Value)))+geom_point(aes(color=adj.pval)) + theme_bw(base_size=10) +geom_text(data=dsub,aes(label=row.names(dsub)),position = position_dodge(width=0.5), vjust=0.5, size=1) + xlab("Log2 Fold Change")  + ylab("-Log10 P-value") + ggtitle("Differentially expressed proteins") + scale_size_area()+scale_color_gradientn(colours = rainbow(4))
#g = ggplot(ttest.results,aes(logFC,-log10(P.Value)))+geom_point(aes(color=adj.pval)) + theme_bw(base_size=10) +geom_text(data=dsub,aes(label=row.names(dsub)), vjust=0.5, size=2) + xlab("Log2 Fold Change (Red-White)")  + ylab("-Log10 P-value") + ggtitle("Differentially expressed proteins") + scale_size_area()+scale_color_gradient(low="#FF9933", high="#99CC66")
#g = ggplot(ttest.results,aes(logFC,-log10(P.Value)))+geom_point(aes(color=adj.pval)) + theme_bw(base_size=10) +geom_text(data=dsub,aes(label=row.names(dsub)), vjust=0.5, size=2) + xlab("Log2 Fold Change (Red-White)")  + ylab("-Log10 P-value") + ggtitle("Differentially expressed proteins") + scale_size_area()+scale_color_gradient(low="#FF9933", high="#FFFFFF")+geom_point(alpha = 0.05)
g = ggplot(ttest.results,aes(logFC,-log10(P.Value)))+geom_point(aes(color=adj.pval),size=0.15) + theme_bw(base_size=10) +geom_text(data=dsub,aes(label=row.names(dsub)), vjust=0.5, size=1.5) + xlab("Log2 Fold Change (Red-White)")  + ylab("-Log10 P-value") + ggtitle("Differentially expressed proteins") + scale_size_area()+scale_color_gradient(low="#FF9933", high="#99CC66")
plot(g)
ggsave(file=paste0(inpD,hdr,"volcanoPlot.svg"),plot=g)#,  width=6, height=6)
plot(logFC,-log10(pVal),col="orange",)
plot(logFC,-log10(pVal),col="orange",)
pVal = apply(dataNormImpFilter, 1, function(x) t.test(as.numeric(x[c(3:5)]),as.numeric(x[c(1,2,6)]),var.equal=T)$p.value)
logFC = rowMeans(dataNormImpFilter[,c(3:5)])-rowMeans(dataNormImpFilter[,c(1,2,6)])
ttest.results = data.frame(gene=rownames(dataNormImpFilter),logFC=logFC,P.Value = pVal, adj.pval = p.adjust(pVal,method = "BH"))
#ttest.results$PSMcount = psm.count.table[ttest.results$gene,"count"]
ttest.results = ttest.results[with(ttest.results, order(P.Value)), ]
head(ttest.results)
write.csv(ttest.results,file=paste0(inpD,hdr,"tTestBH.csv"))
plot(logFC,-log10(pVal),col="orange",)
dsub=subset(ttest.results,ttest.results$P.Value<0.05&abs(ttest.results$logFC)>0.58)
#rn<-do.call(rbind, strsplit(rownames(dsub), '\\.'))
rn<-strsplit(rownames(dsub), ';')
row.names(dsub) <- sapply(rn, "[", 1)#rn[[1]]
g = ggplot(ttest.results,aes(logFC,-log10(P.Value)))+geom_point(aes(color=adj.pval),size=0.15) + theme_bw(base_size=10) +geom_text(data=dsub,aes(label=row.names(dsub)), vjust=0.5, size=1.5) + xlab("Log2 Fold Change (Red-White)")  + ylab("-Log10 P-value") + ggtitle("Differentially expressed proteins") + scale_size_area()+scale_color_gradient(low="#FF9933", high="#99CC66")
plot(g)
ggsave(file=paste0(inpD,hdr,"volcanoPlot.svg"),plot=g)#,  width=6, height=6)
#iocManager::install("ROTS")#, version = "3.8")
dataNormImpCom<-dataNormImpFilter#[is.na(dataNormImpCom)]=5
summary(dataNormImpCom)
factors<-c(1,1,2,2,2,1)
library(ROTS)
results = ROTS(data = dataNormImpCom, groups = factors , B = 250 , K = 250 , seed = 42)
write.csv(summary(results, fdr = 1),file=paste0(inpD,hdr,"rots.csv"))
names(results)
summary(results, fdr = 0.05)
plot(results, fdr = 0.2, type = "pca")
plot(results, type = "volcano",fdr = 0.5)
plot(results, fdr = 0.2, type = "heatmap")
dsub=subset(ttest.results,ttest.results$P.Value<0.05&abs(ttest.results$logFC)>0.58)
#rn<-do.call(rbind, strsplit(rownames(dsub), '\\.'))
rn<-strsplit(rownames(dsub), ';')
row.names(dsub) <- sapply(rn, "[", 1)#rn[[1]]
g = ggplot(ttest.results,aes(logFC,-log10(P.Value)))+geom_point(aes(color=adj.pval),size=0.15) + theme_bw(base_size=10) +geom_text(data=dsub,aes(label=row.names(dsub)), vjust=0.5, size=1.5) + xlab("Log2 Fold Change (Red-White)")  + ylab("-Log10 P-value") + ggtitle("Differentially expressed proteins") + scale_size_area()+scale_color_gradient(low="#FF9933", high="#99CC66")
plot(g)
ggsave(file=paste0(inpD,hdr,"volcanoPlot.svg"),plot=g)#,  width=6, height=6)
View(ttest.results)
View(dataNormImpFilter)
View(dataNormFilter.Select)
View(dataNormFilter)
View(dataNorm)
View(data)
dsub=data[,grep("Merc",data$Fasta.headers)]
dsub=data[,grep("apo",data$Fasta.headers)]
data$Fasta.headers
dsub=data[,grep("apo",data$Fasta.headers)]
dsub=data[grep("apo",data$Fasta.headers)]
dsub=grep("apo",data$Fasta.headers)
dsub
dsub=data[grep("apo",data$Fasta.headers),]
View(dsub)
dsub=data[grep("apo",data$Fasta.headers),]
#dsub=subset(ttest.results,ttest.results$P.Value<0.05&abs(ttest.results$logFC)>0.58)
#rn<-do.call(rbind, strsplit(rownames(dsub), '\\.'))
rn<-strsplit(rownames(dsub), ';')
row.names(dsub) <- sapply(rn, "[", 1)#rn[[1]]
g = ggplot(ttest.results,aes(logFC,-log10(P.Value)))+geom_point(aes(color=adj.pval),size=0.15) + theme_bw(base_size=10) +geom_text(data=dsub,aes(label=row.names(dsub)), vjust=0.5, size=1.5) + xlab("Log2 Fold Change (Red-White)")  + ylab("-Log10 P-value") + ggtitle("Differentially expressed proteins") + scale_size_area()+scale_color_gradient(low="#FF9933", high="#99CC66")
plot(g)
ggsave(file=paste0(inpD,hdr,"volcanoPlot.svg"),plot=g)#,  width=6, height=6)
View(dfNoRev)
merge(dsub,ttest.results)
dsub=merge(dsub,ttest.results)
View(dsub)
dsub=data[grep("apo",data$Fasta.headers),]
dsub=merge(dsub,ttest.results,by="row.names")
View(dsub)
row.names(dsub)=dsub$Row.names
#dsub=subset(ttest.results,ttest.results$P.Value<0.05&abs(ttest.results$logFC)>0.58)
#rn<-do.call(rbind, strsplit(rownames(dsub), '\\.'))
rn<-strsplit(rownames(dsub), ';')
g = ggplot(ttest.results,aes(logFC,-log10(P.Value)))+geom_point(aes(color=adj.pval),size=0.15) + theme_bw(base_size=10) +geom_text(data=dsub,aes(label=row.names(dsub)), vjust=0.5, size=1.5) + xlab("Log2 Fold Change (Red-White)")  + ylab("-Log10 P-value") + ggtitle("Differentially expressed proteins") + scale_size_area()+scale_color_gradient(low="#FF9933", high="#99CC66")
plot(g)
ggsave(file=paste0(inpD,hdr,"volcanoPlot.svg"),plot=g)#,  width=6, height=6)
install.packages("LSD")
dsub=subset(ttest.results,ttest.results$P.Value<0.05&abs(ttest.results$logFC)>0.58)
#rn<-do.call(rbind, strsplit(rownames(dsub), '\\.'))
rn<-strsplit(rownames(dsub), ';')
row.names(dsub) <- sapply(rn, "[", 1)#rn[[1]]
g = ggplot(ttest.results,aes(logFC,-log10(P.Value)))+geom_point(aes(color=adj.pval),size=0.15) + theme_bw(base_size=10) +geom_text(data=dsub,aes(label=row.names(dsub)), vjust=0.5, size=1.5) + xlab("Log2 Fold Change (Red-White)")  + ylab("-Log10 P-value") + ggtitle("Differentially expressed proteins") + scale_size_area()+scale_color_gradient(low="#FF9933", high="#99CC66")
plot(g)
ggsave(file=paste0(inpD,hdr,"volcanoPlot.svg"),plot=g)#,  width=6, height=6)
dsub=data[grep("apo",data$Fasta.headers),]
dsub=merge(dsub,ttest.results,by="row.names")
rn<-strsplit(dsub$Row.names, ';')
row.names(dsub) <- sapply(rn, "[", 1)#rn[[1]]
g = ggplot(ttest.results,aes(logFC,-log10(P.Value)))+geom_point(aes(color=adj.pval),size=0.15) + theme_bw(base_size=10) +geom_text(data=dsub,aes(label=row.names(dsub)), vjust=0.5, size=1.5) + xlab("Log2 Fold Change (Red-White)")  + ylab("-Log10 P-value") + ggtitle("Differentially expressed proteins") + scale_size_area()+scale_color_gradient(low="#FF9933", high="#99CC66")
plot(g)
ggsave(file=paste0(inpD,hdr,"volcanoPlot.frac.svg"),plot=g)#,  width=6, height=6)
#install.packages('pheatmap')
library(pheatmap)
as.matrix(dsub[,grep("Fraction",colnames(dsub))])
#?pheatmap
y<-as.matrix(dsub[,grep("Fraction",colnames(dsub))])
summary(y)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,annotation_col = label,show_rownames=F)
y[is.na(y)]<-0
summary(y)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,annotation_col = label,show_rownames=F)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
#install.packages('pheatmap')
library(pheatmap)
#?pheatmap
y<-as.matrix(dsub[,grep("Fraction ",colnames(dsub))])
y[is.na(y)]<-0
summary(y)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
#ggsave(file=paste0(inpF,"corrcoefED.svg"), plot=svgPHC, width=6, height=6)
plot(svgPHC)
ggsave(file=paste0(inpD,hdr,"clusterPlot.frac.svg"),plot=svgPHC)#,  width=6, height=6)
summary(y)
#?pheatmap
y<-as.matrix(dsub[,lgrep("Fraction\\.[0-9]+",colnames(dsub))])
#?pheatmap
y<-as.matrix(dsub[,grepl("Fraction\\.[0-9]+",colnames(dsub))])
summary(y)
y[is.na(y)]<-0
summary(y)
svgPHC<-pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)#,annotation_col = label,show_rownames=F)
ggsave(file=paste0(inpD,hdr,"clusterPlot.frac.svg"),plot=svgPHC)#,  width=6, height=6)
