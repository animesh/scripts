summary(y)
hist(as.matrix(y[-1]))
plot(y)
library(pheatmap)
y[is.infinite(y)]<-0
pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)
library(quantable)
y=robustscale(log2(data*100))
y=robustscale((y))
data[,-(which(colSums(data) == 0))]
data[-(which(colSums(data) == 0)),]
summary(y$data)
y$data[is.na(y$data)]<-0
names(y$data)=sub("X","",names(y$data))
hist(as.matrix((y$data)))
pheatmap(y$data,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)
grepl("phag",row.names( data ) )
phageD<-data[grepl( "phage" , row.names( data ) ),  ]
phageDn0<-phageD[,-(which(colSums(phageD) == 0))]
#phageDn0<-phageDn0[-(which(rowSums(phageDn0) == 0)),]
write.table(phageDn0,paste0(fileP,"phageDn0.txt"),sep="\t",quote=FALSE,col.names=TRUE,row.names=TRUE)
pheatmap(phageDn0,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)
colnames(phageDn0)=sub("X.","",colnames(phageDn0))
colnames(phageDn0)=sub(".QUALITY_PASSED..0","",colnames(phageDn0))
label<-read.table("L:/promec/Animesh/HeLa/ayu/new/class.txt",header=T,row.names=1,sep="\t")
colnames(label)
summary(label)
library(ggplot2)
ggsave(file=paste0(fileP,"phageD.svg"), plot=pheatmap(phageDn0,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,annotation_col = label), width=6, height=6)
dev.off()
svgPHC<-pheatmap(phageDn0,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,annotation_col = label)
ggsave(file=paste0(fileP,"phageD.svg"), plot=svgPHC, width=6, height=6)
?wilcox.test
svgPHC<-pheatmap(phageDn0,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,annotation_col = label)
summary(label)
label
summary(label)
phageDn0
fileP<-"L:/promec/Animesh/HeLa/ayu/new/"
data<-read.table(paste0(fileP,"krakencountcomb.txt"),sep = "\t",header = T,row.names = 1)
row.names(data)<-paste(data[,1],row.names(data))
data<-data[,-1]
summary(data)
hist(as.matrix((data)))
typeof(data)
y=as.matrix(log2(data*100+1))
apply(y,1,function(x) !all(x==0))
data[apply(data,1,function(x) !all(x==0))==T,]
y<-y[apply(y, 1, function(x) !all(x==0)),]
y<-y[,apply(y, 2, function(x) !all(x==0))]
summary(y)
hist(as.matrix(y[-1]))
plot(y)
library(pheatmap)
y[is.infinite(y)]<-0
pheatmap(y,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)
library(quantable)
y=robustscale(log2(data*100))
y=robustscale((y))
data[,-(which(colSums(data) == 0))]
data[-(which(colSums(data) == 0)),]
summary(y$data)
y$data[is.na(y$data)]<-0
names(y$data)=sub("X","",names(y$data))
hist(as.matrix((y$data)))
pheatmap(y$data,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)
grepl("phag",row.names( data ) )
phageD<-data[grepl( "phage" , row.names( data ) ),  ]
phageDn0<-phageD[,-(which(colSums(phageD) == 0))]
#phageDn0<-phageDn0[-(which(rowSums(phageDn0) == 0)),]
write.table(phageDn0,paste0(fileP,"phageDn0.txt"),sep="\t",quote=FALSE,col.names=TRUE,row.names=TRUE)
pheatmap(phageDn0,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6)
colnames(phageDn0)=sub("X.","",colnames(phageDn0))
colnames(phageDn0)=sub(".QUALITY_PASSED..0","",colnames(phageDn0))
label<-read.table("L:/promec/Animesh/HeLa/ayu/new/class.txt",header=T,row.names=1,sep="\t")
colnames(label)
summary(label)
library(ggplot2)
ggsave(file=paste0(fileP,"phageD.svg"), plot=pheatmap(phageDn0,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,annotation_col = label), width=6, height=6)
dev.off()
svgPHC<-pheatmap(phageDn0,scale="row",clustering_distance_rows = "correlation",clustering_distance_cols = "correlation",fontsize_row=6,annotation_col = label)
ggsave(file=paste0(fileP,"phageD.svg"), plot=svgPHC, width=6, height=6)
library(randomForest)
install.packages("randomForest")
library(randomForest)
?randomForest
?kmeans
?kmeans
library(ROTS)
label
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
BiocManager::install("ROTS")
install.packages("BiocManager")
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
BiocManager::install("ROTS")
library(ROTS)
data(upsSpikeIn)
input = upsSpikeIn
groups = c(rep(0,3), rep(1,3))
groups
results = ROTS(data = input, groups = groups , B = 100 , K = 500 , seed = 1234)
names(results)
summary(results, fdr = 0.05)
plot(results, fdr = 0.2, type = "volcano")
input
inpF<-"L:/promec/Animesh/Lymphoma/Sel66.txt"
data<-read.table(inpF,header=T,sep="\t",row.names = 1)
summary(data)
inpL<-"L:/promec/Animesh/Lymphoma/Code.txt"
label<-read.table(inpL,header=T,row.names=1,sep="\t")
colnames(label)=sub("\\-[0-9]+","",colnames(label))
colnames(label)
summary(label)
yyt=as.matrix(data)
yyt
#yyt[,9]=as.factor(yyt[,9])
library(ggfortify)
#yyt.pca=prcomp(log.yyt,center=TRUE,scale.=TRUE)
yyt.pca=prcomp(yyt,center=TRUE,scale.=TRUE)
#yyt.pca=prcomp(log.yyt,center=TRUE,scale.=TRUE)
yyt[is.na(yyt)]<-0
yyt.pca=prcomp(yyt,center=TRUE,scale.=TRUE)
autoplot(yyt.pca,data=yyt,colour='label')
summary(label)
autoplot(yyt.pca,data=yyt,colour=label$Code)
yyt
summary(yyt)
yyt.pca=prcomp(yyt,center=TRUE,scale.=TRUE)
autoplot(yyt.pca,data=yyt,colour=label$Code)
#yyt[,9]=as.factor(yyt[,9])
library(ggfortify)
autoplot(yyt.pca,data=yyt,colour=label$Code)
autoplot(yyt.pca)#,data=yyt,colour=label$Code)
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
autoplot(yyt.pca)#,data=yyt,colour=label$Code)
autoplot(yyt.pca,data=yyt,colour=label$Code)
autoplot(yyt.pca,data=yyt,colour=t(label$Code))
t(label$Code)
t(yyt)
autoplot(yyt.pca,data=t(yyt),colour=t(label$Code))
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
autoplot(yyt.pca,data=t(yyt),colour=t(label$Code))
yyt.pca
dataNormImpCom<-yyt
dataNormImpCom
dataNormImpCom[dataNormImpCom==0]=5
summary(dataNormImpCom)
dataNormImpCom<-yyt
summary(dataNormImpCom)
library(ROTS)
input = dataNormImpCom
label$Code
label
groups
groups = label$Code
groups
results = ROTS(data = input, groups = groups , B = 100 , K = 500 , seed = 1234)
groups = label#$Code
groups
results = ROTS(data = input, groups = groups , B = 100 , K = 500 , seed = 1234)
results = ROTS(data = input, groups = groups$Code , B = 100 , K = 500 , seed = 1234)
names(input)
input = dataNormImpCom
names(input)
names(yyt)
colnames(yyt)
colnames(groups)
names(groups)
rownames(groups)
colnames(yyt)
colnames(yyt)<-sub("X","",colnames(yyt))
colnames(yyt)
results = ROTS(data = input, groups = groups$Code , B = 100 , K = 500 , seed = 1234)
results = ROTS(data = input, groups = groups$Code2 , B = 100 , K = 500 , seed = 1234)
colnames(yyt)
rownames(groups)
results = ROTS(data = input, groups = groups$Code2 , B = 100 , K = 500 , seed = 1234)
rownames(groups)
yyt[,colnames(yyt)==rownames(groups)]
colnames(yyt)
rownames(groups)
yyt[,rownames(groups)]
yyt<-yyt[,rownames(groups)]
results = ROTS(data = input, groups = groups$Code2 , B = 100 , K = 500 , seed = 1234)
results = ROTS(data = input, groups = groups$Code , B = 100 , K = 500 , seed = 1234)
groups$Code
groups$Code2
results = ROTS(data = yyt, groups = groups$Code2 , B = 100 , K = 500 , seed = 1234)
results = ROTS(data = yyt, groups = as.number(groups$Code2) , B = 100 , K = 500 , seed = 1234)
as.numeric(groups$Code2)
as.numeric(groups$Code2)
results = ROTS(data = yyt, groups = as.numeric(groups$Code2) , B = 100 , K = 500 , seed = 1234)
names(results)
summary(results, fdr = 0.05)
plot(results, fdr = 0.2, type = "volcano")
plot(results, fdr = 0.1, type = "volcano")
summary(results, fdr = 0.05)
results
names(results)
plot(results, fdr = 0.1, type = "volcano")
summary(results, fdr = 0.05)
plot(results, fdr = 0.05, type = "volcano")
uniP<-summary(results, fdr = 0.05)
View(uniP)
predictions=predict(tree,newdata=yyt.training,type="class")
library("rpart")
library("rpart.plot")
library("randomForest")
library("rpart.plot")
library("randomForest")
library("rpart")
library("rpart.plot")
install.packages("rpart.plot")
library("rpart.plot")
library("randomForest")
```{r SiB-Workshop - Day 4 â tree - lym - pred}
library("rpart")
library("rpart.plot")
library("randomForest")
predictions=predict(tree,newdata=yyt.training,type="class")
library(randomForest)
set.seed(100)
#yyt=as.data.frame(yyt)
random_forest=randomForest(data=yyt.training,class~.,impurity='gini',ntree=200,replace=TRUE)
set.seed(100)
yyt=as.data.frame(yyt)
colnames(yyt)[67] <- "class"
inpF<-"L:/promec/Animesh/Lymphoma/Log2L2HproteinGroupsPeptidesCheckTtestThr1p5FCPV5pUniprot .txt"
data<-read.table(inpF,header=T,sep="\t",row.names = 1)
data<-read.table(inpF,header=T,sep="\t",row.names = 78)
data<-read.table(inpF,header=T,sep="\t",row.names = 39)
inpF<-"L:/promec/Animesh/Lymphoma/Log2L2HproteinGroupsPeptidesCheckTtestThr1p5FCPV5pUniprot .txt"
data<-read.table(inpF,header=T,sep="\t",row.names = 39)
inpF<-"L:/promec/Animesh/Lymphoma/Log2L2HproteinGroupsPeptidesCheckTtestThr1p5FCPV5pFasta.txt"
data<-read.table(inpF,header=T,sep="\t",row.names = 39)
data<-read.table(inpF,header=T,sep="\t",row.names = 38)
data<-read.table(inpF,header=T,sep="\t",row.names = 40)
inpF<-"L:/promec/Animesh/Lymphoma/Log2L2HproteinGroupsPeptidesCheckTtestThr1p5FCPV5pFasta.txt"
data<-read.table(inpF,header=T,sep="\t",row.names = 1)
summary(data)
data
View(data)
inpL<-"L:/promec/Animesh/Lymphoma/Code.txt"
label<-read.table(inpL,header=T,row.names=1,sep="\t")
colnames(label)=sub("\\-[0-9]+","",colnames(label))
colnames(label)
summary(label)
yyt=as.matrix(data)
#yyt[,9]=as.factor(yyt[,9])
library(ggfortify)
#log.yyt=log(yyt[,1:8]+1)
#yyt.pca=prcomp(log.yyt,center=TRUE,scale.=TRUE)
yyt[is.na(yyt)]<-0
summary(yyt)
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
inpF<-"L:/promec/Animesh/Lymphoma/Log2L2HproteinGroupsPeptidesCheckTtestThr1p5FCPV5pFasta.txt"
data<-read.table(inpF,header=T,sep="\t",row.names = 1)
summary(data)
inpL<-"L:/promec/Animesh/Lymphoma/Code.txt"
label<-read.table(inpL,header=T,row.names=1,sep="\t")
colnames(label)=sub("\\-[0-9]+","",colnames(label))
colnames(label)
summary(label)
yyt=as.matrix(data)
yyt[,-(which(colSums(yyt) == 0))]
yyt=as.matrix(data)
yyt[,-(which(colSums(yyt) == 0))]
View(yyt)
yyt<-yyt[,-(which(colSums(yyt) == 0))]
yyt<-yyt[,-(which(colSums(yyt) == 0))]
inpF<-"L:/promec/Animesh/Lymphoma/Log2L2HproteinGroupsPeptidesCheckTtestThr1p5FCPV5pFasta.txt"
data<-read.table(inpF,header=T,sep="\t",row.names = 1)
summary(data)
inpL<-"L:/promec/Animesh/Lymphoma/Code.txt"
label<-read.table(inpL,header=T,row.names=1,sep="\t")
colnames(label)=sub("\\-[0-9]+","",colnames(label))
colnames(label)
summary(label)
yyt=as.matrix(data)
yyt[is.na(yyt)]<-0
yyt<-yyt[,-(which(colSums(yyt) == 0))]
yyt<-yyt[-(which(rowSums(yyt) == 0)),]
summary(yyt)
#yyt[,9]=as.factor(yyt[,9])
library(ggfortify)
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
autoplot(yyt.pca,data=t(yyt),colour=t(label$Code))
autoplot(yyt.pca,data=t(yyt))#,colour=t(label$Code))
colnames(yyt)<-sub("X","",colnames(yyt))
colnames(yyt)
inpL<-"L:/promec/Animesh/Lymphoma/Code.txt"
label<-read.table(inpL,header=T,row.names=1,sep="\t")
colnames(label)=sub("\\-[0-9]+","",colnames(label))
colnames(label)
summary(label)
groups = label#$Code
groups
yyt<-yyt[,rownames(groups)]
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
autoplot(yyt.pca,data=t(yyt))#,colour=t(label$Code))
autoplot(yyt.pca,data=t(yyt))#,colour=t(label$Code))
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
groups
yyt<-yyt[,rownames(groups)]
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
autoplot(yyt.pca,data=t(yyt))#,colour=t(label$Code))
yyt
View(yyt)
colnames(yyt)
yyt.pca=prcomp((yyt),center=TRUE,scale.=TRUE)
autoplot(yyt.pca,data=t(yyt))#,colour=t(label$Code))
autoplot(yyt.pca,data=(yyt))#,colour=t(label$Code))
yyt.pca=prcomp(t(yyt),center=TRUE,scale.=TRUE)
yyt<-yyt[,-(which(colSums(yyt) == 0))]
yyt<-yyt[-(which(rowSums(yyt) == 0)),]
which(rowSums(yyt)
)
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
#BiocManager::install("ROTS")
dataNormImpCom<-yyt
dataNormImpCom[dataNormImpCom==0]=5
summary(dataNormImpCom)
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
#BiocManager::install("ROTS")
dataNormImpCom<-yyt
#dataNormImpCom[dataNormImpCom==0]=5
summary(dataNormImpCom)
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
#BiocManager::install("ROTS")
dataNormImpCom<-yyt
#dataNormImpCom[dataNormImpCom==0]=5
summary(dataNormImpCom)
yyt
yyt=as.matrix(data)
yyt[is.na(yyt)]<-0
yyt<-yyt[,-(which(colSums(yyt) == 0))]
yyt<-yyt[-(which(rowSums(yyt) == 0)),]
summary(yyt)
#install.packages("BiocManager")
#BiocManager::install("ROTS", version = "3.8")
#BiocManager::install("ROTS")
dataNormImpCom<-yyt
#dataNormImpCom[dataNormImpCom==0]=5
summary(dataNormImpCom)
library(ROTS)
input = dataNormImpCom
colnames(yyt)<-sub("X","",colnames(yyt))
colnames(yyt)
groups = label#$Code
groups
yyt<-yyt[,rownames(groups)]
results = ROTS(data = yyt, groups = as.numeric(groups$Code2) , B = 100 , K = 500 , seed = 1234)
names(results)
uniP<-summary(results, fdr = 0.05)
plot(results, fdr = 0.05, type = "volcano")
uniP<-summary(results, fdr = 0.1)
fdrThr<-0.01
fdrThr<-0.01
uniP<-summary(results, fdr = fdrThr)
plot(results, fdr = fdrThr, type = "volcano")
fdrThr<-0.1
uniP<-summary(results, fdr = fdrThr)
plot(results, fdr = fdrThr, type = "volcano")
plot(results, fdr = fdrThr, type = "volcano")
as.numeric(groups$Code2)
results = ROTS(data = yyt, groups = as.numeric(groups$Code2) , B = 100 , K = 5000 , seed = 1234)
names(results)
fdrThr<-0.1
uniP<-summary(results, fdr = fdrThr)
plot(results, fdr = fdrThr, type = "volcano")
install.packages("eulerr")
install.packages(c("checkpoint", "cluster", "MASS", "Matrix", "mgcv", "nlme", "reticulate", "rpart", "RUnit", "survival"))
bioc_deps <- c("GO.db", "impute", "preprocessCore", "pvca","sva" )
cran_deps <- c("corrplot", "data.table", "ggplot2", "ggfortify","lazyeval", "pheatmap", "reshape2", "rlang",
"tibble", "dplyr", "tidyr", "wesanderson","WGCNA")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(bioc_deps)
install.packages(cran_deps)
install.packages(cran_deps)
install.packages("dplyr")
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager") BiocManager::install(bioc_deps) install.packages(cran_deps)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(bioc_deps)
install.packages(cran_deps)
install.packages(cran_deps)
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("processx")
library(devtools)
install.packages("dplyr")
library(devtools)
install.packages("fs")
library(devtools)
install_github("symbioticMe/proBatch", build_vignettes = TRUE)
BiocManager::install("proBatch")
BiocManager::install("proBatch")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(bioc_deps)
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("devtools")
library(devtools)
install_github("symbioticMe/proBatch", build_vignettes = TRUE)
inpD <-"F:\\promec\\Animesh\\HUNT\\txt106dpMBR\\"
data <- read.delim(paste0(inpD,"proteinGroups.txt"),row.names=1,sep="\t",header = T)
summary(data)
decoyPrefix="REV"
contaminantPrefix="CON"
dataC="LFQ.intensity."
dataNorm=log2(data[,grep(dataC, names(data))])
#set.seed(1)
#dataNorm[dataNorm==0]<-NaN#rnorm(1,mean=mean(dataNorm),sd=sd(dataNorm))
dataNorm[dataNorm==-Inf]=NA
summary(dataNorm)
write.table(dataNorm,file=paste0(inpD,"log2data.txt"), sep = "\t")
factors=as.factor(sapply(strsplit(names(data)[grep(dataC, names(data))],"[0-9]+"),'[[', 2))
factors=as.integer(factors)
install.packages('mice')
#install.packages('mice')
library(mice)
install.packages('randomForest')
dataNormImp=mice(dataNorm, method="rf")
dataNormImpCom <- complete(dataNormImp,1)
row.names(dataNormImpCom)<-row.names(dataNorm)
summary(dataNormImpCom)
#write.csv(dataNormImpCom,file=paste0(inpD,"dataNormImpCom.csv"))
#write.csv(factors,file=paste0(inpD,"dataNormImpComFactor.csv"))
dataNormImpCom <- read.csv(paste0(inpD,"log2dataImp.csv"),row.names=1,header = T)
write.csv(dataNormImpCom,file=paste0(inpD,"log2dataImp.csv"))
#write.csv(dataNormImpCom,file=paste0(inpD,"log2dataImp.csv"))
#write.csv(factors,file=paste0(inpD,"dataNormImpComFactor.csv"))
dataNormImpCom <- read.csv(paste0(inpD,"log2dataImp.csv"),row.names=1,header = T)
dataNormImpCom
plot(princomp(dataNormImpCom))
biplot(prcomp(dataNormImpCom,scale = F))
biplot(princomp(dataNormImpCom))
biplot(princomp(dataNormImpCom,scale = T))
help(proBatch)
library(proBatch)
help(proBatch)
factors=as.factor(sapply(strsplit(names(data)[grep(dataC, names(data))],"[0-9]+"),'[[', 2))
factors=as.integer(factors)
factors
factors
biplot(princomp(t(dataNormImpCom),scale = T))
t(dataNormImpCom)
biplot(princomp(as.matrix(t(dataNormImpCom)),scale = T))
#install.packages('devtools')
#devtools::install_github("syspremed/exploBATCH",verbose=TRUE)
install.packages("DEqMS")
#install.packages('devtools')
#devtools::install_github("syspremed/exploBATCH",verbose=TRUE)
BiocManager::install("DEqMS")
#install.packages('devtools')
#devtools::install_github("syspremed/exploBATCH",verbose=TRUE)
BiocManager::install("DEqMS")
library(DEqMS)
boxplot(dataNormImpCom)
factors
design = model.matrix(~0+as.factor(factors))
design
colnames(design)
colnames(design)
colnames(design) = gsub("as.factor(factors)","",colnames(design))
colnames(design)
colnames(design)
colnames(design) = gsub("as\.factor\(factors\)","",colnames(design))
colnames(design) = gsub("as.factor\(factors\)","",colnames(design))
colnames(design) = gsub("as.factor(factors)","",colnames(design))
colnames(design)
colnames(design) = gsub("as\\.factor\\(factors\\)","",colnames(design))
colnames(design)
colnames(dataNormImpCom)
contrast =  makeContrasts(contrasts=colnames(dataNormImpCom),levels=design)
design
contrast =  makeContrasts(contrasts=colnames(design),levels=design)
url <- "ftp://ftp.pride.ebi.ac.uk/pride/data/archive/2016/06/PXD004163/Yan_miR_Protein_table.flatprottable.txt"
download.file(url, destfile = "./miR_Proteintable.txt",method = "auto")
df.prot = read.table("F:\\promec\\Animesh\\Yan_miR_Protein_table.flatprottable.txt",stringsAsFactors = FALSE,header = TRUE, quote = "", comment.char = "",sep = "\t")
# filter at 1% protein FDR and extract TMT quantifications
TMT_columns = seq(15,33,2)
dat = df.prot[df.prot$miR.FASP_q.value<0.01,TMT_columns]
rownames(dat) = df.prot[df.prot$miR.FASP_q.value<0.01,]$Protein.accession
# The protein dataframe is a typical protein expression matrix structure
# Samples are in columns, proteins are in rows
# use unique protein IDs for rownames
# to view the whole data frame, use the command View(dat)
dat.log = log2(dat)
#remove rows with NAs
dat.log = na.omit(dat.log)
boxplot(dat.log,las=2,main="TMT10plex data PXD004163")
dat.log
dat
df.prot
df.prot = read.table("F:\\promec\\Animesh\\Yan_miR_Protein_table.flatprottable.txt",stringsAsFactors = FALSE,header = TRUE, quote = "", comment.char = "",sep = "\t")
df.prot
#url <- "ftp://ftp.pride.ebi.ac.uk/pride/data/archive/2016/06/PXD004163/Yan_miR_Protein_table.flatprottable.txt"
#download.file(url, destfile = "./miR_Proteintable.txt",method = "auto")
df.prot = read.table("F:\\promec\\Animesh\\Yan_miR_Protein_table.flatprottable.txt",stringsAsFactors = FALSE,header = TRUE, quote = "", comment.char = "",sep = "\t")
df.prot
View(df.prot)
View(dat.log)
